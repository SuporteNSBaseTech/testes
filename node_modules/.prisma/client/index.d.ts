
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Messages
 * 
 */
export type Messages = $Result.DefaultSelection<Prisma.$MessagesPayload>
/**
 * Model Cadastro_pacientes
 * 
 */
export type Cadastro_pacientes = $Result.DefaultSelection<Prisma.$Cadastro_pacientesPayload>
/**
 * Model Agendamento
 * 
 */
export type Agendamento = $Result.DefaultSelection<Prisma.$AgendamentoPayload>
/**
 * Model cadastro_convenio
 * 
 */
export type cadastro_convenio = $Result.DefaultSelection<Prisma.$cadastro_convenioPayload>
/**
 * Model cadastro_user
 * 
 */
export type cadastro_user = $Result.DefaultSelection<Prisma.$cadastro_userPayload>
/**
 * Model Fluxo_de_caixa
 * 
 */
export type Fluxo_de_caixa = $Result.DefaultSelection<Prisma.$Fluxo_de_caixaPayload>
/**
 * Model Espera
 * 
 */
export type Espera = $Result.DefaultSelection<Prisma.$EsperaPayload>
/**
 * Model cadastro_prof
 * 
 */
export type cadastro_prof = $Result.DefaultSelection<Prisma.$cadastro_profPayload>
/**
 * Model Atendimento
 * 
 */
export type Atendimento = $Result.DefaultSelection<Prisma.$AtendimentoPayload>
/**
 * Model Ajuda
 * 
 */
export type Ajuda = $Result.DefaultSelection<Prisma.$AjudaPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Messages
 * const messages = await prisma.messages.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Messages
   * const messages = await prisma.messages.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.messages`: Exposes CRUD operations for the **Messages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.messages.findMany()
    * ```
    */
  get messages(): Prisma.MessagesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cadastro_pacientes`: Exposes CRUD operations for the **Cadastro_pacientes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cadastro_pacientes
    * const cadastro_pacientes = await prisma.cadastro_pacientes.findMany()
    * ```
    */
  get cadastro_pacientes(): Prisma.Cadastro_pacientesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.agendamento`: Exposes CRUD operations for the **Agendamento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agendamentos
    * const agendamentos = await prisma.agendamento.findMany()
    * ```
    */
  get agendamento(): Prisma.AgendamentoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cadastro_convenio`: Exposes CRUD operations for the **cadastro_convenio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cadastro_convenios
    * const cadastro_convenios = await prisma.cadastro_convenio.findMany()
    * ```
    */
  get cadastro_convenio(): Prisma.cadastro_convenioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cadastro_user`: Exposes CRUD operations for the **cadastro_user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cadastro_users
    * const cadastro_users = await prisma.cadastro_user.findMany()
    * ```
    */
  get cadastro_user(): Prisma.cadastro_userDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fluxo_de_caixa`: Exposes CRUD operations for the **Fluxo_de_caixa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fluxo_de_caixas
    * const fluxo_de_caixas = await prisma.fluxo_de_caixa.findMany()
    * ```
    */
  get fluxo_de_caixa(): Prisma.Fluxo_de_caixaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.espera`: Exposes CRUD operations for the **Espera** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Esperas
    * const esperas = await prisma.espera.findMany()
    * ```
    */
  get espera(): Prisma.EsperaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cadastro_prof`: Exposes CRUD operations for the **cadastro_prof** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cadastro_profs
    * const cadastro_profs = await prisma.cadastro_prof.findMany()
    * ```
    */
  get cadastro_prof(): Prisma.cadastro_profDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.atendimento`: Exposes CRUD operations for the **Atendimento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Atendimentos
    * const atendimentos = await prisma.atendimento.findMany()
    * ```
    */
  get atendimento(): Prisma.AtendimentoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ajuda`: Exposes CRUD operations for the **Ajuda** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ajudas
    * const ajudas = await prisma.ajuda.findMany()
    * ```
    */
  get ajuda(): Prisma.AjudaDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 69d742ee20b815d88e17e54db4a2a7a3b30324e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Messages: 'Messages',
    Cadastro_pacientes: 'Cadastro_pacientes',
    Agendamento: 'Agendamento',
    cadastro_convenio: 'cadastro_convenio',
    cadastro_user: 'cadastro_user',
    Fluxo_de_caixa: 'Fluxo_de_caixa',
    Espera: 'Espera',
    cadastro_prof: 'cadastro_prof',
    Atendimento: 'Atendimento',
    Ajuda: 'Ajuda'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "messages" | "cadastro_pacientes" | "agendamento" | "cadastro_convenio" | "cadastro_user" | "fluxo_de_caixa" | "espera" | "cadastro_prof" | "atendimento" | "ajuda"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Messages: {
        payload: Prisma.$MessagesPayload<ExtArgs>
        fields: Prisma.MessagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessagesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessagesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          findFirst: {
            args: Prisma.MessagesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessagesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          findMany: {
            args: Prisma.MessagesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>[]
          }
          create: {
            args: Prisma.MessagesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          createMany: {
            args: Prisma.MessagesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessagesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>[]
          }
          delete: {
            args: Prisma.MessagesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          update: {
            args: Prisma.MessagesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          deleteMany: {
            args: Prisma.MessagesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessagesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessagesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagesPayload>
          }
          aggregate: {
            args: Prisma.MessagesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessages>
          }
          groupBy: {
            args: Prisma.MessagesGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessagesCountArgs<ExtArgs>
            result: $Utils.Optional<MessagesCountAggregateOutputType> | number
          }
        }
      }
      Cadastro_pacientes: {
        payload: Prisma.$Cadastro_pacientesPayload<ExtArgs>
        fields: Prisma.Cadastro_pacientesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Cadastro_pacientesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Cadastro_pacientesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload>
          }
          findFirst: {
            args: Prisma.Cadastro_pacientesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Cadastro_pacientesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload>
          }
          findMany: {
            args: Prisma.Cadastro_pacientesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload>[]
          }
          create: {
            args: Prisma.Cadastro_pacientesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload>
          }
          createMany: {
            args: Prisma.Cadastro_pacientesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Cadastro_pacientesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload>[]
          }
          delete: {
            args: Prisma.Cadastro_pacientesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload>
          }
          update: {
            args: Prisma.Cadastro_pacientesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload>
          }
          deleteMany: {
            args: Prisma.Cadastro_pacientesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Cadastro_pacientesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Cadastro_pacientesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Cadastro_pacientesPayload>
          }
          aggregate: {
            args: Prisma.Cadastro_pacientesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCadastro_pacientes>
          }
          groupBy: {
            args: Prisma.Cadastro_pacientesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Cadastro_pacientesGroupByOutputType>[]
          }
          count: {
            args: Prisma.Cadastro_pacientesCountArgs<ExtArgs>
            result: $Utils.Optional<Cadastro_pacientesCountAggregateOutputType> | number
          }
        }
      }
      Agendamento: {
        payload: Prisma.$AgendamentoPayload<ExtArgs>
        fields: Prisma.AgendamentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgendamentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgendamentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload>
          }
          findFirst: {
            args: Prisma.AgendamentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgendamentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload>
          }
          findMany: {
            args: Prisma.AgendamentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload>[]
          }
          create: {
            args: Prisma.AgendamentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload>
          }
          createMany: {
            args: Prisma.AgendamentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgendamentoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload>[]
          }
          delete: {
            args: Prisma.AgendamentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload>
          }
          update: {
            args: Prisma.AgendamentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload>
          }
          deleteMany: {
            args: Prisma.AgendamentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgendamentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AgendamentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoPayload>
          }
          aggregate: {
            args: Prisma.AgendamentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgendamento>
          }
          groupBy: {
            args: Prisma.AgendamentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgendamentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgendamentoCountArgs<ExtArgs>
            result: $Utils.Optional<AgendamentoCountAggregateOutputType> | number
          }
        }
      }
      cadastro_convenio: {
        payload: Prisma.$cadastro_convenioPayload<ExtArgs>
        fields: Prisma.cadastro_convenioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cadastro_convenioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cadastro_convenioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload>
          }
          findFirst: {
            args: Prisma.cadastro_convenioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cadastro_convenioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload>
          }
          findMany: {
            args: Prisma.cadastro_convenioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload>[]
          }
          create: {
            args: Prisma.cadastro_convenioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload>
          }
          createMany: {
            args: Prisma.cadastro_convenioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.cadastro_convenioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload>[]
          }
          delete: {
            args: Prisma.cadastro_convenioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload>
          }
          update: {
            args: Prisma.cadastro_convenioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload>
          }
          deleteMany: {
            args: Prisma.cadastro_convenioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.cadastro_convenioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.cadastro_convenioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_convenioPayload>
          }
          aggregate: {
            args: Prisma.Cadastro_convenioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCadastro_convenio>
          }
          groupBy: {
            args: Prisma.cadastro_convenioGroupByArgs<ExtArgs>
            result: $Utils.Optional<Cadastro_convenioGroupByOutputType>[]
          }
          count: {
            args: Prisma.cadastro_convenioCountArgs<ExtArgs>
            result: $Utils.Optional<Cadastro_convenioCountAggregateOutputType> | number
          }
        }
      }
      cadastro_user: {
        payload: Prisma.$cadastro_userPayload<ExtArgs>
        fields: Prisma.cadastro_userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cadastro_userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cadastro_userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload>
          }
          findFirst: {
            args: Prisma.cadastro_userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cadastro_userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload>
          }
          findMany: {
            args: Prisma.cadastro_userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload>[]
          }
          create: {
            args: Prisma.cadastro_userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload>
          }
          createMany: {
            args: Prisma.cadastro_userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.cadastro_userCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload>[]
          }
          delete: {
            args: Prisma.cadastro_userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload>
          }
          update: {
            args: Prisma.cadastro_userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload>
          }
          deleteMany: {
            args: Prisma.cadastro_userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.cadastro_userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.cadastro_userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_userPayload>
          }
          aggregate: {
            args: Prisma.Cadastro_userAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCadastro_user>
          }
          groupBy: {
            args: Prisma.cadastro_userGroupByArgs<ExtArgs>
            result: $Utils.Optional<Cadastro_userGroupByOutputType>[]
          }
          count: {
            args: Prisma.cadastro_userCountArgs<ExtArgs>
            result: $Utils.Optional<Cadastro_userCountAggregateOutputType> | number
          }
        }
      }
      Fluxo_de_caixa: {
        payload: Prisma.$Fluxo_de_caixaPayload<ExtArgs>
        fields: Prisma.Fluxo_de_caixaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Fluxo_de_caixaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Fluxo_de_caixaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload>
          }
          findFirst: {
            args: Prisma.Fluxo_de_caixaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Fluxo_de_caixaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload>
          }
          findMany: {
            args: Prisma.Fluxo_de_caixaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload>[]
          }
          create: {
            args: Prisma.Fluxo_de_caixaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload>
          }
          createMany: {
            args: Prisma.Fluxo_de_caixaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Fluxo_de_caixaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload>[]
          }
          delete: {
            args: Prisma.Fluxo_de_caixaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload>
          }
          update: {
            args: Prisma.Fluxo_de_caixaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload>
          }
          deleteMany: {
            args: Prisma.Fluxo_de_caixaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Fluxo_de_caixaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Fluxo_de_caixaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Fluxo_de_caixaPayload>
          }
          aggregate: {
            args: Prisma.Fluxo_de_caixaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFluxo_de_caixa>
          }
          groupBy: {
            args: Prisma.Fluxo_de_caixaGroupByArgs<ExtArgs>
            result: $Utils.Optional<Fluxo_de_caixaGroupByOutputType>[]
          }
          count: {
            args: Prisma.Fluxo_de_caixaCountArgs<ExtArgs>
            result: $Utils.Optional<Fluxo_de_caixaCountAggregateOutputType> | number
          }
        }
      }
      Espera: {
        payload: Prisma.$EsperaPayload<ExtArgs>
        fields: Prisma.EsperaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EsperaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsperaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EsperaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsperaPayload>
          }
          findFirst: {
            args: Prisma.EsperaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsperaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EsperaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsperaPayload>
          }
          findMany: {
            args: Prisma.EsperaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsperaPayload>[]
          }
          create: {
            args: Prisma.EsperaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsperaPayload>
          }
          createMany: {
            args: Prisma.EsperaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EsperaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsperaPayload>[]
          }
          delete: {
            args: Prisma.EsperaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsperaPayload>
          }
          update: {
            args: Prisma.EsperaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsperaPayload>
          }
          deleteMany: {
            args: Prisma.EsperaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EsperaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EsperaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsperaPayload>
          }
          aggregate: {
            args: Prisma.EsperaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEspera>
          }
          groupBy: {
            args: Prisma.EsperaGroupByArgs<ExtArgs>
            result: $Utils.Optional<EsperaGroupByOutputType>[]
          }
          count: {
            args: Prisma.EsperaCountArgs<ExtArgs>
            result: $Utils.Optional<EsperaCountAggregateOutputType> | number
          }
        }
      }
      cadastro_prof: {
        payload: Prisma.$cadastro_profPayload<ExtArgs>
        fields: Prisma.cadastro_profFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cadastro_profFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_profPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cadastro_profFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_profPayload>
          }
          findFirst: {
            args: Prisma.cadastro_profFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_profPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cadastro_profFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_profPayload>
          }
          findMany: {
            args: Prisma.cadastro_profFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_profPayload>[]
          }
          create: {
            args: Prisma.cadastro_profCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_profPayload>
          }
          createMany: {
            args: Prisma.cadastro_profCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.cadastro_profCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_profPayload>[]
          }
          delete: {
            args: Prisma.cadastro_profDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_profPayload>
          }
          update: {
            args: Prisma.cadastro_profUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_profPayload>
          }
          deleteMany: {
            args: Prisma.cadastro_profDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.cadastro_profUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.cadastro_profUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cadastro_profPayload>
          }
          aggregate: {
            args: Prisma.Cadastro_profAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCadastro_prof>
          }
          groupBy: {
            args: Prisma.cadastro_profGroupByArgs<ExtArgs>
            result: $Utils.Optional<Cadastro_profGroupByOutputType>[]
          }
          count: {
            args: Prisma.cadastro_profCountArgs<ExtArgs>
            result: $Utils.Optional<Cadastro_profCountAggregateOutputType> | number
          }
        }
      }
      Atendimento: {
        payload: Prisma.$AtendimentoPayload<ExtArgs>
        fields: Prisma.AtendimentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AtendimentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtendimentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AtendimentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtendimentoPayload>
          }
          findFirst: {
            args: Prisma.AtendimentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtendimentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AtendimentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtendimentoPayload>
          }
          findMany: {
            args: Prisma.AtendimentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtendimentoPayload>[]
          }
          create: {
            args: Prisma.AtendimentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtendimentoPayload>
          }
          createMany: {
            args: Prisma.AtendimentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AtendimentoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtendimentoPayload>[]
          }
          delete: {
            args: Prisma.AtendimentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtendimentoPayload>
          }
          update: {
            args: Prisma.AtendimentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtendimentoPayload>
          }
          deleteMany: {
            args: Prisma.AtendimentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AtendimentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AtendimentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AtendimentoPayload>
          }
          aggregate: {
            args: Prisma.AtendimentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAtendimento>
          }
          groupBy: {
            args: Prisma.AtendimentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<AtendimentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.AtendimentoCountArgs<ExtArgs>
            result: $Utils.Optional<AtendimentoCountAggregateOutputType> | number
          }
        }
      }
      Ajuda: {
        payload: Prisma.$AjudaPayload<ExtArgs>
        fields: Prisma.AjudaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AjudaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AjudaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AjudaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AjudaPayload>
          }
          findFirst: {
            args: Prisma.AjudaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AjudaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AjudaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AjudaPayload>
          }
          findMany: {
            args: Prisma.AjudaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AjudaPayload>[]
          }
          create: {
            args: Prisma.AjudaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AjudaPayload>
          }
          createMany: {
            args: Prisma.AjudaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AjudaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AjudaPayload>[]
          }
          delete: {
            args: Prisma.AjudaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AjudaPayload>
          }
          update: {
            args: Prisma.AjudaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AjudaPayload>
          }
          deleteMany: {
            args: Prisma.AjudaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AjudaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AjudaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AjudaPayload>
          }
          aggregate: {
            args: Prisma.AjudaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAjuda>
          }
          groupBy: {
            args: Prisma.AjudaGroupByArgs<ExtArgs>
            result: $Utils.Optional<AjudaGroupByOutputType>[]
          }
          count: {
            args: Prisma.AjudaCountArgs<ExtArgs>
            result: $Utils.Optional<AjudaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    messages?: MessagesOmit
    cadastro_pacientes?: Cadastro_pacientesOmit
    agendamento?: AgendamentoOmit
    cadastro_convenio?: cadastro_convenioOmit
    cadastro_user?: cadastro_userOmit
    fluxo_de_caixa?: Fluxo_de_caixaOmit
    espera?: EsperaOmit
    cadastro_prof?: cadastro_profOmit
    atendimento?: AtendimentoOmit
    ajuda?: AjudaOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Messages
   */

  export type AggregateMessages = {
    _count: MessagesCountAggregateOutputType | null
    _min: MessagesMinAggregateOutputType | null
    _max: MessagesMaxAggregateOutputType | null
  }

  export type MessagesMinAggregateOutputType = {
    id: string | null
    from: string | null
    to: string | null
    content: string | null
    createdAt: Date | null
    visualizado: boolean | null
  }

  export type MessagesMaxAggregateOutputType = {
    id: string | null
    from: string | null
    to: string | null
    content: string | null
    createdAt: Date | null
    visualizado: boolean | null
  }

  export type MessagesCountAggregateOutputType = {
    id: number
    from: number
    to: number
    content: number
    createdAt: number
    visualizado: number
    _all: number
  }


  export type MessagesMinAggregateInputType = {
    id?: true
    from?: true
    to?: true
    content?: true
    createdAt?: true
    visualizado?: true
  }

  export type MessagesMaxAggregateInputType = {
    id?: true
    from?: true
    to?: true
    content?: true
    createdAt?: true
    visualizado?: true
  }

  export type MessagesCountAggregateInputType = {
    id?: true
    from?: true
    to?: true
    content?: true
    createdAt?: true
    visualizado?: true
    _all?: true
  }

  export type MessagesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to aggregate.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessagesMaxAggregateInputType
  }

  export type GetMessagesAggregateType<T extends MessagesAggregateArgs> = {
        [P in keyof T & keyof AggregateMessages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessages[P]>
      : GetScalarType<T[P], AggregateMessages[P]>
  }




  export type MessagesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessagesWhereInput
    orderBy?: MessagesOrderByWithAggregationInput | MessagesOrderByWithAggregationInput[]
    by: MessagesScalarFieldEnum[] | MessagesScalarFieldEnum
    having?: MessagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessagesCountAggregateInputType | true
    _min?: MessagesMinAggregateInputType
    _max?: MessagesMaxAggregateInputType
  }

  export type MessagesGroupByOutputType = {
    id: string
    from: string
    to: string
    content: string
    createdAt: Date
    visualizado: boolean
    _count: MessagesCountAggregateOutputType | null
    _min: MessagesMinAggregateOutputType | null
    _max: MessagesMaxAggregateOutputType | null
  }

  type GetMessagesGroupByPayload<T extends MessagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessagesGroupByOutputType[P]>
            : GetScalarType<T[P], MessagesGroupByOutputType[P]>
        }
      >
    >


  export type MessagesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    from?: boolean
    to?: boolean
    content?: boolean
    createdAt?: boolean
    visualizado?: boolean
  }, ExtArgs["result"]["messages"]>

  export type MessagesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    from?: boolean
    to?: boolean
    content?: boolean
    createdAt?: boolean
    visualizado?: boolean
  }, ExtArgs["result"]["messages"]>


  export type MessagesSelectScalar = {
    id?: boolean
    from?: boolean
    to?: boolean
    content?: boolean
    createdAt?: boolean
    visualizado?: boolean
  }

  export type MessagesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "from" | "to" | "content" | "createdAt" | "visualizado", ExtArgs["result"]["messages"]>

  export type $MessagesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Messages"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      from: string
      to: string
      content: string
      createdAt: Date
      visualizado: boolean
    }, ExtArgs["result"]["messages"]>
    composites: {}
  }

  type MessagesGetPayload<S extends boolean | null | undefined | MessagesDefaultArgs> = $Result.GetResult<Prisma.$MessagesPayload, S>

  type MessagesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessagesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessagesCountAggregateInputType | true
    }

  export interface MessagesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Messages'], meta: { name: 'Messages' } }
    /**
     * Find zero or one Messages that matches the filter.
     * @param {MessagesFindUniqueArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessagesFindUniqueArgs>(args: SelectSubset<T, MessagesFindUniqueArgs<ExtArgs>>): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Messages that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessagesFindUniqueOrThrowArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessagesFindUniqueOrThrowArgs>(args: SelectSubset<T, MessagesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesFindFirstArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessagesFindFirstArgs>(args?: SelectSubset<T, MessagesFindFirstArgs<ExtArgs>>): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Messages that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesFindFirstOrThrowArgs} args - Arguments to find a Messages
     * @example
     * // Get one Messages
     * const messages = await prisma.messages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessagesFindFirstOrThrowArgs>(args?: SelectSubset<T, MessagesFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.messages.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.messages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messagesWithIdOnly = await prisma.messages.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessagesFindManyArgs>(args?: SelectSubset<T, MessagesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Messages.
     * @param {MessagesCreateArgs} args - Arguments to create a Messages.
     * @example
     * // Create one Messages
     * const Messages = await prisma.messages.create({
     *   data: {
     *     // ... data to create a Messages
     *   }
     * })
     * 
     */
    create<T extends MessagesCreateArgs>(args: SelectSubset<T, MessagesCreateArgs<ExtArgs>>): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessagesCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const messages = await prisma.messages.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessagesCreateManyArgs>(args?: SelectSubset<T, MessagesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessagesCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const messages = await prisma.messages.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messagesWithIdOnly = await prisma.messages.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessagesCreateManyAndReturnArgs>(args?: SelectSubset<T, MessagesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Messages.
     * @param {MessagesDeleteArgs} args - Arguments to delete one Messages.
     * @example
     * // Delete one Messages
     * const Messages = await prisma.messages.delete({
     *   where: {
     *     // ... filter to delete one Messages
     *   }
     * })
     * 
     */
    delete<T extends MessagesDeleteArgs>(args: SelectSubset<T, MessagesDeleteArgs<ExtArgs>>): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Messages.
     * @param {MessagesUpdateArgs} args - Arguments to update one Messages.
     * @example
     * // Update one Messages
     * const messages = await prisma.messages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessagesUpdateArgs>(args: SelectSubset<T, MessagesUpdateArgs<ExtArgs>>): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessagesDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.messages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessagesDeleteManyArgs>(args?: SelectSubset<T, MessagesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const messages = await prisma.messages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessagesUpdateManyArgs>(args: SelectSubset<T, MessagesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Messages.
     * @param {MessagesUpsertArgs} args - Arguments to update or create a Messages.
     * @example
     * // Update or create a Messages
     * const messages = await prisma.messages.upsert({
     *   create: {
     *     // ... data to create a Messages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Messages we want to update
     *   }
     * })
     */
    upsert<T extends MessagesUpsertArgs>(args: SelectSubset<T, MessagesUpsertArgs<ExtArgs>>): Prisma__MessagesClient<$Result.GetResult<Prisma.$MessagesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.messages.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessagesCountArgs>(
      args?: Subset<T, MessagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessagesAggregateArgs>(args: Subset<T, MessagesAggregateArgs>): Prisma.PrismaPromise<GetMessagesAggregateType<T>>

    /**
     * Group by Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessagesGroupByArgs['orderBy'] }
        : { orderBy?: MessagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Messages model
   */
  readonly fields: MessagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Messages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessagesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Messages model
   */
  interface MessagesFieldRefs {
    readonly id: FieldRef<"Messages", 'String'>
    readonly from: FieldRef<"Messages", 'String'>
    readonly to: FieldRef<"Messages", 'String'>
    readonly content: FieldRef<"Messages", 'String'>
    readonly createdAt: FieldRef<"Messages", 'DateTime'>
    readonly visualizado: FieldRef<"Messages", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Messages findUnique
   */
  export type MessagesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where: MessagesWhereUniqueInput
  }

  /**
   * Messages findUniqueOrThrow
   */
  export type MessagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where: MessagesWhereUniqueInput
  }

  /**
   * Messages findFirst
   */
  export type MessagesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }

  /**
   * Messages findFirstOrThrow
   */
  export type MessagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }

  /**
   * Messages findMany
   */
  export type MessagesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessagesOrderByWithRelationInput | MessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessagesScalarFieldEnum | MessagesScalarFieldEnum[]
  }

  /**
   * Messages create
   */
  export type MessagesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * The data needed to create a Messages.
     */
    data: XOR<MessagesCreateInput, MessagesUncheckedCreateInput>
  }

  /**
   * Messages createMany
   */
  export type MessagesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessagesCreateManyInput | MessagesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Messages createManyAndReturn
   */
  export type MessagesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessagesCreateManyInput | MessagesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Messages update
   */
  export type MessagesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * The data needed to update a Messages.
     */
    data: XOR<MessagesUpdateInput, MessagesUncheckedUpdateInput>
    /**
     * Choose, which Messages to update.
     */
    where: MessagesWhereUniqueInput
  }

  /**
   * Messages updateMany
   */
  export type MessagesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessagesUpdateManyMutationInput, MessagesUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessagesWhereInput
  }

  /**
   * Messages upsert
   */
  export type MessagesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * The filter to search for the Messages to update in case it exists.
     */
    where: MessagesWhereUniqueInput
    /**
     * In case the Messages found by the `where` argument doesn't exist, create a new Messages with this data.
     */
    create: XOR<MessagesCreateInput, MessagesUncheckedCreateInput>
    /**
     * In case the Messages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessagesUpdateInput, MessagesUncheckedUpdateInput>
  }

  /**
   * Messages delete
   */
  export type MessagesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
    /**
     * Filter which Messages to delete.
     */
    where: MessagesWhereUniqueInput
  }

  /**
   * Messages deleteMany
   */
  export type MessagesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessagesWhereInput
  }

  /**
   * Messages without action
   */
  export type MessagesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Messages
     */
    select?: MessagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Messages
     */
    omit?: MessagesOmit<ExtArgs> | null
  }


  /**
   * Model Cadastro_pacientes
   */

  export type AggregateCadastro_pacientes = {
    _count: Cadastro_pacientesCountAggregateOutputType | null
    _avg: Cadastro_pacientesAvgAggregateOutputType | null
    _sum: Cadastro_pacientesSumAggregateOutputType | null
    _min: Cadastro_pacientesMinAggregateOutputType | null
    _max: Cadastro_pacientesMaxAggregateOutputType | null
  }

  export type Cadastro_pacientesAvgAggregateOutputType = {
    recoveryCode: number | null
  }

  export type Cadastro_pacientesSumAggregateOutputType = {
    recoveryCode: number | null
  }

  export type Cadastro_pacientesMinAggregateOutputType = {
    id: string | null
    Nome: string | null
    Telefone: string | null
    Email: string | null
    Data_de_Nascimento: string | null
    Idade: string | null
    Genero: string | null
    CPF_CNPJ: string | null
    Endereco: string | null
    Numero: string | null
    CEP: string | null
    Cidade: string | null
    Estado: string | null
    Nome_do_Pai_ou_Responsavel: string | null
    Telefone_Pai: string | null
    Nome_da_Mae_ou_Responsavel: string | null
    Telefone_Mae: string | null
    Especialista: string | null
    recoveryCode: number | null
    Eh_Crianca: boolean | null
  }

  export type Cadastro_pacientesMaxAggregateOutputType = {
    id: string | null
    Nome: string | null
    Telefone: string | null
    Email: string | null
    Data_de_Nascimento: string | null
    Idade: string | null
    Genero: string | null
    CPF_CNPJ: string | null
    Endereco: string | null
    Numero: string | null
    CEP: string | null
    Cidade: string | null
    Estado: string | null
    Nome_do_Pai_ou_Responsavel: string | null
    Telefone_Pai: string | null
    Nome_da_Mae_ou_Responsavel: string | null
    Telefone_Mae: string | null
    Especialista: string | null
    recoveryCode: number | null
    Eh_Crianca: boolean | null
  }

  export type Cadastro_pacientesCountAggregateOutputType = {
    id: number
    Nome: number
    Telefone: number
    Email: number
    Data_de_Nascimento: number
    Idade: number
    Genero: number
    CPF_CNPJ: number
    Endereco: number
    Numero: number
    CEP: number
    Cidade: number
    Estado: number
    Nome_do_Pai_ou_Responsavel: number
    Telefone_Pai: number
    Nome_da_Mae_ou_Responsavel: number
    Telefone_Mae: number
    Especialista: number
    recoveryCode: number
    Eh_Crianca: number
    _all: number
  }


  export type Cadastro_pacientesAvgAggregateInputType = {
    recoveryCode?: true
  }

  export type Cadastro_pacientesSumAggregateInputType = {
    recoveryCode?: true
  }

  export type Cadastro_pacientesMinAggregateInputType = {
    id?: true
    Nome?: true
    Telefone?: true
    Email?: true
    Data_de_Nascimento?: true
    Idade?: true
    Genero?: true
    CPF_CNPJ?: true
    Endereco?: true
    Numero?: true
    CEP?: true
    Cidade?: true
    Estado?: true
    Nome_do_Pai_ou_Responsavel?: true
    Telefone_Pai?: true
    Nome_da_Mae_ou_Responsavel?: true
    Telefone_Mae?: true
    Especialista?: true
    recoveryCode?: true
    Eh_Crianca?: true
  }

  export type Cadastro_pacientesMaxAggregateInputType = {
    id?: true
    Nome?: true
    Telefone?: true
    Email?: true
    Data_de_Nascimento?: true
    Idade?: true
    Genero?: true
    CPF_CNPJ?: true
    Endereco?: true
    Numero?: true
    CEP?: true
    Cidade?: true
    Estado?: true
    Nome_do_Pai_ou_Responsavel?: true
    Telefone_Pai?: true
    Nome_da_Mae_ou_Responsavel?: true
    Telefone_Mae?: true
    Especialista?: true
    recoveryCode?: true
    Eh_Crianca?: true
  }

  export type Cadastro_pacientesCountAggregateInputType = {
    id?: true
    Nome?: true
    Telefone?: true
    Email?: true
    Data_de_Nascimento?: true
    Idade?: true
    Genero?: true
    CPF_CNPJ?: true
    Endereco?: true
    Numero?: true
    CEP?: true
    Cidade?: true
    Estado?: true
    Nome_do_Pai_ou_Responsavel?: true
    Telefone_Pai?: true
    Nome_da_Mae_ou_Responsavel?: true
    Telefone_Mae?: true
    Especialista?: true
    recoveryCode?: true
    Eh_Crianca?: true
    _all?: true
  }

  export type Cadastro_pacientesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cadastro_pacientes to aggregate.
     */
    where?: Cadastro_pacientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cadastro_pacientes to fetch.
     */
    orderBy?: Cadastro_pacientesOrderByWithRelationInput | Cadastro_pacientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Cadastro_pacientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cadastro_pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cadastro_pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cadastro_pacientes
    **/
    _count?: true | Cadastro_pacientesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Cadastro_pacientesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Cadastro_pacientesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cadastro_pacientesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cadastro_pacientesMaxAggregateInputType
  }

  export type GetCadastro_pacientesAggregateType<T extends Cadastro_pacientesAggregateArgs> = {
        [P in keyof T & keyof AggregateCadastro_pacientes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCadastro_pacientes[P]>
      : GetScalarType<T[P], AggregateCadastro_pacientes[P]>
  }




  export type Cadastro_pacientesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Cadastro_pacientesWhereInput
    orderBy?: Cadastro_pacientesOrderByWithAggregationInput | Cadastro_pacientesOrderByWithAggregationInput[]
    by: Cadastro_pacientesScalarFieldEnum[] | Cadastro_pacientesScalarFieldEnum
    having?: Cadastro_pacientesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cadastro_pacientesCountAggregateInputType | true
    _avg?: Cadastro_pacientesAvgAggregateInputType
    _sum?: Cadastro_pacientesSumAggregateInputType
    _min?: Cadastro_pacientesMinAggregateInputType
    _max?: Cadastro_pacientesMaxAggregateInputType
  }

  export type Cadastro_pacientesGroupByOutputType = {
    id: string
    Nome: string
    Telefone: string
    Email: string
    Data_de_Nascimento: string
    Idade: string
    Genero: string
    CPF_CNPJ: string
    Endereco: string
    Numero: string
    CEP: string
    Cidade: string
    Estado: string
    Nome_do_Pai_ou_Responsavel: string
    Telefone_Pai: string
    Nome_da_Mae_ou_Responsavel: string
    Telefone_Mae: string
    Especialista: string
    recoveryCode: number | null
    Eh_Crianca: boolean
    _count: Cadastro_pacientesCountAggregateOutputType | null
    _avg: Cadastro_pacientesAvgAggregateOutputType | null
    _sum: Cadastro_pacientesSumAggregateOutputType | null
    _min: Cadastro_pacientesMinAggregateOutputType | null
    _max: Cadastro_pacientesMaxAggregateOutputType | null
  }

  type GetCadastro_pacientesGroupByPayload<T extends Cadastro_pacientesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cadastro_pacientesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cadastro_pacientesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cadastro_pacientesGroupByOutputType[P]>
            : GetScalarType<T[P], Cadastro_pacientesGroupByOutputType[P]>
        }
      >
    >


  export type Cadastro_pacientesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nome?: boolean
    Telefone?: boolean
    Email?: boolean
    Data_de_Nascimento?: boolean
    Idade?: boolean
    Genero?: boolean
    CPF_CNPJ?: boolean
    Endereco?: boolean
    Numero?: boolean
    CEP?: boolean
    Cidade?: boolean
    Estado?: boolean
    Nome_do_Pai_ou_Responsavel?: boolean
    Telefone_Pai?: boolean
    Nome_da_Mae_ou_Responsavel?: boolean
    Telefone_Mae?: boolean
    Especialista?: boolean
    recoveryCode?: boolean
    Eh_Crianca?: boolean
  }, ExtArgs["result"]["cadastro_pacientes"]>

  export type Cadastro_pacientesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nome?: boolean
    Telefone?: boolean
    Email?: boolean
    Data_de_Nascimento?: boolean
    Idade?: boolean
    Genero?: boolean
    CPF_CNPJ?: boolean
    Endereco?: boolean
    Numero?: boolean
    CEP?: boolean
    Cidade?: boolean
    Estado?: boolean
    Nome_do_Pai_ou_Responsavel?: boolean
    Telefone_Pai?: boolean
    Nome_da_Mae_ou_Responsavel?: boolean
    Telefone_Mae?: boolean
    Especialista?: boolean
    recoveryCode?: boolean
    Eh_Crianca?: boolean
  }, ExtArgs["result"]["cadastro_pacientes"]>


  export type Cadastro_pacientesSelectScalar = {
    id?: boolean
    Nome?: boolean
    Telefone?: boolean
    Email?: boolean
    Data_de_Nascimento?: boolean
    Idade?: boolean
    Genero?: boolean
    CPF_CNPJ?: boolean
    Endereco?: boolean
    Numero?: boolean
    CEP?: boolean
    Cidade?: boolean
    Estado?: boolean
    Nome_do_Pai_ou_Responsavel?: boolean
    Telefone_Pai?: boolean
    Nome_da_Mae_ou_Responsavel?: boolean
    Telefone_Mae?: boolean
    Especialista?: boolean
    recoveryCode?: boolean
    Eh_Crianca?: boolean
  }

  export type Cadastro_pacientesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "Nome" | "Telefone" | "Email" | "Data_de_Nascimento" | "Idade" | "Genero" | "CPF_CNPJ" | "Endereco" | "Numero" | "CEP" | "Cidade" | "Estado" | "Nome_do_Pai_ou_Responsavel" | "Telefone_Pai" | "Nome_da_Mae_ou_Responsavel" | "Telefone_Mae" | "Especialista" | "recoveryCode" | "Eh_Crianca", ExtArgs["result"]["cadastro_pacientes"]>

  export type $Cadastro_pacientesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cadastro_pacientes"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      Nome: string
      Telefone: string
      Email: string
      Data_de_Nascimento: string
      Idade: string
      Genero: string
      CPF_CNPJ: string
      Endereco: string
      Numero: string
      CEP: string
      Cidade: string
      Estado: string
      Nome_do_Pai_ou_Responsavel: string
      Telefone_Pai: string
      Nome_da_Mae_ou_Responsavel: string
      Telefone_Mae: string
      Especialista: string
      recoveryCode: number | null
      Eh_Crianca: boolean
    }, ExtArgs["result"]["cadastro_pacientes"]>
    composites: {}
  }

  type Cadastro_pacientesGetPayload<S extends boolean | null | undefined | Cadastro_pacientesDefaultArgs> = $Result.GetResult<Prisma.$Cadastro_pacientesPayload, S>

  type Cadastro_pacientesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Cadastro_pacientesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Cadastro_pacientesCountAggregateInputType | true
    }

  export interface Cadastro_pacientesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cadastro_pacientes'], meta: { name: 'Cadastro_pacientes' } }
    /**
     * Find zero or one Cadastro_pacientes that matches the filter.
     * @param {Cadastro_pacientesFindUniqueArgs} args - Arguments to find a Cadastro_pacientes
     * @example
     * // Get one Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Cadastro_pacientesFindUniqueArgs>(args: SelectSubset<T, Cadastro_pacientesFindUniqueArgs<ExtArgs>>): Prisma__Cadastro_pacientesClient<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cadastro_pacientes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Cadastro_pacientesFindUniqueOrThrowArgs} args - Arguments to find a Cadastro_pacientes
     * @example
     * // Get one Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Cadastro_pacientesFindUniqueOrThrowArgs>(args: SelectSubset<T, Cadastro_pacientesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Cadastro_pacientesClient<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cadastro_pacientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_pacientesFindFirstArgs} args - Arguments to find a Cadastro_pacientes
     * @example
     * // Get one Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Cadastro_pacientesFindFirstArgs>(args?: SelectSubset<T, Cadastro_pacientesFindFirstArgs<ExtArgs>>): Prisma__Cadastro_pacientesClient<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cadastro_pacientes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_pacientesFindFirstOrThrowArgs} args - Arguments to find a Cadastro_pacientes
     * @example
     * // Get one Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Cadastro_pacientesFindFirstOrThrowArgs>(args?: SelectSubset<T, Cadastro_pacientesFindFirstOrThrowArgs<ExtArgs>>): Prisma__Cadastro_pacientesClient<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cadastro_pacientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_pacientesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.findMany()
     * 
     * // Get first 10 Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cadastro_pacientesWithIdOnly = await prisma.cadastro_pacientes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends Cadastro_pacientesFindManyArgs>(args?: SelectSubset<T, Cadastro_pacientesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cadastro_pacientes.
     * @param {Cadastro_pacientesCreateArgs} args - Arguments to create a Cadastro_pacientes.
     * @example
     * // Create one Cadastro_pacientes
     * const Cadastro_pacientes = await prisma.cadastro_pacientes.create({
     *   data: {
     *     // ... data to create a Cadastro_pacientes
     *   }
     * })
     * 
     */
    create<T extends Cadastro_pacientesCreateArgs>(args: SelectSubset<T, Cadastro_pacientesCreateArgs<ExtArgs>>): Prisma__Cadastro_pacientesClient<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cadastro_pacientes.
     * @param {Cadastro_pacientesCreateManyArgs} args - Arguments to create many Cadastro_pacientes.
     * @example
     * // Create many Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Cadastro_pacientesCreateManyArgs>(args?: SelectSubset<T, Cadastro_pacientesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cadastro_pacientes and returns the data saved in the database.
     * @param {Cadastro_pacientesCreateManyAndReturnArgs} args - Arguments to create many Cadastro_pacientes.
     * @example
     * // Create many Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cadastro_pacientes and only return the `id`
     * const cadastro_pacientesWithIdOnly = await prisma.cadastro_pacientes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Cadastro_pacientesCreateManyAndReturnArgs>(args?: SelectSubset<T, Cadastro_pacientesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Cadastro_pacientes.
     * @param {Cadastro_pacientesDeleteArgs} args - Arguments to delete one Cadastro_pacientes.
     * @example
     * // Delete one Cadastro_pacientes
     * const Cadastro_pacientes = await prisma.cadastro_pacientes.delete({
     *   where: {
     *     // ... filter to delete one Cadastro_pacientes
     *   }
     * })
     * 
     */
    delete<T extends Cadastro_pacientesDeleteArgs>(args: SelectSubset<T, Cadastro_pacientesDeleteArgs<ExtArgs>>): Prisma__Cadastro_pacientesClient<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cadastro_pacientes.
     * @param {Cadastro_pacientesUpdateArgs} args - Arguments to update one Cadastro_pacientes.
     * @example
     * // Update one Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Cadastro_pacientesUpdateArgs>(args: SelectSubset<T, Cadastro_pacientesUpdateArgs<ExtArgs>>): Prisma__Cadastro_pacientesClient<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cadastro_pacientes.
     * @param {Cadastro_pacientesDeleteManyArgs} args - Arguments to filter Cadastro_pacientes to delete.
     * @example
     * // Delete a few Cadastro_pacientes
     * const { count } = await prisma.cadastro_pacientes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Cadastro_pacientesDeleteManyArgs>(args?: SelectSubset<T, Cadastro_pacientesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cadastro_pacientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_pacientesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Cadastro_pacientesUpdateManyArgs>(args: SelectSubset<T, Cadastro_pacientesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cadastro_pacientes.
     * @param {Cadastro_pacientesUpsertArgs} args - Arguments to update or create a Cadastro_pacientes.
     * @example
     * // Update or create a Cadastro_pacientes
     * const cadastro_pacientes = await prisma.cadastro_pacientes.upsert({
     *   create: {
     *     // ... data to create a Cadastro_pacientes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cadastro_pacientes we want to update
     *   }
     * })
     */
    upsert<T extends Cadastro_pacientesUpsertArgs>(args: SelectSubset<T, Cadastro_pacientesUpsertArgs<ExtArgs>>): Prisma__Cadastro_pacientesClient<$Result.GetResult<Prisma.$Cadastro_pacientesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cadastro_pacientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_pacientesCountArgs} args - Arguments to filter Cadastro_pacientes to count.
     * @example
     * // Count the number of Cadastro_pacientes
     * const count = await prisma.cadastro_pacientes.count({
     *   where: {
     *     // ... the filter for the Cadastro_pacientes we want to count
     *   }
     * })
    **/
    count<T extends Cadastro_pacientesCountArgs>(
      args?: Subset<T, Cadastro_pacientesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cadastro_pacientesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cadastro_pacientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_pacientesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cadastro_pacientesAggregateArgs>(args: Subset<T, Cadastro_pacientesAggregateArgs>): Prisma.PrismaPromise<GetCadastro_pacientesAggregateType<T>>

    /**
     * Group by Cadastro_pacientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_pacientesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Cadastro_pacientesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Cadastro_pacientesGroupByArgs['orderBy'] }
        : { orderBy?: Cadastro_pacientesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Cadastro_pacientesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCadastro_pacientesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cadastro_pacientes model
   */
  readonly fields: Cadastro_pacientesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cadastro_pacientes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Cadastro_pacientesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cadastro_pacientes model
   */
  interface Cadastro_pacientesFieldRefs {
    readonly id: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Nome: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Telefone: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Email: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Data_de_Nascimento: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Idade: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Genero: FieldRef<"Cadastro_pacientes", 'String'>
    readonly CPF_CNPJ: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Endereco: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Numero: FieldRef<"Cadastro_pacientes", 'String'>
    readonly CEP: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Cidade: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Estado: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Nome_do_Pai_ou_Responsavel: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Telefone_Pai: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Nome_da_Mae_ou_Responsavel: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Telefone_Mae: FieldRef<"Cadastro_pacientes", 'String'>
    readonly Especialista: FieldRef<"Cadastro_pacientes", 'String'>
    readonly recoveryCode: FieldRef<"Cadastro_pacientes", 'Int'>
    readonly Eh_Crianca: FieldRef<"Cadastro_pacientes", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Cadastro_pacientes findUnique
   */
  export type Cadastro_pacientesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cadastro_pacientes
     */
    omit?: Cadastro_pacientesOmit<ExtArgs> | null
    /**
     * Filter, which Cadastro_pacientes to fetch.
     */
    where: Cadastro_pacientesWhereUniqueInput
  }

  /**
   * Cadastro_pacientes findUniqueOrThrow
   */
  export type Cadastro_pacientesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cadastro_pacientes
     */
    omit?: Cadastro_pacientesOmit<ExtArgs> | null
    /**
     * Filter, which Cadastro_pacientes to fetch.
     */
    where: Cadastro_pacientesWhereUniqueInput
  }

  /**
   * Cadastro_pacientes findFirst
   */
  export type Cadastro_pacientesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cadastro_pacientes
     */
    omit?: Cadastro_pacientesOmit<ExtArgs> | null
    /**
     * Filter, which Cadastro_pacientes to fetch.
     */
    where?: Cadastro_pacientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cadastro_pacientes to fetch.
     */
    orderBy?: Cadastro_pacientesOrderByWithRelationInput | Cadastro_pacientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cadastro_pacientes.
     */
    cursor?: Cadastro_pacientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cadastro_pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cadastro_pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cadastro_pacientes.
     */
    distinct?: Cadastro_pacientesScalarFieldEnum | Cadastro_pacientesScalarFieldEnum[]
  }

  /**
   * Cadastro_pacientes findFirstOrThrow
   */
  export type Cadastro_pacientesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cadastro_pacientes
     */
    omit?: Cadastro_pacientesOmit<ExtArgs> | null
    /**
     * Filter, which Cadastro_pacientes to fetch.
     */
    where?: Cadastro_pacientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cadastro_pacientes to fetch.
     */
    orderBy?: Cadastro_pacientesOrderByWithRelationInput | Cadastro_pacientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cadastro_pacientes.
     */
    cursor?: Cadastro_pacientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cadastro_pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cadastro_pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cadastro_pacientes.
     */
    distinct?: Cadastro_pacientesScalarFieldEnum | Cadastro_pacientesScalarFieldEnum[]
  }

  /**
   * Cadastro_pacientes findMany
   */
  export type Cadastro_pacientesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cadastro_pacientes
     */
    omit?: Cadastro_pacientesOmit<ExtArgs> | null
    /**
     * Filter, which Cadastro_pacientes to fetch.
     */
    where?: Cadastro_pacientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cadastro_pacientes to fetch.
     */
    orderBy?: Cadastro_pacientesOrderByWithRelationInput | Cadastro_pacientesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cadastro_pacientes.
     */
    cursor?: Cadastro_pacientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cadastro_pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cadastro_pacientes.
     */
    skip?: number
    distinct?: Cadastro_pacientesScalarFieldEnum | Cadastro_pacientesScalarFieldEnum[]
  }

  /**
   * Cadastro_pacientes create
   */
  export type Cadastro_pacientesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cadastro_pacientes
     */
    omit?: Cadastro_pacientesOmit<ExtArgs> | null
    /**
     * The data needed to create a Cadastro_pacientes.
     */
    data: XOR<Cadastro_pacientesCreateInput, Cadastro_pacientesUncheckedCreateInput>
  }

  /**
   * Cadastro_pacientes createMany
   */
  export type Cadastro_pacientesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cadastro_pacientes.
     */
    data: Cadastro_pacientesCreateManyInput | Cadastro_pacientesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cadastro_pacientes createManyAndReturn
   */
  export type Cadastro_pacientesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cadastro_pacientes
     */
    omit?: Cadastro_pacientesOmit<ExtArgs> | null
    /**
     * The data used to create many Cadastro_pacientes.
     */
    data: Cadastro_pacientesCreateManyInput | Cadastro_pacientesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cadastro_pacientes update
   */
  export type Cadastro_pacientesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cadastro_pacientes
     */
    omit?: Cadastro_pacientesOmit<ExtArgs> | null
    /**
     * The data needed to update a Cadastro_pacientes.
     */
    data: XOR<Cadastro_pacientesUpdateInput, Cadastro_pacientesUncheckedUpdateInput>
    /**
     * Choose, which Cadastro_pacientes to update.
     */
    where: Cadastro_pacientesWhereUniqueInput
  }

  /**
   * Cadastro_pacientes updateMany
   */
  export type Cadastro_pacientesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cadastro_pacientes.
     */
    data: XOR<Cadastro_pacientesUpdateManyMutationInput, Cadastro_pacientesUncheckedUpdateManyInput>
    /**
     * Filter which Cadastro_pacientes to update
     */
    where?: Cadastro_pacientesWhereInput
  }

  /**
   * Cadastro_pacientes upsert
   */
  export type Cadastro_pacientesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cadastro_pacientes
     */
    omit?: Cadastro_pacientesOmit<ExtArgs> | null
    /**
     * The filter to search for the Cadastro_pacientes to update in case it exists.
     */
    where: Cadastro_pacientesWhereUniqueInput
    /**
     * In case the Cadastro_pacientes found by the `where` argument doesn't exist, create a new Cadastro_pacientes with this data.
     */
    create: XOR<Cadastro_pacientesCreateInput, Cadastro_pacientesUncheckedCreateInput>
    /**
     * In case the Cadastro_pacientes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Cadastro_pacientesUpdateInput, Cadastro_pacientesUncheckedUpdateInput>
  }

  /**
   * Cadastro_pacientes delete
   */
  export type Cadastro_pacientesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cadastro_pacientes
     */
    omit?: Cadastro_pacientesOmit<ExtArgs> | null
    /**
     * Filter which Cadastro_pacientes to delete.
     */
    where: Cadastro_pacientesWhereUniqueInput
  }

  /**
   * Cadastro_pacientes deleteMany
   */
  export type Cadastro_pacientesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cadastro_pacientes to delete
     */
    where?: Cadastro_pacientesWhereInput
  }

  /**
   * Cadastro_pacientes without action
   */
  export type Cadastro_pacientesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cadastro_pacientes
     */
    select?: Cadastro_pacientesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cadastro_pacientes
     */
    omit?: Cadastro_pacientesOmit<ExtArgs> | null
  }


  /**
   * Model Agendamento
   */

  export type AggregateAgendamento = {
    _count: AgendamentoCountAggregateOutputType | null
    _avg: AgendamentoAvgAggregateOutputType | null
    _sum: AgendamentoSumAggregateOutputType | null
    _min: AgendamentoMinAggregateOutputType | null
    _max: AgendamentoMaxAggregateOutputType | null
  }

  export type AgendamentoAvgAggregateOutputType = {
    Valor_da_Consulta: number | null
    recoveryCode: number | null
  }

  export type AgendamentoSumAggregateOutputType = {
    Valor_da_Consulta: number | null
    recoveryCode: number | null
  }

  export type AgendamentoMinAggregateOutputType = {
    id: string | null
    Nome: string | null
    Telefone: string | null
    Especialista: string | null
    Data_do_Atendimento: string | null
    Horario_da_consulta: string | null
    Horario_de_Termino_da_consulta: string | null
    Valor_da_Consulta: number | null
    Status_da_Consulta: string | null
    Status_do_pagamento: string | null
    observacao: string | null
    recoveryCode: number | null
    Eh_Aluno: boolean | null
  }

  export type AgendamentoMaxAggregateOutputType = {
    id: string | null
    Nome: string | null
    Telefone: string | null
    Especialista: string | null
    Data_do_Atendimento: string | null
    Horario_da_consulta: string | null
    Horario_de_Termino_da_consulta: string | null
    Valor_da_Consulta: number | null
    Status_da_Consulta: string | null
    Status_do_pagamento: string | null
    observacao: string | null
    recoveryCode: number | null
    Eh_Aluno: boolean | null
  }

  export type AgendamentoCountAggregateOutputType = {
    id: number
    Nome: number
    Telefone: number
    Especialista: number
    Data_do_Atendimento: number
    Horario_da_consulta: number
    Horario_de_Termino_da_consulta: number
    Valor_da_Consulta: number
    Status_da_Consulta: number
    Status_do_pagamento: number
    observacao: number
    recoveryCode: number
    Eh_Aluno: number
    _all: number
  }


  export type AgendamentoAvgAggregateInputType = {
    Valor_da_Consulta?: true
    recoveryCode?: true
  }

  export type AgendamentoSumAggregateInputType = {
    Valor_da_Consulta?: true
    recoveryCode?: true
  }

  export type AgendamentoMinAggregateInputType = {
    id?: true
    Nome?: true
    Telefone?: true
    Especialista?: true
    Data_do_Atendimento?: true
    Horario_da_consulta?: true
    Horario_de_Termino_da_consulta?: true
    Valor_da_Consulta?: true
    Status_da_Consulta?: true
    Status_do_pagamento?: true
    observacao?: true
    recoveryCode?: true
    Eh_Aluno?: true
  }

  export type AgendamentoMaxAggregateInputType = {
    id?: true
    Nome?: true
    Telefone?: true
    Especialista?: true
    Data_do_Atendimento?: true
    Horario_da_consulta?: true
    Horario_de_Termino_da_consulta?: true
    Valor_da_Consulta?: true
    Status_da_Consulta?: true
    Status_do_pagamento?: true
    observacao?: true
    recoveryCode?: true
    Eh_Aluno?: true
  }

  export type AgendamentoCountAggregateInputType = {
    id?: true
    Nome?: true
    Telefone?: true
    Especialista?: true
    Data_do_Atendimento?: true
    Horario_da_consulta?: true
    Horario_de_Termino_da_consulta?: true
    Valor_da_Consulta?: true
    Status_da_Consulta?: true
    Status_do_pagamento?: true
    observacao?: true
    recoveryCode?: true
    Eh_Aluno?: true
    _all?: true
  }

  export type AgendamentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agendamento to aggregate.
     */
    where?: AgendamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agendamentos to fetch.
     */
    orderBy?: AgendamentoOrderByWithRelationInput | AgendamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgendamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agendamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agendamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Agendamentos
    **/
    _count?: true | AgendamentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgendamentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgendamentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgendamentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgendamentoMaxAggregateInputType
  }

  export type GetAgendamentoAggregateType<T extends AgendamentoAggregateArgs> = {
        [P in keyof T & keyof AggregateAgendamento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgendamento[P]>
      : GetScalarType<T[P], AggregateAgendamento[P]>
  }




  export type AgendamentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgendamentoWhereInput
    orderBy?: AgendamentoOrderByWithAggregationInput | AgendamentoOrderByWithAggregationInput[]
    by: AgendamentoScalarFieldEnum[] | AgendamentoScalarFieldEnum
    having?: AgendamentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgendamentoCountAggregateInputType | true
    _avg?: AgendamentoAvgAggregateInputType
    _sum?: AgendamentoSumAggregateInputType
    _min?: AgendamentoMinAggregateInputType
    _max?: AgendamentoMaxAggregateInputType
  }

  export type AgendamentoGroupByOutputType = {
    id: string
    Nome: string
    Telefone: string
    Especialista: string
    Data_do_Atendimento: string
    Horario_da_consulta: string
    Horario_de_Termino_da_consulta: string
    Valor_da_Consulta: number | null
    Status_da_Consulta: string
    Status_do_pagamento: string
    observacao: string
    recoveryCode: number | null
    Eh_Aluno: boolean
    _count: AgendamentoCountAggregateOutputType | null
    _avg: AgendamentoAvgAggregateOutputType | null
    _sum: AgendamentoSumAggregateOutputType | null
    _min: AgendamentoMinAggregateOutputType | null
    _max: AgendamentoMaxAggregateOutputType | null
  }

  type GetAgendamentoGroupByPayload<T extends AgendamentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgendamentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgendamentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgendamentoGroupByOutputType[P]>
            : GetScalarType<T[P], AgendamentoGroupByOutputType[P]>
        }
      >
    >


  export type AgendamentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nome?: boolean
    Telefone?: boolean
    Especialista?: boolean
    Data_do_Atendimento?: boolean
    Horario_da_consulta?: boolean
    Horario_de_Termino_da_consulta?: boolean
    Valor_da_Consulta?: boolean
    Status_da_Consulta?: boolean
    Status_do_pagamento?: boolean
    observacao?: boolean
    recoveryCode?: boolean
    Eh_Aluno?: boolean
  }, ExtArgs["result"]["agendamento"]>

  export type AgendamentoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nome?: boolean
    Telefone?: boolean
    Especialista?: boolean
    Data_do_Atendimento?: boolean
    Horario_da_consulta?: boolean
    Horario_de_Termino_da_consulta?: boolean
    Valor_da_Consulta?: boolean
    Status_da_Consulta?: boolean
    Status_do_pagamento?: boolean
    observacao?: boolean
    recoveryCode?: boolean
    Eh_Aluno?: boolean
  }, ExtArgs["result"]["agendamento"]>


  export type AgendamentoSelectScalar = {
    id?: boolean
    Nome?: boolean
    Telefone?: boolean
    Especialista?: boolean
    Data_do_Atendimento?: boolean
    Horario_da_consulta?: boolean
    Horario_de_Termino_da_consulta?: boolean
    Valor_da_Consulta?: boolean
    Status_da_Consulta?: boolean
    Status_do_pagamento?: boolean
    observacao?: boolean
    recoveryCode?: boolean
    Eh_Aluno?: boolean
  }

  export type AgendamentoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "Nome" | "Telefone" | "Especialista" | "Data_do_Atendimento" | "Horario_da_consulta" | "Horario_de_Termino_da_consulta" | "Valor_da_Consulta" | "Status_da_Consulta" | "Status_do_pagamento" | "observacao" | "recoveryCode" | "Eh_Aluno", ExtArgs["result"]["agendamento"]>

  export type $AgendamentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Agendamento"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      Nome: string
      Telefone: string
      Especialista: string
      Data_do_Atendimento: string
      Horario_da_consulta: string
      Horario_de_Termino_da_consulta: string
      Valor_da_Consulta: number | null
      Status_da_Consulta: string
      Status_do_pagamento: string
      observacao: string
      recoveryCode: number | null
      Eh_Aluno: boolean
    }, ExtArgs["result"]["agendamento"]>
    composites: {}
  }

  type AgendamentoGetPayload<S extends boolean | null | undefined | AgendamentoDefaultArgs> = $Result.GetResult<Prisma.$AgendamentoPayload, S>

  type AgendamentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AgendamentoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AgendamentoCountAggregateInputType | true
    }

  export interface AgendamentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Agendamento'], meta: { name: 'Agendamento' } }
    /**
     * Find zero or one Agendamento that matches the filter.
     * @param {AgendamentoFindUniqueArgs} args - Arguments to find a Agendamento
     * @example
     * // Get one Agendamento
     * const agendamento = await prisma.agendamento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgendamentoFindUniqueArgs>(args: SelectSubset<T, AgendamentoFindUniqueArgs<ExtArgs>>): Prisma__AgendamentoClient<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Agendamento that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AgendamentoFindUniqueOrThrowArgs} args - Arguments to find a Agendamento
     * @example
     * // Get one Agendamento
     * const agendamento = await prisma.agendamento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgendamentoFindUniqueOrThrowArgs>(args: SelectSubset<T, AgendamentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgendamentoClient<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Agendamento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoFindFirstArgs} args - Arguments to find a Agendamento
     * @example
     * // Get one Agendamento
     * const agendamento = await prisma.agendamento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgendamentoFindFirstArgs>(args?: SelectSubset<T, AgendamentoFindFirstArgs<ExtArgs>>): Prisma__AgendamentoClient<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Agendamento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoFindFirstOrThrowArgs} args - Arguments to find a Agendamento
     * @example
     * // Get one Agendamento
     * const agendamento = await prisma.agendamento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgendamentoFindFirstOrThrowArgs>(args?: SelectSubset<T, AgendamentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgendamentoClient<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Agendamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agendamentos
     * const agendamentos = await prisma.agendamento.findMany()
     * 
     * // Get first 10 Agendamentos
     * const agendamentos = await prisma.agendamento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agendamentoWithIdOnly = await prisma.agendamento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgendamentoFindManyArgs>(args?: SelectSubset<T, AgendamentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Agendamento.
     * @param {AgendamentoCreateArgs} args - Arguments to create a Agendamento.
     * @example
     * // Create one Agendamento
     * const Agendamento = await prisma.agendamento.create({
     *   data: {
     *     // ... data to create a Agendamento
     *   }
     * })
     * 
     */
    create<T extends AgendamentoCreateArgs>(args: SelectSubset<T, AgendamentoCreateArgs<ExtArgs>>): Prisma__AgendamentoClient<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Agendamentos.
     * @param {AgendamentoCreateManyArgs} args - Arguments to create many Agendamentos.
     * @example
     * // Create many Agendamentos
     * const agendamento = await prisma.agendamento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgendamentoCreateManyArgs>(args?: SelectSubset<T, AgendamentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Agendamentos and returns the data saved in the database.
     * @param {AgendamentoCreateManyAndReturnArgs} args - Arguments to create many Agendamentos.
     * @example
     * // Create many Agendamentos
     * const agendamento = await prisma.agendamento.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Agendamentos and only return the `id`
     * const agendamentoWithIdOnly = await prisma.agendamento.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgendamentoCreateManyAndReturnArgs>(args?: SelectSubset<T, AgendamentoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Agendamento.
     * @param {AgendamentoDeleteArgs} args - Arguments to delete one Agendamento.
     * @example
     * // Delete one Agendamento
     * const Agendamento = await prisma.agendamento.delete({
     *   where: {
     *     // ... filter to delete one Agendamento
     *   }
     * })
     * 
     */
    delete<T extends AgendamentoDeleteArgs>(args: SelectSubset<T, AgendamentoDeleteArgs<ExtArgs>>): Prisma__AgendamentoClient<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Agendamento.
     * @param {AgendamentoUpdateArgs} args - Arguments to update one Agendamento.
     * @example
     * // Update one Agendamento
     * const agendamento = await prisma.agendamento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgendamentoUpdateArgs>(args: SelectSubset<T, AgendamentoUpdateArgs<ExtArgs>>): Prisma__AgendamentoClient<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Agendamentos.
     * @param {AgendamentoDeleteManyArgs} args - Arguments to filter Agendamentos to delete.
     * @example
     * // Delete a few Agendamentos
     * const { count } = await prisma.agendamento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgendamentoDeleteManyArgs>(args?: SelectSubset<T, AgendamentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agendamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agendamentos
     * const agendamento = await prisma.agendamento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgendamentoUpdateManyArgs>(args: SelectSubset<T, AgendamentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Agendamento.
     * @param {AgendamentoUpsertArgs} args - Arguments to update or create a Agendamento.
     * @example
     * // Update or create a Agendamento
     * const agendamento = await prisma.agendamento.upsert({
     *   create: {
     *     // ... data to create a Agendamento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agendamento we want to update
     *   }
     * })
     */
    upsert<T extends AgendamentoUpsertArgs>(args: SelectSubset<T, AgendamentoUpsertArgs<ExtArgs>>): Prisma__AgendamentoClient<$Result.GetResult<Prisma.$AgendamentoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Agendamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoCountArgs} args - Arguments to filter Agendamentos to count.
     * @example
     * // Count the number of Agendamentos
     * const count = await prisma.agendamento.count({
     *   where: {
     *     // ... the filter for the Agendamentos we want to count
     *   }
     * })
    **/
    count<T extends AgendamentoCountArgs>(
      args?: Subset<T, AgendamentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgendamentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agendamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgendamentoAggregateArgs>(args: Subset<T, AgendamentoAggregateArgs>): Prisma.PrismaPromise<GetAgendamentoAggregateType<T>>

    /**
     * Group by Agendamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgendamentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgendamentoGroupByArgs['orderBy'] }
        : { orderBy?: AgendamentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgendamentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgendamentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Agendamento model
   */
  readonly fields: AgendamentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Agendamento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgendamentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Agendamento model
   */
  interface AgendamentoFieldRefs {
    readonly id: FieldRef<"Agendamento", 'String'>
    readonly Nome: FieldRef<"Agendamento", 'String'>
    readonly Telefone: FieldRef<"Agendamento", 'String'>
    readonly Especialista: FieldRef<"Agendamento", 'String'>
    readonly Data_do_Atendimento: FieldRef<"Agendamento", 'String'>
    readonly Horario_da_consulta: FieldRef<"Agendamento", 'String'>
    readonly Horario_de_Termino_da_consulta: FieldRef<"Agendamento", 'String'>
    readonly Valor_da_Consulta: FieldRef<"Agendamento", 'Float'>
    readonly Status_da_Consulta: FieldRef<"Agendamento", 'String'>
    readonly Status_do_pagamento: FieldRef<"Agendamento", 'String'>
    readonly observacao: FieldRef<"Agendamento", 'String'>
    readonly recoveryCode: FieldRef<"Agendamento", 'Int'>
    readonly Eh_Aluno: FieldRef<"Agendamento", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Agendamento findUnique
   */
  export type AgendamentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agendamento
     */
    omit?: AgendamentoOmit<ExtArgs> | null
    /**
     * Filter, which Agendamento to fetch.
     */
    where: AgendamentoWhereUniqueInput
  }

  /**
   * Agendamento findUniqueOrThrow
   */
  export type AgendamentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agendamento
     */
    omit?: AgendamentoOmit<ExtArgs> | null
    /**
     * Filter, which Agendamento to fetch.
     */
    where: AgendamentoWhereUniqueInput
  }

  /**
   * Agendamento findFirst
   */
  export type AgendamentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agendamento
     */
    omit?: AgendamentoOmit<ExtArgs> | null
    /**
     * Filter, which Agendamento to fetch.
     */
    where?: AgendamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agendamentos to fetch.
     */
    orderBy?: AgendamentoOrderByWithRelationInput | AgendamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agendamentos.
     */
    cursor?: AgendamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agendamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agendamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agendamentos.
     */
    distinct?: AgendamentoScalarFieldEnum | AgendamentoScalarFieldEnum[]
  }

  /**
   * Agendamento findFirstOrThrow
   */
  export type AgendamentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agendamento
     */
    omit?: AgendamentoOmit<ExtArgs> | null
    /**
     * Filter, which Agendamento to fetch.
     */
    where?: AgendamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agendamentos to fetch.
     */
    orderBy?: AgendamentoOrderByWithRelationInput | AgendamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agendamentos.
     */
    cursor?: AgendamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agendamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agendamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agendamentos.
     */
    distinct?: AgendamentoScalarFieldEnum | AgendamentoScalarFieldEnum[]
  }

  /**
   * Agendamento findMany
   */
  export type AgendamentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agendamento
     */
    omit?: AgendamentoOmit<ExtArgs> | null
    /**
     * Filter, which Agendamentos to fetch.
     */
    where?: AgendamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agendamentos to fetch.
     */
    orderBy?: AgendamentoOrderByWithRelationInput | AgendamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Agendamentos.
     */
    cursor?: AgendamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agendamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agendamentos.
     */
    skip?: number
    distinct?: AgendamentoScalarFieldEnum | AgendamentoScalarFieldEnum[]
  }

  /**
   * Agendamento create
   */
  export type AgendamentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agendamento
     */
    omit?: AgendamentoOmit<ExtArgs> | null
    /**
     * The data needed to create a Agendamento.
     */
    data: XOR<AgendamentoCreateInput, AgendamentoUncheckedCreateInput>
  }

  /**
   * Agendamento createMany
   */
  export type AgendamentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Agendamentos.
     */
    data: AgendamentoCreateManyInput | AgendamentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Agendamento createManyAndReturn
   */
  export type AgendamentoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Agendamento
     */
    omit?: AgendamentoOmit<ExtArgs> | null
    /**
     * The data used to create many Agendamentos.
     */
    data: AgendamentoCreateManyInput | AgendamentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Agendamento update
   */
  export type AgendamentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agendamento
     */
    omit?: AgendamentoOmit<ExtArgs> | null
    /**
     * The data needed to update a Agendamento.
     */
    data: XOR<AgendamentoUpdateInput, AgendamentoUncheckedUpdateInput>
    /**
     * Choose, which Agendamento to update.
     */
    where: AgendamentoWhereUniqueInput
  }

  /**
   * Agendamento updateMany
   */
  export type AgendamentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Agendamentos.
     */
    data: XOR<AgendamentoUpdateManyMutationInput, AgendamentoUncheckedUpdateManyInput>
    /**
     * Filter which Agendamentos to update
     */
    where?: AgendamentoWhereInput
  }

  /**
   * Agendamento upsert
   */
  export type AgendamentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agendamento
     */
    omit?: AgendamentoOmit<ExtArgs> | null
    /**
     * The filter to search for the Agendamento to update in case it exists.
     */
    where: AgendamentoWhereUniqueInput
    /**
     * In case the Agendamento found by the `where` argument doesn't exist, create a new Agendamento with this data.
     */
    create: XOR<AgendamentoCreateInput, AgendamentoUncheckedCreateInput>
    /**
     * In case the Agendamento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgendamentoUpdateInput, AgendamentoUncheckedUpdateInput>
  }

  /**
   * Agendamento delete
   */
  export type AgendamentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agendamento
     */
    omit?: AgendamentoOmit<ExtArgs> | null
    /**
     * Filter which Agendamento to delete.
     */
    where: AgendamentoWhereUniqueInput
  }

  /**
   * Agendamento deleteMany
   */
  export type AgendamentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agendamentos to delete
     */
    where?: AgendamentoWhereInput
  }

  /**
   * Agendamento without action
   */
  export type AgendamentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agendamento
     */
    select?: AgendamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agendamento
     */
    omit?: AgendamentoOmit<ExtArgs> | null
  }


  /**
   * Model cadastro_convenio
   */

  export type AggregateCadastro_convenio = {
    _count: Cadastro_convenioCountAggregateOutputType | null
    _min: Cadastro_convenioMinAggregateOutputType | null
    _max: Cadastro_convenioMaxAggregateOutputType | null
  }

  export type Cadastro_convenioMinAggregateOutputType = {
    id: string | null
    Nome_do_Convenio: string | null
    CNPJ: string | null
    Valores: string | null
    Data_de_Contratacao: string | null
  }

  export type Cadastro_convenioMaxAggregateOutputType = {
    id: string | null
    Nome_do_Convenio: string | null
    CNPJ: string | null
    Valores: string | null
    Data_de_Contratacao: string | null
  }

  export type Cadastro_convenioCountAggregateOutputType = {
    id: number
    Nome_do_Convenio: number
    CNPJ: number
    Valores: number
    Data_de_Contratacao: number
    _all: number
  }


  export type Cadastro_convenioMinAggregateInputType = {
    id?: true
    Nome_do_Convenio?: true
    CNPJ?: true
    Valores?: true
    Data_de_Contratacao?: true
  }

  export type Cadastro_convenioMaxAggregateInputType = {
    id?: true
    Nome_do_Convenio?: true
    CNPJ?: true
    Valores?: true
    Data_de_Contratacao?: true
  }

  export type Cadastro_convenioCountAggregateInputType = {
    id?: true
    Nome_do_Convenio?: true
    CNPJ?: true
    Valores?: true
    Data_de_Contratacao?: true
    _all?: true
  }

  export type Cadastro_convenioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro_convenio to aggregate.
     */
    where?: cadastro_convenioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_convenios to fetch.
     */
    orderBy?: cadastro_convenioOrderByWithRelationInput | cadastro_convenioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cadastro_convenioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_convenios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_convenios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cadastro_convenios
    **/
    _count?: true | Cadastro_convenioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cadastro_convenioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cadastro_convenioMaxAggregateInputType
  }

  export type GetCadastro_convenioAggregateType<T extends Cadastro_convenioAggregateArgs> = {
        [P in keyof T & keyof AggregateCadastro_convenio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCadastro_convenio[P]>
      : GetScalarType<T[P], AggregateCadastro_convenio[P]>
  }




  export type cadastro_convenioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cadastro_convenioWhereInput
    orderBy?: cadastro_convenioOrderByWithAggregationInput | cadastro_convenioOrderByWithAggregationInput[]
    by: Cadastro_convenioScalarFieldEnum[] | Cadastro_convenioScalarFieldEnum
    having?: cadastro_convenioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cadastro_convenioCountAggregateInputType | true
    _min?: Cadastro_convenioMinAggregateInputType
    _max?: Cadastro_convenioMaxAggregateInputType
  }

  export type Cadastro_convenioGroupByOutputType = {
    id: string
    Nome_do_Convenio: string
    CNPJ: string
    Valores: string
    Data_de_Contratacao: string
    _count: Cadastro_convenioCountAggregateOutputType | null
    _min: Cadastro_convenioMinAggregateOutputType | null
    _max: Cadastro_convenioMaxAggregateOutputType | null
  }

  type GetCadastro_convenioGroupByPayload<T extends cadastro_convenioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cadastro_convenioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cadastro_convenioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cadastro_convenioGroupByOutputType[P]>
            : GetScalarType<T[P], Cadastro_convenioGroupByOutputType[P]>
        }
      >
    >


  export type cadastro_convenioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nome_do_Convenio?: boolean
    CNPJ?: boolean
    Valores?: boolean
    Data_de_Contratacao?: boolean
  }, ExtArgs["result"]["cadastro_convenio"]>

  export type cadastro_convenioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nome_do_Convenio?: boolean
    CNPJ?: boolean
    Valores?: boolean
    Data_de_Contratacao?: boolean
  }, ExtArgs["result"]["cadastro_convenio"]>


  export type cadastro_convenioSelectScalar = {
    id?: boolean
    Nome_do_Convenio?: boolean
    CNPJ?: boolean
    Valores?: boolean
    Data_de_Contratacao?: boolean
  }

  export type cadastro_convenioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "Nome_do_Convenio" | "CNPJ" | "Valores" | "Data_de_Contratacao", ExtArgs["result"]["cadastro_convenio"]>

  export type $cadastro_convenioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cadastro_convenio"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      Nome_do_Convenio: string
      CNPJ: string
      Valores: string
      Data_de_Contratacao: string
    }, ExtArgs["result"]["cadastro_convenio"]>
    composites: {}
  }

  type cadastro_convenioGetPayload<S extends boolean | null | undefined | cadastro_convenioDefaultArgs> = $Result.GetResult<Prisma.$cadastro_convenioPayload, S>

  type cadastro_convenioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<cadastro_convenioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Cadastro_convenioCountAggregateInputType | true
    }

  export interface cadastro_convenioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cadastro_convenio'], meta: { name: 'cadastro_convenio' } }
    /**
     * Find zero or one Cadastro_convenio that matches the filter.
     * @param {cadastro_convenioFindUniqueArgs} args - Arguments to find a Cadastro_convenio
     * @example
     * // Get one Cadastro_convenio
     * const cadastro_convenio = await prisma.cadastro_convenio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends cadastro_convenioFindUniqueArgs>(args: SelectSubset<T, cadastro_convenioFindUniqueArgs<ExtArgs>>): Prisma__cadastro_convenioClient<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cadastro_convenio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {cadastro_convenioFindUniqueOrThrowArgs} args - Arguments to find a Cadastro_convenio
     * @example
     * // Get one Cadastro_convenio
     * const cadastro_convenio = await prisma.cadastro_convenio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends cadastro_convenioFindUniqueOrThrowArgs>(args: SelectSubset<T, cadastro_convenioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__cadastro_convenioClient<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cadastro_convenio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_convenioFindFirstArgs} args - Arguments to find a Cadastro_convenio
     * @example
     * // Get one Cadastro_convenio
     * const cadastro_convenio = await prisma.cadastro_convenio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends cadastro_convenioFindFirstArgs>(args?: SelectSubset<T, cadastro_convenioFindFirstArgs<ExtArgs>>): Prisma__cadastro_convenioClient<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cadastro_convenio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_convenioFindFirstOrThrowArgs} args - Arguments to find a Cadastro_convenio
     * @example
     * // Get one Cadastro_convenio
     * const cadastro_convenio = await prisma.cadastro_convenio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends cadastro_convenioFindFirstOrThrowArgs>(args?: SelectSubset<T, cadastro_convenioFindFirstOrThrowArgs<ExtArgs>>): Prisma__cadastro_convenioClient<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cadastro_convenios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_convenioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cadastro_convenios
     * const cadastro_convenios = await prisma.cadastro_convenio.findMany()
     * 
     * // Get first 10 Cadastro_convenios
     * const cadastro_convenios = await prisma.cadastro_convenio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cadastro_convenioWithIdOnly = await prisma.cadastro_convenio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends cadastro_convenioFindManyArgs>(args?: SelectSubset<T, cadastro_convenioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cadastro_convenio.
     * @param {cadastro_convenioCreateArgs} args - Arguments to create a Cadastro_convenio.
     * @example
     * // Create one Cadastro_convenio
     * const Cadastro_convenio = await prisma.cadastro_convenio.create({
     *   data: {
     *     // ... data to create a Cadastro_convenio
     *   }
     * })
     * 
     */
    create<T extends cadastro_convenioCreateArgs>(args: SelectSubset<T, cadastro_convenioCreateArgs<ExtArgs>>): Prisma__cadastro_convenioClient<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cadastro_convenios.
     * @param {cadastro_convenioCreateManyArgs} args - Arguments to create many Cadastro_convenios.
     * @example
     * // Create many Cadastro_convenios
     * const cadastro_convenio = await prisma.cadastro_convenio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends cadastro_convenioCreateManyArgs>(args?: SelectSubset<T, cadastro_convenioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cadastro_convenios and returns the data saved in the database.
     * @param {cadastro_convenioCreateManyAndReturnArgs} args - Arguments to create many Cadastro_convenios.
     * @example
     * // Create many Cadastro_convenios
     * const cadastro_convenio = await prisma.cadastro_convenio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cadastro_convenios and only return the `id`
     * const cadastro_convenioWithIdOnly = await prisma.cadastro_convenio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends cadastro_convenioCreateManyAndReturnArgs>(args?: SelectSubset<T, cadastro_convenioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Cadastro_convenio.
     * @param {cadastro_convenioDeleteArgs} args - Arguments to delete one Cadastro_convenio.
     * @example
     * // Delete one Cadastro_convenio
     * const Cadastro_convenio = await prisma.cadastro_convenio.delete({
     *   where: {
     *     // ... filter to delete one Cadastro_convenio
     *   }
     * })
     * 
     */
    delete<T extends cadastro_convenioDeleteArgs>(args: SelectSubset<T, cadastro_convenioDeleteArgs<ExtArgs>>): Prisma__cadastro_convenioClient<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cadastro_convenio.
     * @param {cadastro_convenioUpdateArgs} args - Arguments to update one Cadastro_convenio.
     * @example
     * // Update one Cadastro_convenio
     * const cadastro_convenio = await prisma.cadastro_convenio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends cadastro_convenioUpdateArgs>(args: SelectSubset<T, cadastro_convenioUpdateArgs<ExtArgs>>): Prisma__cadastro_convenioClient<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cadastro_convenios.
     * @param {cadastro_convenioDeleteManyArgs} args - Arguments to filter Cadastro_convenios to delete.
     * @example
     * // Delete a few Cadastro_convenios
     * const { count } = await prisma.cadastro_convenio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends cadastro_convenioDeleteManyArgs>(args?: SelectSubset<T, cadastro_convenioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cadastro_convenios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_convenioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cadastro_convenios
     * const cadastro_convenio = await prisma.cadastro_convenio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends cadastro_convenioUpdateManyArgs>(args: SelectSubset<T, cadastro_convenioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cadastro_convenio.
     * @param {cadastro_convenioUpsertArgs} args - Arguments to update or create a Cadastro_convenio.
     * @example
     * // Update or create a Cadastro_convenio
     * const cadastro_convenio = await prisma.cadastro_convenio.upsert({
     *   create: {
     *     // ... data to create a Cadastro_convenio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cadastro_convenio we want to update
     *   }
     * })
     */
    upsert<T extends cadastro_convenioUpsertArgs>(args: SelectSubset<T, cadastro_convenioUpsertArgs<ExtArgs>>): Prisma__cadastro_convenioClient<$Result.GetResult<Prisma.$cadastro_convenioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cadastro_convenios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_convenioCountArgs} args - Arguments to filter Cadastro_convenios to count.
     * @example
     * // Count the number of Cadastro_convenios
     * const count = await prisma.cadastro_convenio.count({
     *   where: {
     *     // ... the filter for the Cadastro_convenios we want to count
     *   }
     * })
    **/
    count<T extends cadastro_convenioCountArgs>(
      args?: Subset<T, cadastro_convenioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cadastro_convenioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cadastro_convenio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_convenioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cadastro_convenioAggregateArgs>(args: Subset<T, Cadastro_convenioAggregateArgs>): Prisma.PrismaPromise<GetCadastro_convenioAggregateType<T>>

    /**
     * Group by Cadastro_convenio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_convenioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cadastro_convenioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cadastro_convenioGroupByArgs['orderBy'] }
        : { orderBy?: cadastro_convenioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cadastro_convenioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCadastro_convenioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cadastro_convenio model
   */
  readonly fields: cadastro_convenioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cadastro_convenio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cadastro_convenioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the cadastro_convenio model
   */
  interface cadastro_convenioFieldRefs {
    readonly id: FieldRef<"cadastro_convenio", 'String'>
    readonly Nome_do_Convenio: FieldRef<"cadastro_convenio", 'String'>
    readonly CNPJ: FieldRef<"cadastro_convenio", 'String'>
    readonly Valores: FieldRef<"cadastro_convenio", 'String'>
    readonly Data_de_Contratacao: FieldRef<"cadastro_convenio", 'String'>
  }
    

  // Custom InputTypes
  /**
   * cadastro_convenio findUnique
   */
  export type cadastro_convenioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_convenio
     */
    omit?: cadastro_convenioOmit<ExtArgs> | null
    /**
     * Filter, which cadastro_convenio to fetch.
     */
    where: cadastro_convenioWhereUniqueInput
  }

  /**
   * cadastro_convenio findUniqueOrThrow
   */
  export type cadastro_convenioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_convenio
     */
    omit?: cadastro_convenioOmit<ExtArgs> | null
    /**
     * Filter, which cadastro_convenio to fetch.
     */
    where: cadastro_convenioWhereUniqueInput
  }

  /**
   * cadastro_convenio findFirst
   */
  export type cadastro_convenioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_convenio
     */
    omit?: cadastro_convenioOmit<ExtArgs> | null
    /**
     * Filter, which cadastro_convenio to fetch.
     */
    where?: cadastro_convenioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_convenios to fetch.
     */
    orderBy?: cadastro_convenioOrderByWithRelationInput | cadastro_convenioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastro_convenios.
     */
    cursor?: cadastro_convenioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_convenios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_convenios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastro_convenios.
     */
    distinct?: Cadastro_convenioScalarFieldEnum | Cadastro_convenioScalarFieldEnum[]
  }

  /**
   * cadastro_convenio findFirstOrThrow
   */
  export type cadastro_convenioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_convenio
     */
    omit?: cadastro_convenioOmit<ExtArgs> | null
    /**
     * Filter, which cadastro_convenio to fetch.
     */
    where?: cadastro_convenioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_convenios to fetch.
     */
    orderBy?: cadastro_convenioOrderByWithRelationInput | cadastro_convenioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastro_convenios.
     */
    cursor?: cadastro_convenioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_convenios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_convenios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastro_convenios.
     */
    distinct?: Cadastro_convenioScalarFieldEnum | Cadastro_convenioScalarFieldEnum[]
  }

  /**
   * cadastro_convenio findMany
   */
  export type cadastro_convenioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_convenio
     */
    omit?: cadastro_convenioOmit<ExtArgs> | null
    /**
     * Filter, which cadastro_convenios to fetch.
     */
    where?: cadastro_convenioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_convenios to fetch.
     */
    orderBy?: cadastro_convenioOrderByWithRelationInput | cadastro_convenioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cadastro_convenios.
     */
    cursor?: cadastro_convenioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_convenios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_convenios.
     */
    skip?: number
    distinct?: Cadastro_convenioScalarFieldEnum | Cadastro_convenioScalarFieldEnum[]
  }

  /**
   * cadastro_convenio create
   */
  export type cadastro_convenioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_convenio
     */
    omit?: cadastro_convenioOmit<ExtArgs> | null
    /**
     * The data needed to create a cadastro_convenio.
     */
    data: XOR<cadastro_convenioCreateInput, cadastro_convenioUncheckedCreateInput>
  }

  /**
   * cadastro_convenio createMany
   */
  export type cadastro_convenioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cadastro_convenios.
     */
    data: cadastro_convenioCreateManyInput | cadastro_convenioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cadastro_convenio createManyAndReturn
   */
  export type cadastro_convenioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_convenio
     */
    omit?: cadastro_convenioOmit<ExtArgs> | null
    /**
     * The data used to create many cadastro_convenios.
     */
    data: cadastro_convenioCreateManyInput | cadastro_convenioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cadastro_convenio update
   */
  export type cadastro_convenioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_convenio
     */
    omit?: cadastro_convenioOmit<ExtArgs> | null
    /**
     * The data needed to update a cadastro_convenio.
     */
    data: XOR<cadastro_convenioUpdateInput, cadastro_convenioUncheckedUpdateInput>
    /**
     * Choose, which cadastro_convenio to update.
     */
    where: cadastro_convenioWhereUniqueInput
  }

  /**
   * cadastro_convenio updateMany
   */
  export type cadastro_convenioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cadastro_convenios.
     */
    data: XOR<cadastro_convenioUpdateManyMutationInput, cadastro_convenioUncheckedUpdateManyInput>
    /**
     * Filter which cadastro_convenios to update
     */
    where?: cadastro_convenioWhereInput
  }

  /**
   * cadastro_convenio upsert
   */
  export type cadastro_convenioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_convenio
     */
    omit?: cadastro_convenioOmit<ExtArgs> | null
    /**
     * The filter to search for the cadastro_convenio to update in case it exists.
     */
    where: cadastro_convenioWhereUniqueInput
    /**
     * In case the cadastro_convenio found by the `where` argument doesn't exist, create a new cadastro_convenio with this data.
     */
    create: XOR<cadastro_convenioCreateInput, cadastro_convenioUncheckedCreateInput>
    /**
     * In case the cadastro_convenio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cadastro_convenioUpdateInput, cadastro_convenioUncheckedUpdateInput>
  }

  /**
   * cadastro_convenio delete
   */
  export type cadastro_convenioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_convenio
     */
    omit?: cadastro_convenioOmit<ExtArgs> | null
    /**
     * Filter which cadastro_convenio to delete.
     */
    where: cadastro_convenioWhereUniqueInput
  }

  /**
   * cadastro_convenio deleteMany
   */
  export type cadastro_convenioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro_convenios to delete
     */
    where?: cadastro_convenioWhereInput
  }

  /**
   * cadastro_convenio without action
   */
  export type cadastro_convenioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_convenio
     */
    select?: cadastro_convenioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_convenio
     */
    omit?: cadastro_convenioOmit<ExtArgs> | null
  }


  /**
   * Model cadastro_user
   */

  export type AggregateCadastro_user = {
    _count: Cadastro_userCountAggregateOutputType | null
    _avg: Cadastro_userAvgAggregateOutputType | null
    _sum: Cadastro_userSumAggregateOutputType | null
    _min: Cadastro_userMinAggregateOutputType | null
    _max: Cadastro_userMaxAggregateOutputType | null
  }

  export type Cadastro_userAvgAggregateOutputType = {
    recoveryCode: number | null
  }

  export type Cadastro_userSumAggregateOutputType = {
    recoveryCode: number | null
  }

  export type Cadastro_userMinAggregateOutputType = {
    id: string | null
    Nome: string | null
    Email: string | null
    Usuario: string | null
    Senha: string | null
    recoveryCode: number | null
    Profissional: boolean | null
    Secretaria: boolean | null
    foto: string | null
  }

  export type Cadastro_userMaxAggregateOutputType = {
    id: string | null
    Nome: string | null
    Email: string | null
    Usuario: string | null
    Senha: string | null
    recoveryCode: number | null
    Profissional: boolean | null
    Secretaria: boolean | null
    foto: string | null
  }

  export type Cadastro_userCountAggregateOutputType = {
    id: number
    Nome: number
    Email: number
    Usuario: number
    Senha: number
    recoveryCode: number
    Profissional: number
    Secretaria: number
    foto: number
    _all: number
  }


  export type Cadastro_userAvgAggregateInputType = {
    recoveryCode?: true
  }

  export type Cadastro_userSumAggregateInputType = {
    recoveryCode?: true
  }

  export type Cadastro_userMinAggregateInputType = {
    id?: true
    Nome?: true
    Email?: true
    Usuario?: true
    Senha?: true
    recoveryCode?: true
    Profissional?: true
    Secretaria?: true
    foto?: true
  }

  export type Cadastro_userMaxAggregateInputType = {
    id?: true
    Nome?: true
    Email?: true
    Usuario?: true
    Senha?: true
    recoveryCode?: true
    Profissional?: true
    Secretaria?: true
    foto?: true
  }

  export type Cadastro_userCountAggregateInputType = {
    id?: true
    Nome?: true
    Email?: true
    Usuario?: true
    Senha?: true
    recoveryCode?: true
    Profissional?: true
    Secretaria?: true
    foto?: true
    _all?: true
  }

  export type Cadastro_userAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro_user to aggregate.
     */
    where?: cadastro_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_users to fetch.
     */
    orderBy?: cadastro_userOrderByWithRelationInput | cadastro_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cadastro_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cadastro_users
    **/
    _count?: true | Cadastro_userCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Cadastro_userAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Cadastro_userSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cadastro_userMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cadastro_userMaxAggregateInputType
  }

  export type GetCadastro_userAggregateType<T extends Cadastro_userAggregateArgs> = {
        [P in keyof T & keyof AggregateCadastro_user]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCadastro_user[P]>
      : GetScalarType<T[P], AggregateCadastro_user[P]>
  }




  export type cadastro_userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cadastro_userWhereInput
    orderBy?: cadastro_userOrderByWithAggregationInput | cadastro_userOrderByWithAggregationInput[]
    by: Cadastro_userScalarFieldEnum[] | Cadastro_userScalarFieldEnum
    having?: cadastro_userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cadastro_userCountAggregateInputType | true
    _avg?: Cadastro_userAvgAggregateInputType
    _sum?: Cadastro_userSumAggregateInputType
    _min?: Cadastro_userMinAggregateInputType
    _max?: Cadastro_userMaxAggregateInputType
  }

  export type Cadastro_userGroupByOutputType = {
    id: string
    Nome: string
    Email: string
    Usuario: string
    Senha: string
    recoveryCode: number | null
    Profissional: boolean
    Secretaria: boolean
    foto: string | null
    _count: Cadastro_userCountAggregateOutputType | null
    _avg: Cadastro_userAvgAggregateOutputType | null
    _sum: Cadastro_userSumAggregateOutputType | null
    _min: Cadastro_userMinAggregateOutputType | null
    _max: Cadastro_userMaxAggregateOutputType | null
  }

  type GetCadastro_userGroupByPayload<T extends cadastro_userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cadastro_userGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cadastro_userGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cadastro_userGroupByOutputType[P]>
            : GetScalarType<T[P], Cadastro_userGroupByOutputType[P]>
        }
      >
    >


  export type cadastro_userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nome?: boolean
    Email?: boolean
    Usuario?: boolean
    Senha?: boolean
    recoveryCode?: boolean
    Profissional?: boolean
    Secretaria?: boolean
    foto?: boolean
  }, ExtArgs["result"]["cadastro_user"]>

  export type cadastro_userSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nome?: boolean
    Email?: boolean
    Usuario?: boolean
    Senha?: boolean
    recoveryCode?: boolean
    Profissional?: boolean
    Secretaria?: boolean
    foto?: boolean
  }, ExtArgs["result"]["cadastro_user"]>


  export type cadastro_userSelectScalar = {
    id?: boolean
    Nome?: boolean
    Email?: boolean
    Usuario?: boolean
    Senha?: boolean
    recoveryCode?: boolean
    Profissional?: boolean
    Secretaria?: boolean
    foto?: boolean
  }

  export type cadastro_userOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "Nome" | "Email" | "Usuario" | "Senha" | "recoveryCode" | "Profissional" | "Secretaria" | "foto", ExtArgs["result"]["cadastro_user"]>

  export type $cadastro_userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cadastro_user"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      Nome: string
      Email: string
      Usuario: string
      Senha: string
      recoveryCode: number | null
      Profissional: boolean
      Secretaria: boolean
      foto: string | null
    }, ExtArgs["result"]["cadastro_user"]>
    composites: {}
  }

  type cadastro_userGetPayload<S extends boolean | null | undefined | cadastro_userDefaultArgs> = $Result.GetResult<Prisma.$cadastro_userPayload, S>

  type cadastro_userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<cadastro_userFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Cadastro_userCountAggregateInputType | true
    }

  export interface cadastro_userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cadastro_user'], meta: { name: 'cadastro_user' } }
    /**
     * Find zero or one Cadastro_user that matches the filter.
     * @param {cadastro_userFindUniqueArgs} args - Arguments to find a Cadastro_user
     * @example
     * // Get one Cadastro_user
     * const cadastro_user = await prisma.cadastro_user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends cadastro_userFindUniqueArgs>(args: SelectSubset<T, cadastro_userFindUniqueArgs<ExtArgs>>): Prisma__cadastro_userClient<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cadastro_user that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {cadastro_userFindUniqueOrThrowArgs} args - Arguments to find a Cadastro_user
     * @example
     * // Get one Cadastro_user
     * const cadastro_user = await prisma.cadastro_user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends cadastro_userFindUniqueOrThrowArgs>(args: SelectSubset<T, cadastro_userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__cadastro_userClient<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cadastro_user that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_userFindFirstArgs} args - Arguments to find a Cadastro_user
     * @example
     * // Get one Cadastro_user
     * const cadastro_user = await prisma.cadastro_user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends cadastro_userFindFirstArgs>(args?: SelectSubset<T, cadastro_userFindFirstArgs<ExtArgs>>): Prisma__cadastro_userClient<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cadastro_user that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_userFindFirstOrThrowArgs} args - Arguments to find a Cadastro_user
     * @example
     * // Get one Cadastro_user
     * const cadastro_user = await prisma.cadastro_user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends cadastro_userFindFirstOrThrowArgs>(args?: SelectSubset<T, cadastro_userFindFirstOrThrowArgs<ExtArgs>>): Prisma__cadastro_userClient<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cadastro_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cadastro_users
     * const cadastro_users = await prisma.cadastro_user.findMany()
     * 
     * // Get first 10 Cadastro_users
     * const cadastro_users = await prisma.cadastro_user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cadastro_userWithIdOnly = await prisma.cadastro_user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends cadastro_userFindManyArgs>(args?: SelectSubset<T, cadastro_userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cadastro_user.
     * @param {cadastro_userCreateArgs} args - Arguments to create a Cadastro_user.
     * @example
     * // Create one Cadastro_user
     * const Cadastro_user = await prisma.cadastro_user.create({
     *   data: {
     *     // ... data to create a Cadastro_user
     *   }
     * })
     * 
     */
    create<T extends cadastro_userCreateArgs>(args: SelectSubset<T, cadastro_userCreateArgs<ExtArgs>>): Prisma__cadastro_userClient<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cadastro_users.
     * @param {cadastro_userCreateManyArgs} args - Arguments to create many Cadastro_users.
     * @example
     * // Create many Cadastro_users
     * const cadastro_user = await prisma.cadastro_user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends cadastro_userCreateManyArgs>(args?: SelectSubset<T, cadastro_userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cadastro_users and returns the data saved in the database.
     * @param {cadastro_userCreateManyAndReturnArgs} args - Arguments to create many Cadastro_users.
     * @example
     * // Create many Cadastro_users
     * const cadastro_user = await prisma.cadastro_user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cadastro_users and only return the `id`
     * const cadastro_userWithIdOnly = await prisma.cadastro_user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends cadastro_userCreateManyAndReturnArgs>(args?: SelectSubset<T, cadastro_userCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Cadastro_user.
     * @param {cadastro_userDeleteArgs} args - Arguments to delete one Cadastro_user.
     * @example
     * // Delete one Cadastro_user
     * const Cadastro_user = await prisma.cadastro_user.delete({
     *   where: {
     *     // ... filter to delete one Cadastro_user
     *   }
     * })
     * 
     */
    delete<T extends cadastro_userDeleteArgs>(args: SelectSubset<T, cadastro_userDeleteArgs<ExtArgs>>): Prisma__cadastro_userClient<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cadastro_user.
     * @param {cadastro_userUpdateArgs} args - Arguments to update one Cadastro_user.
     * @example
     * // Update one Cadastro_user
     * const cadastro_user = await prisma.cadastro_user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends cadastro_userUpdateArgs>(args: SelectSubset<T, cadastro_userUpdateArgs<ExtArgs>>): Prisma__cadastro_userClient<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cadastro_users.
     * @param {cadastro_userDeleteManyArgs} args - Arguments to filter Cadastro_users to delete.
     * @example
     * // Delete a few Cadastro_users
     * const { count } = await prisma.cadastro_user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends cadastro_userDeleteManyArgs>(args?: SelectSubset<T, cadastro_userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cadastro_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cadastro_users
     * const cadastro_user = await prisma.cadastro_user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends cadastro_userUpdateManyArgs>(args: SelectSubset<T, cadastro_userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cadastro_user.
     * @param {cadastro_userUpsertArgs} args - Arguments to update or create a Cadastro_user.
     * @example
     * // Update or create a Cadastro_user
     * const cadastro_user = await prisma.cadastro_user.upsert({
     *   create: {
     *     // ... data to create a Cadastro_user
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cadastro_user we want to update
     *   }
     * })
     */
    upsert<T extends cadastro_userUpsertArgs>(args: SelectSubset<T, cadastro_userUpsertArgs<ExtArgs>>): Prisma__cadastro_userClient<$Result.GetResult<Prisma.$cadastro_userPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cadastro_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_userCountArgs} args - Arguments to filter Cadastro_users to count.
     * @example
     * // Count the number of Cadastro_users
     * const count = await prisma.cadastro_user.count({
     *   where: {
     *     // ... the filter for the Cadastro_users we want to count
     *   }
     * })
    **/
    count<T extends cadastro_userCountArgs>(
      args?: Subset<T, cadastro_userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cadastro_userCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cadastro_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_userAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cadastro_userAggregateArgs>(args: Subset<T, Cadastro_userAggregateArgs>): Prisma.PrismaPromise<GetCadastro_userAggregateType<T>>

    /**
     * Group by Cadastro_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cadastro_userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cadastro_userGroupByArgs['orderBy'] }
        : { orderBy?: cadastro_userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cadastro_userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCadastro_userGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cadastro_user model
   */
  readonly fields: cadastro_userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cadastro_user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cadastro_userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the cadastro_user model
   */
  interface cadastro_userFieldRefs {
    readonly id: FieldRef<"cadastro_user", 'String'>
    readonly Nome: FieldRef<"cadastro_user", 'String'>
    readonly Email: FieldRef<"cadastro_user", 'String'>
    readonly Usuario: FieldRef<"cadastro_user", 'String'>
    readonly Senha: FieldRef<"cadastro_user", 'String'>
    readonly recoveryCode: FieldRef<"cadastro_user", 'Int'>
    readonly Profissional: FieldRef<"cadastro_user", 'Boolean'>
    readonly Secretaria: FieldRef<"cadastro_user", 'Boolean'>
    readonly foto: FieldRef<"cadastro_user", 'String'>
  }
    

  // Custom InputTypes
  /**
   * cadastro_user findUnique
   */
  export type cadastro_userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_user
     */
    omit?: cadastro_userOmit<ExtArgs> | null
    /**
     * Filter, which cadastro_user to fetch.
     */
    where: cadastro_userWhereUniqueInput
  }

  /**
   * cadastro_user findUniqueOrThrow
   */
  export type cadastro_userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_user
     */
    omit?: cadastro_userOmit<ExtArgs> | null
    /**
     * Filter, which cadastro_user to fetch.
     */
    where: cadastro_userWhereUniqueInput
  }

  /**
   * cadastro_user findFirst
   */
  export type cadastro_userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_user
     */
    omit?: cadastro_userOmit<ExtArgs> | null
    /**
     * Filter, which cadastro_user to fetch.
     */
    where?: cadastro_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_users to fetch.
     */
    orderBy?: cadastro_userOrderByWithRelationInput | cadastro_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastro_users.
     */
    cursor?: cadastro_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastro_users.
     */
    distinct?: Cadastro_userScalarFieldEnum | Cadastro_userScalarFieldEnum[]
  }

  /**
   * cadastro_user findFirstOrThrow
   */
  export type cadastro_userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_user
     */
    omit?: cadastro_userOmit<ExtArgs> | null
    /**
     * Filter, which cadastro_user to fetch.
     */
    where?: cadastro_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_users to fetch.
     */
    orderBy?: cadastro_userOrderByWithRelationInput | cadastro_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastro_users.
     */
    cursor?: cadastro_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastro_users.
     */
    distinct?: Cadastro_userScalarFieldEnum | Cadastro_userScalarFieldEnum[]
  }

  /**
   * cadastro_user findMany
   */
  export type cadastro_userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_user
     */
    omit?: cadastro_userOmit<ExtArgs> | null
    /**
     * Filter, which cadastro_users to fetch.
     */
    where?: cadastro_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_users to fetch.
     */
    orderBy?: cadastro_userOrderByWithRelationInput | cadastro_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cadastro_users.
     */
    cursor?: cadastro_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_users.
     */
    skip?: number
    distinct?: Cadastro_userScalarFieldEnum | Cadastro_userScalarFieldEnum[]
  }

  /**
   * cadastro_user create
   */
  export type cadastro_userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_user
     */
    omit?: cadastro_userOmit<ExtArgs> | null
    /**
     * The data needed to create a cadastro_user.
     */
    data: XOR<cadastro_userCreateInput, cadastro_userUncheckedCreateInput>
  }

  /**
   * cadastro_user createMany
   */
  export type cadastro_userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cadastro_users.
     */
    data: cadastro_userCreateManyInput | cadastro_userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cadastro_user createManyAndReturn
   */
  export type cadastro_userCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_user
     */
    omit?: cadastro_userOmit<ExtArgs> | null
    /**
     * The data used to create many cadastro_users.
     */
    data: cadastro_userCreateManyInput | cadastro_userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cadastro_user update
   */
  export type cadastro_userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_user
     */
    omit?: cadastro_userOmit<ExtArgs> | null
    /**
     * The data needed to update a cadastro_user.
     */
    data: XOR<cadastro_userUpdateInput, cadastro_userUncheckedUpdateInput>
    /**
     * Choose, which cadastro_user to update.
     */
    where: cadastro_userWhereUniqueInput
  }

  /**
   * cadastro_user updateMany
   */
  export type cadastro_userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cadastro_users.
     */
    data: XOR<cadastro_userUpdateManyMutationInput, cadastro_userUncheckedUpdateManyInput>
    /**
     * Filter which cadastro_users to update
     */
    where?: cadastro_userWhereInput
  }

  /**
   * cadastro_user upsert
   */
  export type cadastro_userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_user
     */
    omit?: cadastro_userOmit<ExtArgs> | null
    /**
     * The filter to search for the cadastro_user to update in case it exists.
     */
    where: cadastro_userWhereUniqueInput
    /**
     * In case the cadastro_user found by the `where` argument doesn't exist, create a new cadastro_user with this data.
     */
    create: XOR<cadastro_userCreateInput, cadastro_userUncheckedCreateInput>
    /**
     * In case the cadastro_user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cadastro_userUpdateInput, cadastro_userUncheckedUpdateInput>
  }

  /**
   * cadastro_user delete
   */
  export type cadastro_userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_user
     */
    omit?: cadastro_userOmit<ExtArgs> | null
    /**
     * Filter which cadastro_user to delete.
     */
    where: cadastro_userWhereUniqueInput
  }

  /**
   * cadastro_user deleteMany
   */
  export type cadastro_userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro_users to delete
     */
    where?: cadastro_userWhereInput
  }

  /**
   * cadastro_user without action
   */
  export type cadastro_userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_user
     */
    select?: cadastro_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_user
     */
    omit?: cadastro_userOmit<ExtArgs> | null
  }


  /**
   * Model Fluxo_de_caixa
   */

  export type AggregateFluxo_de_caixa = {
    _count: Fluxo_de_caixaCountAggregateOutputType | null
    _avg: Fluxo_de_caixaAvgAggregateOutputType | null
    _sum: Fluxo_de_caixaSumAggregateOutputType | null
    _min: Fluxo_de_caixaMinAggregateOutputType | null
    _max: Fluxo_de_caixaMaxAggregateOutputType | null
  }

  export type Fluxo_de_caixaAvgAggregateOutputType = {
    Valor: number | null
  }

  export type Fluxo_de_caixaSumAggregateOutputType = {
    Valor: number | null
  }

  export type Fluxo_de_caixaMinAggregateOutputType = {
    id: string | null
    Descricao: string | null
    Valor: number | null
    Tipo: string | null
    Data: string | null
    Especialista: string | null
  }

  export type Fluxo_de_caixaMaxAggregateOutputType = {
    id: string | null
    Descricao: string | null
    Valor: number | null
    Tipo: string | null
    Data: string | null
    Especialista: string | null
  }

  export type Fluxo_de_caixaCountAggregateOutputType = {
    id: number
    Descricao: number
    Valor: number
    Tipo: number
    Data: number
    Especialista: number
    _all: number
  }


  export type Fluxo_de_caixaAvgAggregateInputType = {
    Valor?: true
  }

  export type Fluxo_de_caixaSumAggregateInputType = {
    Valor?: true
  }

  export type Fluxo_de_caixaMinAggregateInputType = {
    id?: true
    Descricao?: true
    Valor?: true
    Tipo?: true
    Data?: true
    Especialista?: true
  }

  export type Fluxo_de_caixaMaxAggregateInputType = {
    id?: true
    Descricao?: true
    Valor?: true
    Tipo?: true
    Data?: true
    Especialista?: true
  }

  export type Fluxo_de_caixaCountAggregateInputType = {
    id?: true
    Descricao?: true
    Valor?: true
    Tipo?: true
    Data?: true
    Especialista?: true
    _all?: true
  }

  export type Fluxo_de_caixaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fluxo_de_caixa to aggregate.
     */
    where?: Fluxo_de_caixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fluxo_de_caixas to fetch.
     */
    orderBy?: Fluxo_de_caixaOrderByWithRelationInput | Fluxo_de_caixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Fluxo_de_caixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fluxo_de_caixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fluxo_de_caixas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fluxo_de_caixas
    **/
    _count?: true | Fluxo_de_caixaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Fluxo_de_caixaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Fluxo_de_caixaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Fluxo_de_caixaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Fluxo_de_caixaMaxAggregateInputType
  }

  export type GetFluxo_de_caixaAggregateType<T extends Fluxo_de_caixaAggregateArgs> = {
        [P in keyof T & keyof AggregateFluxo_de_caixa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFluxo_de_caixa[P]>
      : GetScalarType<T[P], AggregateFluxo_de_caixa[P]>
  }




  export type Fluxo_de_caixaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Fluxo_de_caixaWhereInput
    orderBy?: Fluxo_de_caixaOrderByWithAggregationInput | Fluxo_de_caixaOrderByWithAggregationInput[]
    by: Fluxo_de_caixaScalarFieldEnum[] | Fluxo_de_caixaScalarFieldEnum
    having?: Fluxo_de_caixaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Fluxo_de_caixaCountAggregateInputType | true
    _avg?: Fluxo_de_caixaAvgAggregateInputType
    _sum?: Fluxo_de_caixaSumAggregateInputType
    _min?: Fluxo_de_caixaMinAggregateInputType
    _max?: Fluxo_de_caixaMaxAggregateInputType
  }

  export type Fluxo_de_caixaGroupByOutputType = {
    id: string
    Descricao: string
    Valor: number
    Tipo: string
    Data: string
    Especialista: string
    _count: Fluxo_de_caixaCountAggregateOutputType | null
    _avg: Fluxo_de_caixaAvgAggregateOutputType | null
    _sum: Fluxo_de_caixaSumAggregateOutputType | null
    _min: Fluxo_de_caixaMinAggregateOutputType | null
    _max: Fluxo_de_caixaMaxAggregateOutputType | null
  }

  type GetFluxo_de_caixaGroupByPayload<T extends Fluxo_de_caixaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Fluxo_de_caixaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Fluxo_de_caixaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Fluxo_de_caixaGroupByOutputType[P]>
            : GetScalarType<T[P], Fluxo_de_caixaGroupByOutputType[P]>
        }
      >
    >


  export type Fluxo_de_caixaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Descricao?: boolean
    Valor?: boolean
    Tipo?: boolean
    Data?: boolean
    Especialista?: boolean
  }, ExtArgs["result"]["fluxo_de_caixa"]>

  export type Fluxo_de_caixaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Descricao?: boolean
    Valor?: boolean
    Tipo?: boolean
    Data?: boolean
    Especialista?: boolean
  }, ExtArgs["result"]["fluxo_de_caixa"]>


  export type Fluxo_de_caixaSelectScalar = {
    id?: boolean
    Descricao?: boolean
    Valor?: boolean
    Tipo?: boolean
    Data?: boolean
    Especialista?: boolean
  }

  export type Fluxo_de_caixaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "Descricao" | "Valor" | "Tipo" | "Data" | "Especialista", ExtArgs["result"]["fluxo_de_caixa"]>

  export type $Fluxo_de_caixaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Fluxo_de_caixa"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      Descricao: string
      Valor: number
      Tipo: string
      Data: string
      Especialista: string
    }, ExtArgs["result"]["fluxo_de_caixa"]>
    composites: {}
  }

  type Fluxo_de_caixaGetPayload<S extends boolean | null | undefined | Fluxo_de_caixaDefaultArgs> = $Result.GetResult<Prisma.$Fluxo_de_caixaPayload, S>

  type Fluxo_de_caixaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Fluxo_de_caixaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Fluxo_de_caixaCountAggregateInputType | true
    }

  export interface Fluxo_de_caixaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Fluxo_de_caixa'], meta: { name: 'Fluxo_de_caixa' } }
    /**
     * Find zero or one Fluxo_de_caixa that matches the filter.
     * @param {Fluxo_de_caixaFindUniqueArgs} args - Arguments to find a Fluxo_de_caixa
     * @example
     * // Get one Fluxo_de_caixa
     * const fluxo_de_caixa = await prisma.fluxo_de_caixa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Fluxo_de_caixaFindUniqueArgs>(args: SelectSubset<T, Fluxo_de_caixaFindUniqueArgs<ExtArgs>>): Prisma__Fluxo_de_caixaClient<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Fluxo_de_caixa that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Fluxo_de_caixaFindUniqueOrThrowArgs} args - Arguments to find a Fluxo_de_caixa
     * @example
     * // Get one Fluxo_de_caixa
     * const fluxo_de_caixa = await prisma.fluxo_de_caixa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Fluxo_de_caixaFindUniqueOrThrowArgs>(args: SelectSubset<T, Fluxo_de_caixaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Fluxo_de_caixaClient<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Fluxo_de_caixa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fluxo_de_caixaFindFirstArgs} args - Arguments to find a Fluxo_de_caixa
     * @example
     * // Get one Fluxo_de_caixa
     * const fluxo_de_caixa = await prisma.fluxo_de_caixa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Fluxo_de_caixaFindFirstArgs>(args?: SelectSubset<T, Fluxo_de_caixaFindFirstArgs<ExtArgs>>): Prisma__Fluxo_de_caixaClient<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Fluxo_de_caixa that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fluxo_de_caixaFindFirstOrThrowArgs} args - Arguments to find a Fluxo_de_caixa
     * @example
     * // Get one Fluxo_de_caixa
     * const fluxo_de_caixa = await prisma.fluxo_de_caixa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Fluxo_de_caixaFindFirstOrThrowArgs>(args?: SelectSubset<T, Fluxo_de_caixaFindFirstOrThrowArgs<ExtArgs>>): Prisma__Fluxo_de_caixaClient<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Fluxo_de_caixas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fluxo_de_caixaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fluxo_de_caixas
     * const fluxo_de_caixas = await prisma.fluxo_de_caixa.findMany()
     * 
     * // Get first 10 Fluxo_de_caixas
     * const fluxo_de_caixas = await prisma.fluxo_de_caixa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fluxo_de_caixaWithIdOnly = await prisma.fluxo_de_caixa.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends Fluxo_de_caixaFindManyArgs>(args?: SelectSubset<T, Fluxo_de_caixaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Fluxo_de_caixa.
     * @param {Fluxo_de_caixaCreateArgs} args - Arguments to create a Fluxo_de_caixa.
     * @example
     * // Create one Fluxo_de_caixa
     * const Fluxo_de_caixa = await prisma.fluxo_de_caixa.create({
     *   data: {
     *     // ... data to create a Fluxo_de_caixa
     *   }
     * })
     * 
     */
    create<T extends Fluxo_de_caixaCreateArgs>(args: SelectSubset<T, Fluxo_de_caixaCreateArgs<ExtArgs>>): Prisma__Fluxo_de_caixaClient<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Fluxo_de_caixas.
     * @param {Fluxo_de_caixaCreateManyArgs} args - Arguments to create many Fluxo_de_caixas.
     * @example
     * // Create many Fluxo_de_caixas
     * const fluxo_de_caixa = await prisma.fluxo_de_caixa.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Fluxo_de_caixaCreateManyArgs>(args?: SelectSubset<T, Fluxo_de_caixaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Fluxo_de_caixas and returns the data saved in the database.
     * @param {Fluxo_de_caixaCreateManyAndReturnArgs} args - Arguments to create many Fluxo_de_caixas.
     * @example
     * // Create many Fluxo_de_caixas
     * const fluxo_de_caixa = await prisma.fluxo_de_caixa.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Fluxo_de_caixas and only return the `id`
     * const fluxo_de_caixaWithIdOnly = await prisma.fluxo_de_caixa.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Fluxo_de_caixaCreateManyAndReturnArgs>(args?: SelectSubset<T, Fluxo_de_caixaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Fluxo_de_caixa.
     * @param {Fluxo_de_caixaDeleteArgs} args - Arguments to delete one Fluxo_de_caixa.
     * @example
     * // Delete one Fluxo_de_caixa
     * const Fluxo_de_caixa = await prisma.fluxo_de_caixa.delete({
     *   where: {
     *     // ... filter to delete one Fluxo_de_caixa
     *   }
     * })
     * 
     */
    delete<T extends Fluxo_de_caixaDeleteArgs>(args: SelectSubset<T, Fluxo_de_caixaDeleteArgs<ExtArgs>>): Prisma__Fluxo_de_caixaClient<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Fluxo_de_caixa.
     * @param {Fluxo_de_caixaUpdateArgs} args - Arguments to update one Fluxo_de_caixa.
     * @example
     * // Update one Fluxo_de_caixa
     * const fluxo_de_caixa = await prisma.fluxo_de_caixa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Fluxo_de_caixaUpdateArgs>(args: SelectSubset<T, Fluxo_de_caixaUpdateArgs<ExtArgs>>): Prisma__Fluxo_de_caixaClient<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Fluxo_de_caixas.
     * @param {Fluxo_de_caixaDeleteManyArgs} args - Arguments to filter Fluxo_de_caixas to delete.
     * @example
     * // Delete a few Fluxo_de_caixas
     * const { count } = await prisma.fluxo_de_caixa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Fluxo_de_caixaDeleteManyArgs>(args?: SelectSubset<T, Fluxo_de_caixaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fluxo_de_caixas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fluxo_de_caixaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fluxo_de_caixas
     * const fluxo_de_caixa = await prisma.fluxo_de_caixa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Fluxo_de_caixaUpdateManyArgs>(args: SelectSubset<T, Fluxo_de_caixaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fluxo_de_caixa.
     * @param {Fluxo_de_caixaUpsertArgs} args - Arguments to update or create a Fluxo_de_caixa.
     * @example
     * // Update or create a Fluxo_de_caixa
     * const fluxo_de_caixa = await prisma.fluxo_de_caixa.upsert({
     *   create: {
     *     // ... data to create a Fluxo_de_caixa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fluxo_de_caixa we want to update
     *   }
     * })
     */
    upsert<T extends Fluxo_de_caixaUpsertArgs>(args: SelectSubset<T, Fluxo_de_caixaUpsertArgs<ExtArgs>>): Prisma__Fluxo_de_caixaClient<$Result.GetResult<Prisma.$Fluxo_de_caixaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Fluxo_de_caixas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fluxo_de_caixaCountArgs} args - Arguments to filter Fluxo_de_caixas to count.
     * @example
     * // Count the number of Fluxo_de_caixas
     * const count = await prisma.fluxo_de_caixa.count({
     *   where: {
     *     // ... the filter for the Fluxo_de_caixas we want to count
     *   }
     * })
    **/
    count<T extends Fluxo_de_caixaCountArgs>(
      args?: Subset<T, Fluxo_de_caixaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Fluxo_de_caixaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fluxo_de_caixa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fluxo_de_caixaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Fluxo_de_caixaAggregateArgs>(args: Subset<T, Fluxo_de_caixaAggregateArgs>): Prisma.PrismaPromise<GetFluxo_de_caixaAggregateType<T>>

    /**
     * Group by Fluxo_de_caixa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fluxo_de_caixaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Fluxo_de_caixaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Fluxo_de_caixaGroupByArgs['orderBy'] }
        : { orderBy?: Fluxo_de_caixaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Fluxo_de_caixaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFluxo_de_caixaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Fluxo_de_caixa model
   */
  readonly fields: Fluxo_de_caixaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Fluxo_de_caixa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Fluxo_de_caixaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Fluxo_de_caixa model
   */
  interface Fluxo_de_caixaFieldRefs {
    readonly id: FieldRef<"Fluxo_de_caixa", 'String'>
    readonly Descricao: FieldRef<"Fluxo_de_caixa", 'String'>
    readonly Valor: FieldRef<"Fluxo_de_caixa", 'Float'>
    readonly Tipo: FieldRef<"Fluxo_de_caixa", 'String'>
    readonly Data: FieldRef<"Fluxo_de_caixa", 'String'>
    readonly Especialista: FieldRef<"Fluxo_de_caixa", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Fluxo_de_caixa findUnique
   */
  export type Fluxo_de_caixaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fluxo_de_caixa
     */
    omit?: Fluxo_de_caixaOmit<ExtArgs> | null
    /**
     * Filter, which Fluxo_de_caixa to fetch.
     */
    where: Fluxo_de_caixaWhereUniqueInput
  }

  /**
   * Fluxo_de_caixa findUniqueOrThrow
   */
  export type Fluxo_de_caixaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fluxo_de_caixa
     */
    omit?: Fluxo_de_caixaOmit<ExtArgs> | null
    /**
     * Filter, which Fluxo_de_caixa to fetch.
     */
    where: Fluxo_de_caixaWhereUniqueInput
  }

  /**
   * Fluxo_de_caixa findFirst
   */
  export type Fluxo_de_caixaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fluxo_de_caixa
     */
    omit?: Fluxo_de_caixaOmit<ExtArgs> | null
    /**
     * Filter, which Fluxo_de_caixa to fetch.
     */
    where?: Fluxo_de_caixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fluxo_de_caixas to fetch.
     */
    orderBy?: Fluxo_de_caixaOrderByWithRelationInput | Fluxo_de_caixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fluxo_de_caixas.
     */
    cursor?: Fluxo_de_caixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fluxo_de_caixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fluxo_de_caixas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fluxo_de_caixas.
     */
    distinct?: Fluxo_de_caixaScalarFieldEnum | Fluxo_de_caixaScalarFieldEnum[]
  }

  /**
   * Fluxo_de_caixa findFirstOrThrow
   */
  export type Fluxo_de_caixaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fluxo_de_caixa
     */
    omit?: Fluxo_de_caixaOmit<ExtArgs> | null
    /**
     * Filter, which Fluxo_de_caixa to fetch.
     */
    where?: Fluxo_de_caixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fluxo_de_caixas to fetch.
     */
    orderBy?: Fluxo_de_caixaOrderByWithRelationInput | Fluxo_de_caixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fluxo_de_caixas.
     */
    cursor?: Fluxo_de_caixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fluxo_de_caixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fluxo_de_caixas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fluxo_de_caixas.
     */
    distinct?: Fluxo_de_caixaScalarFieldEnum | Fluxo_de_caixaScalarFieldEnum[]
  }

  /**
   * Fluxo_de_caixa findMany
   */
  export type Fluxo_de_caixaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fluxo_de_caixa
     */
    omit?: Fluxo_de_caixaOmit<ExtArgs> | null
    /**
     * Filter, which Fluxo_de_caixas to fetch.
     */
    where?: Fluxo_de_caixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fluxo_de_caixas to fetch.
     */
    orderBy?: Fluxo_de_caixaOrderByWithRelationInput | Fluxo_de_caixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fluxo_de_caixas.
     */
    cursor?: Fluxo_de_caixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fluxo_de_caixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fluxo_de_caixas.
     */
    skip?: number
    distinct?: Fluxo_de_caixaScalarFieldEnum | Fluxo_de_caixaScalarFieldEnum[]
  }

  /**
   * Fluxo_de_caixa create
   */
  export type Fluxo_de_caixaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fluxo_de_caixa
     */
    omit?: Fluxo_de_caixaOmit<ExtArgs> | null
    /**
     * The data needed to create a Fluxo_de_caixa.
     */
    data: XOR<Fluxo_de_caixaCreateInput, Fluxo_de_caixaUncheckedCreateInput>
  }

  /**
   * Fluxo_de_caixa createMany
   */
  export type Fluxo_de_caixaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Fluxo_de_caixas.
     */
    data: Fluxo_de_caixaCreateManyInput | Fluxo_de_caixaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Fluxo_de_caixa createManyAndReturn
   */
  export type Fluxo_de_caixaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Fluxo_de_caixa
     */
    omit?: Fluxo_de_caixaOmit<ExtArgs> | null
    /**
     * The data used to create many Fluxo_de_caixas.
     */
    data: Fluxo_de_caixaCreateManyInput | Fluxo_de_caixaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Fluxo_de_caixa update
   */
  export type Fluxo_de_caixaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fluxo_de_caixa
     */
    omit?: Fluxo_de_caixaOmit<ExtArgs> | null
    /**
     * The data needed to update a Fluxo_de_caixa.
     */
    data: XOR<Fluxo_de_caixaUpdateInput, Fluxo_de_caixaUncheckedUpdateInput>
    /**
     * Choose, which Fluxo_de_caixa to update.
     */
    where: Fluxo_de_caixaWhereUniqueInput
  }

  /**
   * Fluxo_de_caixa updateMany
   */
  export type Fluxo_de_caixaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Fluxo_de_caixas.
     */
    data: XOR<Fluxo_de_caixaUpdateManyMutationInput, Fluxo_de_caixaUncheckedUpdateManyInput>
    /**
     * Filter which Fluxo_de_caixas to update
     */
    where?: Fluxo_de_caixaWhereInput
  }

  /**
   * Fluxo_de_caixa upsert
   */
  export type Fluxo_de_caixaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fluxo_de_caixa
     */
    omit?: Fluxo_de_caixaOmit<ExtArgs> | null
    /**
     * The filter to search for the Fluxo_de_caixa to update in case it exists.
     */
    where: Fluxo_de_caixaWhereUniqueInput
    /**
     * In case the Fluxo_de_caixa found by the `where` argument doesn't exist, create a new Fluxo_de_caixa with this data.
     */
    create: XOR<Fluxo_de_caixaCreateInput, Fluxo_de_caixaUncheckedCreateInput>
    /**
     * In case the Fluxo_de_caixa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Fluxo_de_caixaUpdateInput, Fluxo_de_caixaUncheckedUpdateInput>
  }

  /**
   * Fluxo_de_caixa delete
   */
  export type Fluxo_de_caixaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fluxo_de_caixa
     */
    omit?: Fluxo_de_caixaOmit<ExtArgs> | null
    /**
     * Filter which Fluxo_de_caixa to delete.
     */
    where: Fluxo_de_caixaWhereUniqueInput
  }

  /**
   * Fluxo_de_caixa deleteMany
   */
  export type Fluxo_de_caixaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fluxo_de_caixas to delete
     */
    where?: Fluxo_de_caixaWhereInput
  }

  /**
   * Fluxo_de_caixa without action
   */
  export type Fluxo_de_caixaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fluxo_de_caixa
     */
    select?: Fluxo_de_caixaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fluxo_de_caixa
     */
    omit?: Fluxo_de_caixaOmit<ExtArgs> | null
  }


  /**
   * Model Espera
   */

  export type AggregateEspera = {
    _count: EsperaCountAggregateOutputType | null
    _min: EsperaMinAggregateOutputType | null
    _max: EsperaMaxAggregateOutputType | null
  }

  export type EsperaMinAggregateOutputType = {
    id: string | null
    Nome: string | null
    Telefone: string | null
    Convenio: string | null
    Especialista: string | null
    Observacao: string | null
  }

  export type EsperaMaxAggregateOutputType = {
    id: string | null
    Nome: string | null
    Telefone: string | null
    Convenio: string | null
    Especialista: string | null
    Observacao: string | null
  }

  export type EsperaCountAggregateOutputType = {
    id: number
    Nome: number
    Telefone: number
    Convenio: number
    Especialista: number
    Observacao: number
    _all: number
  }


  export type EsperaMinAggregateInputType = {
    id?: true
    Nome?: true
    Telefone?: true
    Convenio?: true
    Especialista?: true
    Observacao?: true
  }

  export type EsperaMaxAggregateInputType = {
    id?: true
    Nome?: true
    Telefone?: true
    Convenio?: true
    Especialista?: true
    Observacao?: true
  }

  export type EsperaCountAggregateInputType = {
    id?: true
    Nome?: true
    Telefone?: true
    Convenio?: true
    Especialista?: true
    Observacao?: true
    _all?: true
  }

  export type EsperaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Espera to aggregate.
     */
    where?: EsperaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Esperas to fetch.
     */
    orderBy?: EsperaOrderByWithRelationInput | EsperaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EsperaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Esperas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Esperas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Esperas
    **/
    _count?: true | EsperaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EsperaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EsperaMaxAggregateInputType
  }

  export type GetEsperaAggregateType<T extends EsperaAggregateArgs> = {
        [P in keyof T & keyof AggregateEspera]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEspera[P]>
      : GetScalarType<T[P], AggregateEspera[P]>
  }




  export type EsperaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EsperaWhereInput
    orderBy?: EsperaOrderByWithAggregationInput | EsperaOrderByWithAggregationInput[]
    by: EsperaScalarFieldEnum[] | EsperaScalarFieldEnum
    having?: EsperaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EsperaCountAggregateInputType | true
    _min?: EsperaMinAggregateInputType
    _max?: EsperaMaxAggregateInputType
  }

  export type EsperaGroupByOutputType = {
    id: string
    Nome: string
    Telefone: string
    Convenio: string
    Especialista: string
    Observacao: string
    _count: EsperaCountAggregateOutputType | null
    _min: EsperaMinAggregateOutputType | null
    _max: EsperaMaxAggregateOutputType | null
  }

  type GetEsperaGroupByPayload<T extends EsperaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EsperaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EsperaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EsperaGroupByOutputType[P]>
            : GetScalarType<T[P], EsperaGroupByOutputType[P]>
        }
      >
    >


  export type EsperaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nome?: boolean
    Telefone?: boolean
    Convenio?: boolean
    Especialista?: boolean
    Observacao?: boolean
  }, ExtArgs["result"]["espera"]>

  export type EsperaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nome?: boolean
    Telefone?: boolean
    Convenio?: boolean
    Especialista?: boolean
    Observacao?: boolean
  }, ExtArgs["result"]["espera"]>


  export type EsperaSelectScalar = {
    id?: boolean
    Nome?: boolean
    Telefone?: boolean
    Convenio?: boolean
    Especialista?: boolean
    Observacao?: boolean
  }

  export type EsperaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "Nome" | "Telefone" | "Convenio" | "Especialista" | "Observacao", ExtArgs["result"]["espera"]>

  export type $EsperaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Espera"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      Nome: string
      Telefone: string
      Convenio: string
      Especialista: string
      Observacao: string
    }, ExtArgs["result"]["espera"]>
    composites: {}
  }

  type EsperaGetPayload<S extends boolean | null | undefined | EsperaDefaultArgs> = $Result.GetResult<Prisma.$EsperaPayload, S>

  type EsperaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EsperaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EsperaCountAggregateInputType | true
    }

  export interface EsperaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Espera'], meta: { name: 'Espera' } }
    /**
     * Find zero or one Espera that matches the filter.
     * @param {EsperaFindUniqueArgs} args - Arguments to find a Espera
     * @example
     * // Get one Espera
     * const espera = await prisma.espera.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EsperaFindUniqueArgs>(args: SelectSubset<T, EsperaFindUniqueArgs<ExtArgs>>): Prisma__EsperaClient<$Result.GetResult<Prisma.$EsperaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Espera that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EsperaFindUniqueOrThrowArgs} args - Arguments to find a Espera
     * @example
     * // Get one Espera
     * const espera = await prisma.espera.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EsperaFindUniqueOrThrowArgs>(args: SelectSubset<T, EsperaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EsperaClient<$Result.GetResult<Prisma.$EsperaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Espera that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EsperaFindFirstArgs} args - Arguments to find a Espera
     * @example
     * // Get one Espera
     * const espera = await prisma.espera.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EsperaFindFirstArgs>(args?: SelectSubset<T, EsperaFindFirstArgs<ExtArgs>>): Prisma__EsperaClient<$Result.GetResult<Prisma.$EsperaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Espera that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EsperaFindFirstOrThrowArgs} args - Arguments to find a Espera
     * @example
     * // Get one Espera
     * const espera = await prisma.espera.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EsperaFindFirstOrThrowArgs>(args?: SelectSubset<T, EsperaFindFirstOrThrowArgs<ExtArgs>>): Prisma__EsperaClient<$Result.GetResult<Prisma.$EsperaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Esperas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EsperaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Esperas
     * const esperas = await prisma.espera.findMany()
     * 
     * // Get first 10 Esperas
     * const esperas = await prisma.espera.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const esperaWithIdOnly = await prisma.espera.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EsperaFindManyArgs>(args?: SelectSubset<T, EsperaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EsperaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Espera.
     * @param {EsperaCreateArgs} args - Arguments to create a Espera.
     * @example
     * // Create one Espera
     * const Espera = await prisma.espera.create({
     *   data: {
     *     // ... data to create a Espera
     *   }
     * })
     * 
     */
    create<T extends EsperaCreateArgs>(args: SelectSubset<T, EsperaCreateArgs<ExtArgs>>): Prisma__EsperaClient<$Result.GetResult<Prisma.$EsperaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Esperas.
     * @param {EsperaCreateManyArgs} args - Arguments to create many Esperas.
     * @example
     * // Create many Esperas
     * const espera = await prisma.espera.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EsperaCreateManyArgs>(args?: SelectSubset<T, EsperaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Esperas and returns the data saved in the database.
     * @param {EsperaCreateManyAndReturnArgs} args - Arguments to create many Esperas.
     * @example
     * // Create many Esperas
     * const espera = await prisma.espera.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Esperas and only return the `id`
     * const esperaWithIdOnly = await prisma.espera.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EsperaCreateManyAndReturnArgs>(args?: SelectSubset<T, EsperaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EsperaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Espera.
     * @param {EsperaDeleteArgs} args - Arguments to delete one Espera.
     * @example
     * // Delete one Espera
     * const Espera = await prisma.espera.delete({
     *   where: {
     *     // ... filter to delete one Espera
     *   }
     * })
     * 
     */
    delete<T extends EsperaDeleteArgs>(args: SelectSubset<T, EsperaDeleteArgs<ExtArgs>>): Prisma__EsperaClient<$Result.GetResult<Prisma.$EsperaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Espera.
     * @param {EsperaUpdateArgs} args - Arguments to update one Espera.
     * @example
     * // Update one Espera
     * const espera = await prisma.espera.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EsperaUpdateArgs>(args: SelectSubset<T, EsperaUpdateArgs<ExtArgs>>): Prisma__EsperaClient<$Result.GetResult<Prisma.$EsperaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Esperas.
     * @param {EsperaDeleteManyArgs} args - Arguments to filter Esperas to delete.
     * @example
     * // Delete a few Esperas
     * const { count } = await prisma.espera.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EsperaDeleteManyArgs>(args?: SelectSubset<T, EsperaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Esperas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EsperaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Esperas
     * const espera = await prisma.espera.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EsperaUpdateManyArgs>(args: SelectSubset<T, EsperaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Espera.
     * @param {EsperaUpsertArgs} args - Arguments to update or create a Espera.
     * @example
     * // Update or create a Espera
     * const espera = await prisma.espera.upsert({
     *   create: {
     *     // ... data to create a Espera
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Espera we want to update
     *   }
     * })
     */
    upsert<T extends EsperaUpsertArgs>(args: SelectSubset<T, EsperaUpsertArgs<ExtArgs>>): Prisma__EsperaClient<$Result.GetResult<Prisma.$EsperaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Esperas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EsperaCountArgs} args - Arguments to filter Esperas to count.
     * @example
     * // Count the number of Esperas
     * const count = await prisma.espera.count({
     *   where: {
     *     // ... the filter for the Esperas we want to count
     *   }
     * })
    **/
    count<T extends EsperaCountArgs>(
      args?: Subset<T, EsperaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EsperaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Espera.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EsperaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EsperaAggregateArgs>(args: Subset<T, EsperaAggregateArgs>): Prisma.PrismaPromise<GetEsperaAggregateType<T>>

    /**
     * Group by Espera.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EsperaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EsperaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EsperaGroupByArgs['orderBy'] }
        : { orderBy?: EsperaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EsperaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEsperaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Espera model
   */
  readonly fields: EsperaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Espera.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EsperaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Espera model
   */
  interface EsperaFieldRefs {
    readonly id: FieldRef<"Espera", 'String'>
    readonly Nome: FieldRef<"Espera", 'String'>
    readonly Telefone: FieldRef<"Espera", 'String'>
    readonly Convenio: FieldRef<"Espera", 'String'>
    readonly Especialista: FieldRef<"Espera", 'String'>
    readonly Observacao: FieldRef<"Espera", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Espera findUnique
   */
  export type EsperaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Espera
     */
    select?: EsperaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Espera
     */
    omit?: EsperaOmit<ExtArgs> | null
    /**
     * Filter, which Espera to fetch.
     */
    where: EsperaWhereUniqueInput
  }

  /**
   * Espera findUniqueOrThrow
   */
  export type EsperaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Espera
     */
    select?: EsperaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Espera
     */
    omit?: EsperaOmit<ExtArgs> | null
    /**
     * Filter, which Espera to fetch.
     */
    where: EsperaWhereUniqueInput
  }

  /**
   * Espera findFirst
   */
  export type EsperaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Espera
     */
    select?: EsperaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Espera
     */
    omit?: EsperaOmit<ExtArgs> | null
    /**
     * Filter, which Espera to fetch.
     */
    where?: EsperaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Esperas to fetch.
     */
    orderBy?: EsperaOrderByWithRelationInput | EsperaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Esperas.
     */
    cursor?: EsperaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Esperas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Esperas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Esperas.
     */
    distinct?: EsperaScalarFieldEnum | EsperaScalarFieldEnum[]
  }

  /**
   * Espera findFirstOrThrow
   */
  export type EsperaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Espera
     */
    select?: EsperaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Espera
     */
    omit?: EsperaOmit<ExtArgs> | null
    /**
     * Filter, which Espera to fetch.
     */
    where?: EsperaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Esperas to fetch.
     */
    orderBy?: EsperaOrderByWithRelationInput | EsperaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Esperas.
     */
    cursor?: EsperaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Esperas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Esperas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Esperas.
     */
    distinct?: EsperaScalarFieldEnum | EsperaScalarFieldEnum[]
  }

  /**
   * Espera findMany
   */
  export type EsperaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Espera
     */
    select?: EsperaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Espera
     */
    omit?: EsperaOmit<ExtArgs> | null
    /**
     * Filter, which Esperas to fetch.
     */
    where?: EsperaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Esperas to fetch.
     */
    orderBy?: EsperaOrderByWithRelationInput | EsperaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Esperas.
     */
    cursor?: EsperaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Esperas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Esperas.
     */
    skip?: number
    distinct?: EsperaScalarFieldEnum | EsperaScalarFieldEnum[]
  }

  /**
   * Espera create
   */
  export type EsperaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Espera
     */
    select?: EsperaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Espera
     */
    omit?: EsperaOmit<ExtArgs> | null
    /**
     * The data needed to create a Espera.
     */
    data: XOR<EsperaCreateInput, EsperaUncheckedCreateInput>
  }

  /**
   * Espera createMany
   */
  export type EsperaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Esperas.
     */
    data: EsperaCreateManyInput | EsperaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Espera createManyAndReturn
   */
  export type EsperaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Espera
     */
    select?: EsperaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Espera
     */
    omit?: EsperaOmit<ExtArgs> | null
    /**
     * The data used to create many Esperas.
     */
    data: EsperaCreateManyInput | EsperaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Espera update
   */
  export type EsperaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Espera
     */
    select?: EsperaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Espera
     */
    omit?: EsperaOmit<ExtArgs> | null
    /**
     * The data needed to update a Espera.
     */
    data: XOR<EsperaUpdateInput, EsperaUncheckedUpdateInput>
    /**
     * Choose, which Espera to update.
     */
    where: EsperaWhereUniqueInput
  }

  /**
   * Espera updateMany
   */
  export type EsperaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Esperas.
     */
    data: XOR<EsperaUpdateManyMutationInput, EsperaUncheckedUpdateManyInput>
    /**
     * Filter which Esperas to update
     */
    where?: EsperaWhereInput
  }

  /**
   * Espera upsert
   */
  export type EsperaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Espera
     */
    select?: EsperaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Espera
     */
    omit?: EsperaOmit<ExtArgs> | null
    /**
     * The filter to search for the Espera to update in case it exists.
     */
    where: EsperaWhereUniqueInput
    /**
     * In case the Espera found by the `where` argument doesn't exist, create a new Espera with this data.
     */
    create: XOR<EsperaCreateInput, EsperaUncheckedCreateInput>
    /**
     * In case the Espera was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EsperaUpdateInput, EsperaUncheckedUpdateInput>
  }

  /**
   * Espera delete
   */
  export type EsperaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Espera
     */
    select?: EsperaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Espera
     */
    omit?: EsperaOmit<ExtArgs> | null
    /**
     * Filter which Espera to delete.
     */
    where: EsperaWhereUniqueInput
  }

  /**
   * Espera deleteMany
   */
  export type EsperaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Esperas to delete
     */
    where?: EsperaWhereInput
  }

  /**
   * Espera without action
   */
  export type EsperaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Espera
     */
    select?: EsperaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Espera
     */
    omit?: EsperaOmit<ExtArgs> | null
  }


  /**
   * Model cadastro_prof
   */

  export type AggregateCadastro_prof = {
    _count: Cadastro_profCountAggregateOutputType | null
    _min: Cadastro_profMinAggregateOutputType | null
    _max: Cadastro_profMaxAggregateOutputType | null
  }

  export type Cadastro_profMinAggregateOutputType = {
    id: string | null
    Nome: string | null
    Faixa_Etaria_de_Atendimento: string | null
    Dias_de_Atendimento: string | null
    Horarios_de_Atendimento: string | null
    Especialidade: string | null
    Registro_do_Profissional: string | null
    Especialista: string | null
  }

  export type Cadastro_profMaxAggregateOutputType = {
    id: string | null
    Nome: string | null
    Faixa_Etaria_de_Atendimento: string | null
    Dias_de_Atendimento: string | null
    Horarios_de_Atendimento: string | null
    Especialidade: string | null
    Registro_do_Profissional: string | null
    Especialista: string | null
  }

  export type Cadastro_profCountAggregateOutputType = {
    id: number
    Nome: number
    Faixa_Etaria_de_Atendimento: number
    Dias_de_Atendimento: number
    Horarios_de_Atendimento: number
    Especialidade: number
    Registro_do_Profissional: number
    Especialista: number
    _all: number
  }


  export type Cadastro_profMinAggregateInputType = {
    id?: true
    Nome?: true
    Faixa_Etaria_de_Atendimento?: true
    Dias_de_Atendimento?: true
    Horarios_de_Atendimento?: true
    Especialidade?: true
    Registro_do_Profissional?: true
    Especialista?: true
  }

  export type Cadastro_profMaxAggregateInputType = {
    id?: true
    Nome?: true
    Faixa_Etaria_de_Atendimento?: true
    Dias_de_Atendimento?: true
    Horarios_de_Atendimento?: true
    Especialidade?: true
    Registro_do_Profissional?: true
    Especialista?: true
  }

  export type Cadastro_profCountAggregateInputType = {
    id?: true
    Nome?: true
    Faixa_Etaria_de_Atendimento?: true
    Dias_de_Atendimento?: true
    Horarios_de_Atendimento?: true
    Especialidade?: true
    Registro_do_Profissional?: true
    Especialista?: true
    _all?: true
  }

  export type Cadastro_profAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro_prof to aggregate.
     */
    where?: cadastro_profWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_profs to fetch.
     */
    orderBy?: cadastro_profOrderByWithRelationInput | cadastro_profOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cadastro_profWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_profs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_profs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cadastro_profs
    **/
    _count?: true | Cadastro_profCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cadastro_profMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cadastro_profMaxAggregateInputType
  }

  export type GetCadastro_profAggregateType<T extends Cadastro_profAggregateArgs> = {
        [P in keyof T & keyof AggregateCadastro_prof]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCadastro_prof[P]>
      : GetScalarType<T[P], AggregateCadastro_prof[P]>
  }




  export type cadastro_profGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cadastro_profWhereInput
    orderBy?: cadastro_profOrderByWithAggregationInput | cadastro_profOrderByWithAggregationInput[]
    by: Cadastro_profScalarFieldEnum[] | Cadastro_profScalarFieldEnum
    having?: cadastro_profScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cadastro_profCountAggregateInputType | true
    _min?: Cadastro_profMinAggregateInputType
    _max?: Cadastro_profMaxAggregateInputType
  }

  export type Cadastro_profGroupByOutputType = {
    id: string
    Nome: string
    Faixa_Etaria_de_Atendimento: string
    Dias_de_Atendimento: string
    Horarios_de_Atendimento: string
    Especialidade: string
    Registro_do_Profissional: string
    Especialista: string
    _count: Cadastro_profCountAggregateOutputType | null
    _min: Cadastro_profMinAggregateOutputType | null
    _max: Cadastro_profMaxAggregateOutputType | null
  }

  type GetCadastro_profGroupByPayload<T extends cadastro_profGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cadastro_profGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cadastro_profGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cadastro_profGroupByOutputType[P]>
            : GetScalarType<T[P], Cadastro_profGroupByOutputType[P]>
        }
      >
    >


  export type cadastro_profSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nome?: boolean
    Faixa_Etaria_de_Atendimento?: boolean
    Dias_de_Atendimento?: boolean
    Horarios_de_Atendimento?: boolean
    Especialidade?: boolean
    Registro_do_Profissional?: boolean
    Especialista?: boolean
  }, ExtArgs["result"]["cadastro_prof"]>

  export type cadastro_profSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nome?: boolean
    Faixa_Etaria_de_Atendimento?: boolean
    Dias_de_Atendimento?: boolean
    Horarios_de_Atendimento?: boolean
    Especialidade?: boolean
    Registro_do_Profissional?: boolean
    Especialista?: boolean
  }, ExtArgs["result"]["cadastro_prof"]>


  export type cadastro_profSelectScalar = {
    id?: boolean
    Nome?: boolean
    Faixa_Etaria_de_Atendimento?: boolean
    Dias_de_Atendimento?: boolean
    Horarios_de_Atendimento?: boolean
    Especialidade?: boolean
    Registro_do_Profissional?: boolean
    Especialista?: boolean
  }

  export type cadastro_profOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "Nome" | "Faixa_Etaria_de_Atendimento" | "Dias_de_Atendimento" | "Horarios_de_Atendimento" | "Especialidade" | "Registro_do_Profissional" | "Especialista", ExtArgs["result"]["cadastro_prof"]>

  export type $cadastro_profPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cadastro_prof"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      Nome: string
      Faixa_Etaria_de_Atendimento: string
      Dias_de_Atendimento: string
      Horarios_de_Atendimento: string
      Especialidade: string
      Registro_do_Profissional: string
      Especialista: string
    }, ExtArgs["result"]["cadastro_prof"]>
    composites: {}
  }

  type cadastro_profGetPayload<S extends boolean | null | undefined | cadastro_profDefaultArgs> = $Result.GetResult<Prisma.$cadastro_profPayload, S>

  type cadastro_profCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<cadastro_profFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Cadastro_profCountAggregateInputType | true
    }

  export interface cadastro_profDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cadastro_prof'], meta: { name: 'cadastro_prof' } }
    /**
     * Find zero or one Cadastro_prof that matches the filter.
     * @param {cadastro_profFindUniqueArgs} args - Arguments to find a Cadastro_prof
     * @example
     * // Get one Cadastro_prof
     * const cadastro_prof = await prisma.cadastro_prof.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends cadastro_profFindUniqueArgs>(args: SelectSubset<T, cadastro_profFindUniqueArgs<ExtArgs>>): Prisma__cadastro_profClient<$Result.GetResult<Prisma.$cadastro_profPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cadastro_prof that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {cadastro_profFindUniqueOrThrowArgs} args - Arguments to find a Cadastro_prof
     * @example
     * // Get one Cadastro_prof
     * const cadastro_prof = await prisma.cadastro_prof.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends cadastro_profFindUniqueOrThrowArgs>(args: SelectSubset<T, cadastro_profFindUniqueOrThrowArgs<ExtArgs>>): Prisma__cadastro_profClient<$Result.GetResult<Prisma.$cadastro_profPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cadastro_prof that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_profFindFirstArgs} args - Arguments to find a Cadastro_prof
     * @example
     * // Get one Cadastro_prof
     * const cadastro_prof = await prisma.cadastro_prof.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends cadastro_profFindFirstArgs>(args?: SelectSubset<T, cadastro_profFindFirstArgs<ExtArgs>>): Prisma__cadastro_profClient<$Result.GetResult<Prisma.$cadastro_profPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cadastro_prof that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_profFindFirstOrThrowArgs} args - Arguments to find a Cadastro_prof
     * @example
     * // Get one Cadastro_prof
     * const cadastro_prof = await prisma.cadastro_prof.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends cadastro_profFindFirstOrThrowArgs>(args?: SelectSubset<T, cadastro_profFindFirstOrThrowArgs<ExtArgs>>): Prisma__cadastro_profClient<$Result.GetResult<Prisma.$cadastro_profPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cadastro_profs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_profFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cadastro_profs
     * const cadastro_profs = await prisma.cadastro_prof.findMany()
     * 
     * // Get first 10 Cadastro_profs
     * const cadastro_profs = await prisma.cadastro_prof.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cadastro_profWithIdOnly = await prisma.cadastro_prof.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends cadastro_profFindManyArgs>(args?: SelectSubset<T, cadastro_profFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cadastro_profPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cadastro_prof.
     * @param {cadastro_profCreateArgs} args - Arguments to create a Cadastro_prof.
     * @example
     * // Create one Cadastro_prof
     * const Cadastro_prof = await prisma.cadastro_prof.create({
     *   data: {
     *     // ... data to create a Cadastro_prof
     *   }
     * })
     * 
     */
    create<T extends cadastro_profCreateArgs>(args: SelectSubset<T, cadastro_profCreateArgs<ExtArgs>>): Prisma__cadastro_profClient<$Result.GetResult<Prisma.$cadastro_profPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cadastro_profs.
     * @param {cadastro_profCreateManyArgs} args - Arguments to create many Cadastro_profs.
     * @example
     * // Create many Cadastro_profs
     * const cadastro_prof = await prisma.cadastro_prof.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends cadastro_profCreateManyArgs>(args?: SelectSubset<T, cadastro_profCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cadastro_profs and returns the data saved in the database.
     * @param {cadastro_profCreateManyAndReturnArgs} args - Arguments to create many Cadastro_profs.
     * @example
     * // Create many Cadastro_profs
     * const cadastro_prof = await prisma.cadastro_prof.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cadastro_profs and only return the `id`
     * const cadastro_profWithIdOnly = await prisma.cadastro_prof.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends cadastro_profCreateManyAndReturnArgs>(args?: SelectSubset<T, cadastro_profCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cadastro_profPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Cadastro_prof.
     * @param {cadastro_profDeleteArgs} args - Arguments to delete one Cadastro_prof.
     * @example
     * // Delete one Cadastro_prof
     * const Cadastro_prof = await prisma.cadastro_prof.delete({
     *   where: {
     *     // ... filter to delete one Cadastro_prof
     *   }
     * })
     * 
     */
    delete<T extends cadastro_profDeleteArgs>(args: SelectSubset<T, cadastro_profDeleteArgs<ExtArgs>>): Prisma__cadastro_profClient<$Result.GetResult<Prisma.$cadastro_profPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cadastro_prof.
     * @param {cadastro_profUpdateArgs} args - Arguments to update one Cadastro_prof.
     * @example
     * // Update one Cadastro_prof
     * const cadastro_prof = await prisma.cadastro_prof.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends cadastro_profUpdateArgs>(args: SelectSubset<T, cadastro_profUpdateArgs<ExtArgs>>): Prisma__cadastro_profClient<$Result.GetResult<Prisma.$cadastro_profPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cadastro_profs.
     * @param {cadastro_profDeleteManyArgs} args - Arguments to filter Cadastro_profs to delete.
     * @example
     * // Delete a few Cadastro_profs
     * const { count } = await prisma.cadastro_prof.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends cadastro_profDeleteManyArgs>(args?: SelectSubset<T, cadastro_profDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cadastro_profs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_profUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cadastro_profs
     * const cadastro_prof = await prisma.cadastro_prof.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends cadastro_profUpdateManyArgs>(args: SelectSubset<T, cadastro_profUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cadastro_prof.
     * @param {cadastro_profUpsertArgs} args - Arguments to update or create a Cadastro_prof.
     * @example
     * // Update or create a Cadastro_prof
     * const cadastro_prof = await prisma.cadastro_prof.upsert({
     *   create: {
     *     // ... data to create a Cadastro_prof
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cadastro_prof we want to update
     *   }
     * })
     */
    upsert<T extends cadastro_profUpsertArgs>(args: SelectSubset<T, cadastro_profUpsertArgs<ExtArgs>>): Prisma__cadastro_profClient<$Result.GetResult<Prisma.$cadastro_profPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cadastro_profs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_profCountArgs} args - Arguments to filter Cadastro_profs to count.
     * @example
     * // Count the number of Cadastro_profs
     * const count = await prisma.cadastro_prof.count({
     *   where: {
     *     // ... the filter for the Cadastro_profs we want to count
     *   }
     * })
    **/
    count<T extends cadastro_profCountArgs>(
      args?: Subset<T, cadastro_profCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cadastro_profCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cadastro_prof.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cadastro_profAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cadastro_profAggregateArgs>(args: Subset<T, Cadastro_profAggregateArgs>): Prisma.PrismaPromise<GetCadastro_profAggregateType<T>>

    /**
     * Group by Cadastro_prof.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cadastro_profGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cadastro_profGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cadastro_profGroupByArgs['orderBy'] }
        : { orderBy?: cadastro_profGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cadastro_profGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCadastro_profGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cadastro_prof model
   */
  readonly fields: cadastro_profFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cadastro_prof.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cadastro_profClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the cadastro_prof model
   */
  interface cadastro_profFieldRefs {
    readonly id: FieldRef<"cadastro_prof", 'String'>
    readonly Nome: FieldRef<"cadastro_prof", 'String'>
    readonly Faixa_Etaria_de_Atendimento: FieldRef<"cadastro_prof", 'String'>
    readonly Dias_de_Atendimento: FieldRef<"cadastro_prof", 'String'>
    readonly Horarios_de_Atendimento: FieldRef<"cadastro_prof", 'String'>
    readonly Especialidade: FieldRef<"cadastro_prof", 'String'>
    readonly Registro_do_Profissional: FieldRef<"cadastro_prof", 'String'>
    readonly Especialista: FieldRef<"cadastro_prof", 'String'>
  }
    

  // Custom InputTypes
  /**
   * cadastro_prof findUnique
   */
  export type cadastro_profFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_prof
     */
    select?: cadastro_profSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_prof
     */
    omit?: cadastro_profOmit<ExtArgs> | null
    /**
     * Filter, which cadastro_prof to fetch.
     */
    where: cadastro_profWhereUniqueInput
  }

  /**
   * cadastro_prof findUniqueOrThrow
   */
  export type cadastro_profFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_prof
     */
    select?: cadastro_profSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_prof
     */
    omit?: cadastro_profOmit<ExtArgs> | null
    /**
     * Filter, which cadastro_prof to fetch.
     */
    where: cadastro_profWhereUniqueInput
  }

  /**
   * cadastro_prof findFirst
   */
  export type cadastro_profFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_prof
     */
    select?: cadastro_profSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_prof
     */
    omit?: cadastro_profOmit<ExtArgs> | null
    /**
     * Filter, which cadastro_prof to fetch.
     */
    where?: cadastro_profWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_profs to fetch.
     */
    orderBy?: cadastro_profOrderByWithRelationInput | cadastro_profOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastro_profs.
     */
    cursor?: cadastro_profWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_profs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_profs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastro_profs.
     */
    distinct?: Cadastro_profScalarFieldEnum | Cadastro_profScalarFieldEnum[]
  }

  /**
   * cadastro_prof findFirstOrThrow
   */
  export type cadastro_profFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_prof
     */
    select?: cadastro_profSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_prof
     */
    omit?: cadastro_profOmit<ExtArgs> | null
    /**
     * Filter, which cadastro_prof to fetch.
     */
    where?: cadastro_profWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_profs to fetch.
     */
    orderBy?: cadastro_profOrderByWithRelationInput | cadastro_profOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cadastro_profs.
     */
    cursor?: cadastro_profWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_profs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_profs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cadastro_profs.
     */
    distinct?: Cadastro_profScalarFieldEnum | Cadastro_profScalarFieldEnum[]
  }

  /**
   * cadastro_prof findMany
   */
  export type cadastro_profFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_prof
     */
    select?: cadastro_profSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_prof
     */
    omit?: cadastro_profOmit<ExtArgs> | null
    /**
     * Filter, which cadastro_profs to fetch.
     */
    where?: cadastro_profWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cadastro_profs to fetch.
     */
    orderBy?: cadastro_profOrderByWithRelationInput | cadastro_profOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cadastro_profs.
     */
    cursor?: cadastro_profWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cadastro_profs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cadastro_profs.
     */
    skip?: number
    distinct?: Cadastro_profScalarFieldEnum | Cadastro_profScalarFieldEnum[]
  }

  /**
   * cadastro_prof create
   */
  export type cadastro_profCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_prof
     */
    select?: cadastro_profSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_prof
     */
    omit?: cadastro_profOmit<ExtArgs> | null
    /**
     * The data needed to create a cadastro_prof.
     */
    data: XOR<cadastro_profCreateInput, cadastro_profUncheckedCreateInput>
  }

  /**
   * cadastro_prof createMany
   */
  export type cadastro_profCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cadastro_profs.
     */
    data: cadastro_profCreateManyInput | cadastro_profCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cadastro_prof createManyAndReturn
   */
  export type cadastro_profCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_prof
     */
    select?: cadastro_profSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_prof
     */
    omit?: cadastro_profOmit<ExtArgs> | null
    /**
     * The data used to create many cadastro_profs.
     */
    data: cadastro_profCreateManyInput | cadastro_profCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cadastro_prof update
   */
  export type cadastro_profUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_prof
     */
    select?: cadastro_profSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_prof
     */
    omit?: cadastro_profOmit<ExtArgs> | null
    /**
     * The data needed to update a cadastro_prof.
     */
    data: XOR<cadastro_profUpdateInput, cadastro_profUncheckedUpdateInput>
    /**
     * Choose, which cadastro_prof to update.
     */
    where: cadastro_profWhereUniqueInput
  }

  /**
   * cadastro_prof updateMany
   */
  export type cadastro_profUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cadastro_profs.
     */
    data: XOR<cadastro_profUpdateManyMutationInput, cadastro_profUncheckedUpdateManyInput>
    /**
     * Filter which cadastro_profs to update
     */
    where?: cadastro_profWhereInput
  }

  /**
   * cadastro_prof upsert
   */
  export type cadastro_profUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_prof
     */
    select?: cadastro_profSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_prof
     */
    omit?: cadastro_profOmit<ExtArgs> | null
    /**
     * The filter to search for the cadastro_prof to update in case it exists.
     */
    where: cadastro_profWhereUniqueInput
    /**
     * In case the cadastro_prof found by the `where` argument doesn't exist, create a new cadastro_prof with this data.
     */
    create: XOR<cadastro_profCreateInput, cadastro_profUncheckedCreateInput>
    /**
     * In case the cadastro_prof was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cadastro_profUpdateInput, cadastro_profUncheckedUpdateInput>
  }

  /**
   * cadastro_prof delete
   */
  export type cadastro_profDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_prof
     */
    select?: cadastro_profSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_prof
     */
    omit?: cadastro_profOmit<ExtArgs> | null
    /**
     * Filter which cadastro_prof to delete.
     */
    where: cadastro_profWhereUniqueInput
  }

  /**
   * cadastro_prof deleteMany
   */
  export type cadastro_profDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cadastro_profs to delete
     */
    where?: cadastro_profWhereInput
  }

  /**
   * cadastro_prof without action
   */
  export type cadastro_profDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cadastro_prof
     */
    select?: cadastro_profSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cadastro_prof
     */
    omit?: cadastro_profOmit<ExtArgs> | null
  }


  /**
   * Model Atendimento
   */

  export type AggregateAtendimento = {
    _count: AtendimentoCountAggregateOutputType | null
    _min: AtendimentoMinAggregateOutputType | null
    _max: AtendimentoMaxAggregateOutputType | null
  }

  export type AtendimentoMinAggregateOutputType = {
    id: string | null
    id_agendamento: string | null
    id_paciente: string | null
    conteudoAtestado: string | null
    conteudoComparecimento: string | null
    conteudoEncaminhamento: string | null
    conteudoProntuario: string | null
    conteudoAnamineseI: string | null
    conteudoAnamineseA: string | null
    conteudoNeuroI: string | null
    conteudoNeuroA: string | null
    dataHora: string | null
    tempo: string | null
  }

  export type AtendimentoMaxAggregateOutputType = {
    id: string | null
    id_agendamento: string | null
    id_paciente: string | null
    conteudoAtestado: string | null
    conteudoComparecimento: string | null
    conteudoEncaminhamento: string | null
    conteudoProntuario: string | null
    conteudoAnamineseI: string | null
    conteudoAnamineseA: string | null
    conteudoNeuroI: string | null
    conteudoNeuroA: string | null
    dataHora: string | null
    tempo: string | null
  }

  export type AtendimentoCountAggregateOutputType = {
    id: number
    id_agendamento: number
    id_paciente: number
    conteudoAtestado: number
    conteudoComparecimento: number
    conteudoEncaminhamento: number
    conteudoProntuario: number
    conteudoAnamineseI: number
    conteudoAnamineseA: number
    conteudoNeuroI: number
    conteudoNeuroA: number
    dataHora: number
    tempo: number
    _all: number
  }


  export type AtendimentoMinAggregateInputType = {
    id?: true
    id_agendamento?: true
    id_paciente?: true
    conteudoAtestado?: true
    conteudoComparecimento?: true
    conteudoEncaminhamento?: true
    conteudoProntuario?: true
    conteudoAnamineseI?: true
    conteudoAnamineseA?: true
    conteudoNeuroI?: true
    conteudoNeuroA?: true
    dataHora?: true
    tempo?: true
  }

  export type AtendimentoMaxAggregateInputType = {
    id?: true
    id_agendamento?: true
    id_paciente?: true
    conteudoAtestado?: true
    conteudoComparecimento?: true
    conteudoEncaminhamento?: true
    conteudoProntuario?: true
    conteudoAnamineseI?: true
    conteudoAnamineseA?: true
    conteudoNeuroI?: true
    conteudoNeuroA?: true
    dataHora?: true
    tempo?: true
  }

  export type AtendimentoCountAggregateInputType = {
    id?: true
    id_agendamento?: true
    id_paciente?: true
    conteudoAtestado?: true
    conteudoComparecimento?: true
    conteudoEncaminhamento?: true
    conteudoProntuario?: true
    conteudoAnamineseI?: true
    conteudoAnamineseA?: true
    conteudoNeuroI?: true
    conteudoNeuroA?: true
    dataHora?: true
    tempo?: true
    _all?: true
  }

  export type AtendimentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Atendimento to aggregate.
     */
    where?: AtendimentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Atendimentos to fetch.
     */
    orderBy?: AtendimentoOrderByWithRelationInput | AtendimentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AtendimentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Atendimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Atendimentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Atendimentos
    **/
    _count?: true | AtendimentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AtendimentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AtendimentoMaxAggregateInputType
  }

  export type GetAtendimentoAggregateType<T extends AtendimentoAggregateArgs> = {
        [P in keyof T & keyof AggregateAtendimento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAtendimento[P]>
      : GetScalarType<T[P], AggregateAtendimento[P]>
  }




  export type AtendimentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AtendimentoWhereInput
    orderBy?: AtendimentoOrderByWithAggregationInput | AtendimentoOrderByWithAggregationInput[]
    by: AtendimentoScalarFieldEnum[] | AtendimentoScalarFieldEnum
    having?: AtendimentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AtendimentoCountAggregateInputType | true
    _min?: AtendimentoMinAggregateInputType
    _max?: AtendimentoMaxAggregateInputType
  }

  export type AtendimentoGroupByOutputType = {
    id: string
    id_agendamento: string
    id_paciente: string
    conteudoAtestado: string
    conteudoComparecimento: string
    conteudoEncaminhamento: string
    conteudoProntuario: string
    conteudoAnamineseI: string
    conteudoAnamineseA: string
    conteudoNeuroI: string
    conteudoNeuroA: string
    dataHora: string
    tempo: string
    _count: AtendimentoCountAggregateOutputType | null
    _min: AtendimentoMinAggregateOutputType | null
    _max: AtendimentoMaxAggregateOutputType | null
  }

  type GetAtendimentoGroupByPayload<T extends AtendimentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AtendimentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AtendimentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AtendimentoGroupByOutputType[P]>
            : GetScalarType<T[P], AtendimentoGroupByOutputType[P]>
        }
      >
    >


  export type AtendimentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_agendamento?: boolean
    id_paciente?: boolean
    conteudoAtestado?: boolean
    conteudoComparecimento?: boolean
    conteudoEncaminhamento?: boolean
    conteudoProntuario?: boolean
    conteudoAnamineseI?: boolean
    conteudoAnamineseA?: boolean
    conteudoNeuroI?: boolean
    conteudoNeuroA?: boolean
    dataHora?: boolean
    tempo?: boolean
  }, ExtArgs["result"]["atendimento"]>

  export type AtendimentoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_agendamento?: boolean
    id_paciente?: boolean
    conteudoAtestado?: boolean
    conteudoComparecimento?: boolean
    conteudoEncaminhamento?: boolean
    conteudoProntuario?: boolean
    conteudoAnamineseI?: boolean
    conteudoAnamineseA?: boolean
    conteudoNeuroI?: boolean
    conteudoNeuroA?: boolean
    dataHora?: boolean
    tempo?: boolean
  }, ExtArgs["result"]["atendimento"]>


  export type AtendimentoSelectScalar = {
    id?: boolean
    id_agendamento?: boolean
    id_paciente?: boolean
    conteudoAtestado?: boolean
    conteudoComparecimento?: boolean
    conteudoEncaminhamento?: boolean
    conteudoProntuario?: boolean
    conteudoAnamineseI?: boolean
    conteudoAnamineseA?: boolean
    conteudoNeuroI?: boolean
    conteudoNeuroA?: boolean
    dataHora?: boolean
    tempo?: boolean
  }

  export type AtendimentoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "id_agendamento" | "id_paciente" | "conteudoAtestado" | "conteudoComparecimento" | "conteudoEncaminhamento" | "conteudoProntuario" | "conteudoAnamineseI" | "conteudoAnamineseA" | "conteudoNeuroI" | "conteudoNeuroA" | "dataHora" | "tempo", ExtArgs["result"]["atendimento"]>

  export type $AtendimentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Atendimento"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      id_agendamento: string
      id_paciente: string
      conteudoAtestado: string
      conteudoComparecimento: string
      conteudoEncaminhamento: string
      conteudoProntuario: string
      conteudoAnamineseI: string
      conteudoAnamineseA: string
      conteudoNeuroI: string
      conteudoNeuroA: string
      dataHora: string
      tempo: string
    }, ExtArgs["result"]["atendimento"]>
    composites: {}
  }

  type AtendimentoGetPayload<S extends boolean | null | undefined | AtendimentoDefaultArgs> = $Result.GetResult<Prisma.$AtendimentoPayload, S>

  type AtendimentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AtendimentoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AtendimentoCountAggregateInputType | true
    }

  export interface AtendimentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Atendimento'], meta: { name: 'Atendimento' } }
    /**
     * Find zero or one Atendimento that matches the filter.
     * @param {AtendimentoFindUniqueArgs} args - Arguments to find a Atendimento
     * @example
     * // Get one Atendimento
     * const atendimento = await prisma.atendimento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AtendimentoFindUniqueArgs>(args: SelectSubset<T, AtendimentoFindUniqueArgs<ExtArgs>>): Prisma__AtendimentoClient<$Result.GetResult<Prisma.$AtendimentoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Atendimento that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AtendimentoFindUniqueOrThrowArgs} args - Arguments to find a Atendimento
     * @example
     * // Get one Atendimento
     * const atendimento = await prisma.atendimento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AtendimentoFindUniqueOrThrowArgs>(args: SelectSubset<T, AtendimentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AtendimentoClient<$Result.GetResult<Prisma.$AtendimentoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Atendimento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AtendimentoFindFirstArgs} args - Arguments to find a Atendimento
     * @example
     * // Get one Atendimento
     * const atendimento = await prisma.atendimento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AtendimentoFindFirstArgs>(args?: SelectSubset<T, AtendimentoFindFirstArgs<ExtArgs>>): Prisma__AtendimentoClient<$Result.GetResult<Prisma.$AtendimentoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Atendimento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AtendimentoFindFirstOrThrowArgs} args - Arguments to find a Atendimento
     * @example
     * // Get one Atendimento
     * const atendimento = await prisma.atendimento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AtendimentoFindFirstOrThrowArgs>(args?: SelectSubset<T, AtendimentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__AtendimentoClient<$Result.GetResult<Prisma.$AtendimentoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Atendimentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AtendimentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Atendimentos
     * const atendimentos = await prisma.atendimento.findMany()
     * 
     * // Get first 10 Atendimentos
     * const atendimentos = await prisma.atendimento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const atendimentoWithIdOnly = await prisma.atendimento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AtendimentoFindManyArgs>(args?: SelectSubset<T, AtendimentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AtendimentoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Atendimento.
     * @param {AtendimentoCreateArgs} args - Arguments to create a Atendimento.
     * @example
     * // Create one Atendimento
     * const Atendimento = await prisma.atendimento.create({
     *   data: {
     *     // ... data to create a Atendimento
     *   }
     * })
     * 
     */
    create<T extends AtendimentoCreateArgs>(args: SelectSubset<T, AtendimentoCreateArgs<ExtArgs>>): Prisma__AtendimentoClient<$Result.GetResult<Prisma.$AtendimentoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Atendimentos.
     * @param {AtendimentoCreateManyArgs} args - Arguments to create many Atendimentos.
     * @example
     * // Create many Atendimentos
     * const atendimento = await prisma.atendimento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AtendimentoCreateManyArgs>(args?: SelectSubset<T, AtendimentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Atendimentos and returns the data saved in the database.
     * @param {AtendimentoCreateManyAndReturnArgs} args - Arguments to create many Atendimentos.
     * @example
     * // Create many Atendimentos
     * const atendimento = await prisma.atendimento.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Atendimentos and only return the `id`
     * const atendimentoWithIdOnly = await prisma.atendimento.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AtendimentoCreateManyAndReturnArgs>(args?: SelectSubset<T, AtendimentoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AtendimentoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Atendimento.
     * @param {AtendimentoDeleteArgs} args - Arguments to delete one Atendimento.
     * @example
     * // Delete one Atendimento
     * const Atendimento = await prisma.atendimento.delete({
     *   where: {
     *     // ... filter to delete one Atendimento
     *   }
     * })
     * 
     */
    delete<T extends AtendimentoDeleteArgs>(args: SelectSubset<T, AtendimentoDeleteArgs<ExtArgs>>): Prisma__AtendimentoClient<$Result.GetResult<Prisma.$AtendimentoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Atendimento.
     * @param {AtendimentoUpdateArgs} args - Arguments to update one Atendimento.
     * @example
     * // Update one Atendimento
     * const atendimento = await prisma.atendimento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AtendimentoUpdateArgs>(args: SelectSubset<T, AtendimentoUpdateArgs<ExtArgs>>): Prisma__AtendimentoClient<$Result.GetResult<Prisma.$AtendimentoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Atendimentos.
     * @param {AtendimentoDeleteManyArgs} args - Arguments to filter Atendimentos to delete.
     * @example
     * // Delete a few Atendimentos
     * const { count } = await prisma.atendimento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AtendimentoDeleteManyArgs>(args?: SelectSubset<T, AtendimentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Atendimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AtendimentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Atendimentos
     * const atendimento = await prisma.atendimento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AtendimentoUpdateManyArgs>(args: SelectSubset<T, AtendimentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Atendimento.
     * @param {AtendimentoUpsertArgs} args - Arguments to update or create a Atendimento.
     * @example
     * // Update or create a Atendimento
     * const atendimento = await prisma.atendimento.upsert({
     *   create: {
     *     // ... data to create a Atendimento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Atendimento we want to update
     *   }
     * })
     */
    upsert<T extends AtendimentoUpsertArgs>(args: SelectSubset<T, AtendimentoUpsertArgs<ExtArgs>>): Prisma__AtendimentoClient<$Result.GetResult<Prisma.$AtendimentoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Atendimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AtendimentoCountArgs} args - Arguments to filter Atendimentos to count.
     * @example
     * // Count the number of Atendimentos
     * const count = await prisma.atendimento.count({
     *   where: {
     *     // ... the filter for the Atendimentos we want to count
     *   }
     * })
    **/
    count<T extends AtendimentoCountArgs>(
      args?: Subset<T, AtendimentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AtendimentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Atendimento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AtendimentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AtendimentoAggregateArgs>(args: Subset<T, AtendimentoAggregateArgs>): Prisma.PrismaPromise<GetAtendimentoAggregateType<T>>

    /**
     * Group by Atendimento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AtendimentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AtendimentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AtendimentoGroupByArgs['orderBy'] }
        : { orderBy?: AtendimentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AtendimentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAtendimentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Atendimento model
   */
  readonly fields: AtendimentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Atendimento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AtendimentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Atendimento model
   */
  interface AtendimentoFieldRefs {
    readonly id: FieldRef<"Atendimento", 'String'>
    readonly id_agendamento: FieldRef<"Atendimento", 'String'>
    readonly id_paciente: FieldRef<"Atendimento", 'String'>
    readonly conteudoAtestado: FieldRef<"Atendimento", 'String'>
    readonly conteudoComparecimento: FieldRef<"Atendimento", 'String'>
    readonly conteudoEncaminhamento: FieldRef<"Atendimento", 'String'>
    readonly conteudoProntuario: FieldRef<"Atendimento", 'String'>
    readonly conteudoAnamineseI: FieldRef<"Atendimento", 'String'>
    readonly conteudoAnamineseA: FieldRef<"Atendimento", 'String'>
    readonly conteudoNeuroI: FieldRef<"Atendimento", 'String'>
    readonly conteudoNeuroA: FieldRef<"Atendimento", 'String'>
    readonly dataHora: FieldRef<"Atendimento", 'String'>
    readonly tempo: FieldRef<"Atendimento", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Atendimento findUnique
   */
  export type AtendimentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atendimento
     */
    select?: AtendimentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Atendimento
     */
    omit?: AtendimentoOmit<ExtArgs> | null
    /**
     * Filter, which Atendimento to fetch.
     */
    where: AtendimentoWhereUniqueInput
  }

  /**
   * Atendimento findUniqueOrThrow
   */
  export type AtendimentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atendimento
     */
    select?: AtendimentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Atendimento
     */
    omit?: AtendimentoOmit<ExtArgs> | null
    /**
     * Filter, which Atendimento to fetch.
     */
    where: AtendimentoWhereUniqueInput
  }

  /**
   * Atendimento findFirst
   */
  export type AtendimentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atendimento
     */
    select?: AtendimentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Atendimento
     */
    omit?: AtendimentoOmit<ExtArgs> | null
    /**
     * Filter, which Atendimento to fetch.
     */
    where?: AtendimentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Atendimentos to fetch.
     */
    orderBy?: AtendimentoOrderByWithRelationInput | AtendimentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Atendimentos.
     */
    cursor?: AtendimentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Atendimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Atendimentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Atendimentos.
     */
    distinct?: AtendimentoScalarFieldEnum | AtendimentoScalarFieldEnum[]
  }

  /**
   * Atendimento findFirstOrThrow
   */
  export type AtendimentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atendimento
     */
    select?: AtendimentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Atendimento
     */
    omit?: AtendimentoOmit<ExtArgs> | null
    /**
     * Filter, which Atendimento to fetch.
     */
    where?: AtendimentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Atendimentos to fetch.
     */
    orderBy?: AtendimentoOrderByWithRelationInput | AtendimentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Atendimentos.
     */
    cursor?: AtendimentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Atendimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Atendimentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Atendimentos.
     */
    distinct?: AtendimentoScalarFieldEnum | AtendimentoScalarFieldEnum[]
  }

  /**
   * Atendimento findMany
   */
  export type AtendimentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atendimento
     */
    select?: AtendimentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Atendimento
     */
    omit?: AtendimentoOmit<ExtArgs> | null
    /**
     * Filter, which Atendimentos to fetch.
     */
    where?: AtendimentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Atendimentos to fetch.
     */
    orderBy?: AtendimentoOrderByWithRelationInput | AtendimentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Atendimentos.
     */
    cursor?: AtendimentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Atendimentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Atendimentos.
     */
    skip?: number
    distinct?: AtendimentoScalarFieldEnum | AtendimentoScalarFieldEnum[]
  }

  /**
   * Atendimento create
   */
  export type AtendimentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atendimento
     */
    select?: AtendimentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Atendimento
     */
    omit?: AtendimentoOmit<ExtArgs> | null
    /**
     * The data needed to create a Atendimento.
     */
    data: XOR<AtendimentoCreateInput, AtendimentoUncheckedCreateInput>
  }

  /**
   * Atendimento createMany
   */
  export type AtendimentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Atendimentos.
     */
    data: AtendimentoCreateManyInput | AtendimentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Atendimento createManyAndReturn
   */
  export type AtendimentoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atendimento
     */
    select?: AtendimentoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Atendimento
     */
    omit?: AtendimentoOmit<ExtArgs> | null
    /**
     * The data used to create many Atendimentos.
     */
    data: AtendimentoCreateManyInput | AtendimentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Atendimento update
   */
  export type AtendimentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atendimento
     */
    select?: AtendimentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Atendimento
     */
    omit?: AtendimentoOmit<ExtArgs> | null
    /**
     * The data needed to update a Atendimento.
     */
    data: XOR<AtendimentoUpdateInput, AtendimentoUncheckedUpdateInput>
    /**
     * Choose, which Atendimento to update.
     */
    where: AtendimentoWhereUniqueInput
  }

  /**
   * Atendimento updateMany
   */
  export type AtendimentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Atendimentos.
     */
    data: XOR<AtendimentoUpdateManyMutationInput, AtendimentoUncheckedUpdateManyInput>
    /**
     * Filter which Atendimentos to update
     */
    where?: AtendimentoWhereInput
  }

  /**
   * Atendimento upsert
   */
  export type AtendimentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atendimento
     */
    select?: AtendimentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Atendimento
     */
    omit?: AtendimentoOmit<ExtArgs> | null
    /**
     * The filter to search for the Atendimento to update in case it exists.
     */
    where: AtendimentoWhereUniqueInput
    /**
     * In case the Atendimento found by the `where` argument doesn't exist, create a new Atendimento with this data.
     */
    create: XOR<AtendimentoCreateInput, AtendimentoUncheckedCreateInput>
    /**
     * In case the Atendimento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AtendimentoUpdateInput, AtendimentoUncheckedUpdateInput>
  }

  /**
   * Atendimento delete
   */
  export type AtendimentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atendimento
     */
    select?: AtendimentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Atendimento
     */
    omit?: AtendimentoOmit<ExtArgs> | null
    /**
     * Filter which Atendimento to delete.
     */
    where: AtendimentoWhereUniqueInput
  }

  /**
   * Atendimento deleteMany
   */
  export type AtendimentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Atendimentos to delete
     */
    where?: AtendimentoWhereInput
  }

  /**
   * Atendimento without action
   */
  export type AtendimentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Atendimento
     */
    select?: AtendimentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Atendimento
     */
    omit?: AtendimentoOmit<ExtArgs> | null
  }


  /**
   * Model Ajuda
   */

  export type AggregateAjuda = {
    _count: AjudaCountAggregateOutputType | null
    _min: AjudaMinAggregateOutputType | null
    _max: AjudaMaxAggregateOutputType | null
  }

  export type AjudaMinAggregateOutputType = {
    id: string | null
    tela: string | null
    descricao: string | null
    status: string | null
    criadoEm: Date | null
    especialista: string | null
  }

  export type AjudaMaxAggregateOutputType = {
    id: string | null
    tela: string | null
    descricao: string | null
    status: string | null
    criadoEm: Date | null
    especialista: string | null
  }

  export type AjudaCountAggregateOutputType = {
    id: number
    tela: number
    descricao: number
    status: number
    criadoEm: number
    especialista: number
    _all: number
  }


  export type AjudaMinAggregateInputType = {
    id?: true
    tela?: true
    descricao?: true
    status?: true
    criadoEm?: true
    especialista?: true
  }

  export type AjudaMaxAggregateInputType = {
    id?: true
    tela?: true
    descricao?: true
    status?: true
    criadoEm?: true
    especialista?: true
  }

  export type AjudaCountAggregateInputType = {
    id?: true
    tela?: true
    descricao?: true
    status?: true
    criadoEm?: true
    especialista?: true
    _all?: true
  }

  export type AjudaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ajuda to aggregate.
     */
    where?: AjudaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ajudas to fetch.
     */
    orderBy?: AjudaOrderByWithRelationInput | AjudaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AjudaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ajudas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ajudas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ajudas
    **/
    _count?: true | AjudaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AjudaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AjudaMaxAggregateInputType
  }

  export type GetAjudaAggregateType<T extends AjudaAggregateArgs> = {
        [P in keyof T & keyof AggregateAjuda]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAjuda[P]>
      : GetScalarType<T[P], AggregateAjuda[P]>
  }




  export type AjudaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AjudaWhereInput
    orderBy?: AjudaOrderByWithAggregationInput | AjudaOrderByWithAggregationInput[]
    by: AjudaScalarFieldEnum[] | AjudaScalarFieldEnum
    having?: AjudaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AjudaCountAggregateInputType | true
    _min?: AjudaMinAggregateInputType
    _max?: AjudaMaxAggregateInputType
  }

  export type AjudaGroupByOutputType = {
    id: string
    tela: string
    descricao: string
    status: string
    criadoEm: Date
    especialista: string
    _count: AjudaCountAggregateOutputType | null
    _min: AjudaMinAggregateOutputType | null
    _max: AjudaMaxAggregateOutputType | null
  }

  type GetAjudaGroupByPayload<T extends AjudaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AjudaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AjudaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AjudaGroupByOutputType[P]>
            : GetScalarType<T[P], AjudaGroupByOutputType[P]>
        }
      >
    >


  export type AjudaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tela?: boolean
    descricao?: boolean
    status?: boolean
    criadoEm?: boolean
    especialista?: boolean
  }, ExtArgs["result"]["ajuda"]>

  export type AjudaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tela?: boolean
    descricao?: boolean
    status?: boolean
    criadoEm?: boolean
    especialista?: boolean
  }, ExtArgs["result"]["ajuda"]>


  export type AjudaSelectScalar = {
    id?: boolean
    tela?: boolean
    descricao?: boolean
    status?: boolean
    criadoEm?: boolean
    especialista?: boolean
  }

  export type AjudaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tela" | "descricao" | "status" | "criadoEm" | "especialista", ExtArgs["result"]["ajuda"]>

  export type $AjudaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ajuda"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tela: string
      descricao: string
      status: string
      criadoEm: Date
      especialista: string
    }, ExtArgs["result"]["ajuda"]>
    composites: {}
  }

  type AjudaGetPayload<S extends boolean | null | undefined | AjudaDefaultArgs> = $Result.GetResult<Prisma.$AjudaPayload, S>

  type AjudaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AjudaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AjudaCountAggregateInputType | true
    }

  export interface AjudaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ajuda'], meta: { name: 'Ajuda' } }
    /**
     * Find zero or one Ajuda that matches the filter.
     * @param {AjudaFindUniqueArgs} args - Arguments to find a Ajuda
     * @example
     * // Get one Ajuda
     * const ajuda = await prisma.ajuda.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AjudaFindUniqueArgs>(args: SelectSubset<T, AjudaFindUniqueArgs<ExtArgs>>): Prisma__AjudaClient<$Result.GetResult<Prisma.$AjudaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ajuda that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AjudaFindUniqueOrThrowArgs} args - Arguments to find a Ajuda
     * @example
     * // Get one Ajuda
     * const ajuda = await prisma.ajuda.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AjudaFindUniqueOrThrowArgs>(args: SelectSubset<T, AjudaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AjudaClient<$Result.GetResult<Prisma.$AjudaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ajuda that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AjudaFindFirstArgs} args - Arguments to find a Ajuda
     * @example
     * // Get one Ajuda
     * const ajuda = await prisma.ajuda.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AjudaFindFirstArgs>(args?: SelectSubset<T, AjudaFindFirstArgs<ExtArgs>>): Prisma__AjudaClient<$Result.GetResult<Prisma.$AjudaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ajuda that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AjudaFindFirstOrThrowArgs} args - Arguments to find a Ajuda
     * @example
     * // Get one Ajuda
     * const ajuda = await prisma.ajuda.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AjudaFindFirstOrThrowArgs>(args?: SelectSubset<T, AjudaFindFirstOrThrowArgs<ExtArgs>>): Prisma__AjudaClient<$Result.GetResult<Prisma.$AjudaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ajudas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AjudaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ajudas
     * const ajudas = await prisma.ajuda.findMany()
     * 
     * // Get first 10 Ajudas
     * const ajudas = await prisma.ajuda.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ajudaWithIdOnly = await prisma.ajuda.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AjudaFindManyArgs>(args?: SelectSubset<T, AjudaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AjudaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ajuda.
     * @param {AjudaCreateArgs} args - Arguments to create a Ajuda.
     * @example
     * // Create one Ajuda
     * const Ajuda = await prisma.ajuda.create({
     *   data: {
     *     // ... data to create a Ajuda
     *   }
     * })
     * 
     */
    create<T extends AjudaCreateArgs>(args: SelectSubset<T, AjudaCreateArgs<ExtArgs>>): Prisma__AjudaClient<$Result.GetResult<Prisma.$AjudaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ajudas.
     * @param {AjudaCreateManyArgs} args - Arguments to create many Ajudas.
     * @example
     * // Create many Ajudas
     * const ajuda = await prisma.ajuda.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AjudaCreateManyArgs>(args?: SelectSubset<T, AjudaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ajudas and returns the data saved in the database.
     * @param {AjudaCreateManyAndReturnArgs} args - Arguments to create many Ajudas.
     * @example
     * // Create many Ajudas
     * const ajuda = await prisma.ajuda.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ajudas and only return the `id`
     * const ajudaWithIdOnly = await prisma.ajuda.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AjudaCreateManyAndReturnArgs>(args?: SelectSubset<T, AjudaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AjudaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ajuda.
     * @param {AjudaDeleteArgs} args - Arguments to delete one Ajuda.
     * @example
     * // Delete one Ajuda
     * const Ajuda = await prisma.ajuda.delete({
     *   where: {
     *     // ... filter to delete one Ajuda
     *   }
     * })
     * 
     */
    delete<T extends AjudaDeleteArgs>(args: SelectSubset<T, AjudaDeleteArgs<ExtArgs>>): Prisma__AjudaClient<$Result.GetResult<Prisma.$AjudaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ajuda.
     * @param {AjudaUpdateArgs} args - Arguments to update one Ajuda.
     * @example
     * // Update one Ajuda
     * const ajuda = await prisma.ajuda.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AjudaUpdateArgs>(args: SelectSubset<T, AjudaUpdateArgs<ExtArgs>>): Prisma__AjudaClient<$Result.GetResult<Prisma.$AjudaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ajudas.
     * @param {AjudaDeleteManyArgs} args - Arguments to filter Ajudas to delete.
     * @example
     * // Delete a few Ajudas
     * const { count } = await prisma.ajuda.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AjudaDeleteManyArgs>(args?: SelectSubset<T, AjudaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ajudas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AjudaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ajudas
     * const ajuda = await prisma.ajuda.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AjudaUpdateManyArgs>(args: SelectSubset<T, AjudaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ajuda.
     * @param {AjudaUpsertArgs} args - Arguments to update or create a Ajuda.
     * @example
     * // Update or create a Ajuda
     * const ajuda = await prisma.ajuda.upsert({
     *   create: {
     *     // ... data to create a Ajuda
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ajuda we want to update
     *   }
     * })
     */
    upsert<T extends AjudaUpsertArgs>(args: SelectSubset<T, AjudaUpsertArgs<ExtArgs>>): Prisma__AjudaClient<$Result.GetResult<Prisma.$AjudaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ajudas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AjudaCountArgs} args - Arguments to filter Ajudas to count.
     * @example
     * // Count the number of Ajudas
     * const count = await prisma.ajuda.count({
     *   where: {
     *     // ... the filter for the Ajudas we want to count
     *   }
     * })
    **/
    count<T extends AjudaCountArgs>(
      args?: Subset<T, AjudaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AjudaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ajuda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AjudaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AjudaAggregateArgs>(args: Subset<T, AjudaAggregateArgs>): Prisma.PrismaPromise<GetAjudaAggregateType<T>>

    /**
     * Group by Ajuda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AjudaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AjudaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AjudaGroupByArgs['orderBy'] }
        : { orderBy?: AjudaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AjudaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAjudaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ajuda model
   */
  readonly fields: AjudaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ajuda.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AjudaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ajuda model
   */
  interface AjudaFieldRefs {
    readonly id: FieldRef<"Ajuda", 'String'>
    readonly tela: FieldRef<"Ajuda", 'String'>
    readonly descricao: FieldRef<"Ajuda", 'String'>
    readonly status: FieldRef<"Ajuda", 'String'>
    readonly criadoEm: FieldRef<"Ajuda", 'DateTime'>
    readonly especialista: FieldRef<"Ajuda", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Ajuda findUnique
   */
  export type AjudaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ajuda
     */
    select?: AjudaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ajuda
     */
    omit?: AjudaOmit<ExtArgs> | null
    /**
     * Filter, which Ajuda to fetch.
     */
    where: AjudaWhereUniqueInput
  }

  /**
   * Ajuda findUniqueOrThrow
   */
  export type AjudaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ajuda
     */
    select?: AjudaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ajuda
     */
    omit?: AjudaOmit<ExtArgs> | null
    /**
     * Filter, which Ajuda to fetch.
     */
    where: AjudaWhereUniqueInput
  }

  /**
   * Ajuda findFirst
   */
  export type AjudaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ajuda
     */
    select?: AjudaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ajuda
     */
    omit?: AjudaOmit<ExtArgs> | null
    /**
     * Filter, which Ajuda to fetch.
     */
    where?: AjudaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ajudas to fetch.
     */
    orderBy?: AjudaOrderByWithRelationInput | AjudaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ajudas.
     */
    cursor?: AjudaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ajudas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ajudas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ajudas.
     */
    distinct?: AjudaScalarFieldEnum | AjudaScalarFieldEnum[]
  }

  /**
   * Ajuda findFirstOrThrow
   */
  export type AjudaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ajuda
     */
    select?: AjudaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ajuda
     */
    omit?: AjudaOmit<ExtArgs> | null
    /**
     * Filter, which Ajuda to fetch.
     */
    where?: AjudaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ajudas to fetch.
     */
    orderBy?: AjudaOrderByWithRelationInput | AjudaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ajudas.
     */
    cursor?: AjudaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ajudas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ajudas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ajudas.
     */
    distinct?: AjudaScalarFieldEnum | AjudaScalarFieldEnum[]
  }

  /**
   * Ajuda findMany
   */
  export type AjudaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ajuda
     */
    select?: AjudaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ajuda
     */
    omit?: AjudaOmit<ExtArgs> | null
    /**
     * Filter, which Ajudas to fetch.
     */
    where?: AjudaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ajudas to fetch.
     */
    orderBy?: AjudaOrderByWithRelationInput | AjudaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ajudas.
     */
    cursor?: AjudaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ajudas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ajudas.
     */
    skip?: number
    distinct?: AjudaScalarFieldEnum | AjudaScalarFieldEnum[]
  }

  /**
   * Ajuda create
   */
  export type AjudaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ajuda
     */
    select?: AjudaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ajuda
     */
    omit?: AjudaOmit<ExtArgs> | null
    /**
     * The data needed to create a Ajuda.
     */
    data: XOR<AjudaCreateInput, AjudaUncheckedCreateInput>
  }

  /**
   * Ajuda createMany
   */
  export type AjudaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ajudas.
     */
    data: AjudaCreateManyInput | AjudaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ajuda createManyAndReturn
   */
  export type AjudaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ajuda
     */
    select?: AjudaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ajuda
     */
    omit?: AjudaOmit<ExtArgs> | null
    /**
     * The data used to create many Ajudas.
     */
    data: AjudaCreateManyInput | AjudaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ajuda update
   */
  export type AjudaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ajuda
     */
    select?: AjudaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ajuda
     */
    omit?: AjudaOmit<ExtArgs> | null
    /**
     * The data needed to update a Ajuda.
     */
    data: XOR<AjudaUpdateInput, AjudaUncheckedUpdateInput>
    /**
     * Choose, which Ajuda to update.
     */
    where: AjudaWhereUniqueInput
  }

  /**
   * Ajuda updateMany
   */
  export type AjudaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ajudas.
     */
    data: XOR<AjudaUpdateManyMutationInput, AjudaUncheckedUpdateManyInput>
    /**
     * Filter which Ajudas to update
     */
    where?: AjudaWhereInput
  }

  /**
   * Ajuda upsert
   */
  export type AjudaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ajuda
     */
    select?: AjudaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ajuda
     */
    omit?: AjudaOmit<ExtArgs> | null
    /**
     * The filter to search for the Ajuda to update in case it exists.
     */
    where: AjudaWhereUniqueInput
    /**
     * In case the Ajuda found by the `where` argument doesn't exist, create a new Ajuda with this data.
     */
    create: XOR<AjudaCreateInput, AjudaUncheckedCreateInput>
    /**
     * In case the Ajuda was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AjudaUpdateInput, AjudaUncheckedUpdateInput>
  }

  /**
   * Ajuda delete
   */
  export type AjudaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ajuda
     */
    select?: AjudaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ajuda
     */
    omit?: AjudaOmit<ExtArgs> | null
    /**
     * Filter which Ajuda to delete.
     */
    where: AjudaWhereUniqueInput
  }

  /**
   * Ajuda deleteMany
   */
  export type AjudaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ajudas to delete
     */
    where?: AjudaWhereInput
  }

  /**
   * Ajuda without action
   */
  export type AjudaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ajuda
     */
    select?: AjudaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ajuda
     */
    omit?: AjudaOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const MessagesScalarFieldEnum: {
    id: 'id',
    from: 'from',
    to: 'to',
    content: 'content',
    createdAt: 'createdAt',
    visualizado: 'visualizado'
  };

  export type MessagesScalarFieldEnum = (typeof MessagesScalarFieldEnum)[keyof typeof MessagesScalarFieldEnum]


  export const Cadastro_pacientesScalarFieldEnum: {
    id: 'id',
    Nome: 'Nome',
    Telefone: 'Telefone',
    Email: 'Email',
    Data_de_Nascimento: 'Data_de_Nascimento',
    Idade: 'Idade',
    Genero: 'Genero',
    CPF_CNPJ: 'CPF_CNPJ',
    Endereco: 'Endereco',
    Numero: 'Numero',
    CEP: 'CEP',
    Cidade: 'Cidade',
    Estado: 'Estado',
    Nome_do_Pai_ou_Responsavel: 'Nome_do_Pai_ou_Responsavel',
    Telefone_Pai: 'Telefone_Pai',
    Nome_da_Mae_ou_Responsavel: 'Nome_da_Mae_ou_Responsavel',
    Telefone_Mae: 'Telefone_Mae',
    Especialista: 'Especialista',
    recoveryCode: 'recoveryCode',
    Eh_Crianca: 'Eh_Crianca'
  };

  export type Cadastro_pacientesScalarFieldEnum = (typeof Cadastro_pacientesScalarFieldEnum)[keyof typeof Cadastro_pacientesScalarFieldEnum]


  export const AgendamentoScalarFieldEnum: {
    id: 'id',
    Nome: 'Nome',
    Telefone: 'Telefone',
    Especialista: 'Especialista',
    Data_do_Atendimento: 'Data_do_Atendimento',
    Horario_da_consulta: 'Horario_da_consulta',
    Horario_de_Termino_da_consulta: 'Horario_de_Termino_da_consulta',
    Valor_da_Consulta: 'Valor_da_Consulta',
    Status_da_Consulta: 'Status_da_Consulta',
    Status_do_pagamento: 'Status_do_pagamento',
    observacao: 'observacao',
    recoveryCode: 'recoveryCode',
    Eh_Aluno: 'Eh_Aluno'
  };

  export type AgendamentoScalarFieldEnum = (typeof AgendamentoScalarFieldEnum)[keyof typeof AgendamentoScalarFieldEnum]


  export const Cadastro_convenioScalarFieldEnum: {
    id: 'id',
    Nome_do_Convenio: 'Nome_do_Convenio',
    CNPJ: 'CNPJ',
    Valores: 'Valores',
    Data_de_Contratacao: 'Data_de_Contratacao'
  };

  export type Cadastro_convenioScalarFieldEnum = (typeof Cadastro_convenioScalarFieldEnum)[keyof typeof Cadastro_convenioScalarFieldEnum]


  export const Cadastro_userScalarFieldEnum: {
    id: 'id',
    Nome: 'Nome',
    Email: 'Email',
    Usuario: 'Usuario',
    Senha: 'Senha',
    recoveryCode: 'recoveryCode',
    Profissional: 'Profissional',
    Secretaria: 'Secretaria',
    foto: 'foto'
  };

  export type Cadastro_userScalarFieldEnum = (typeof Cadastro_userScalarFieldEnum)[keyof typeof Cadastro_userScalarFieldEnum]


  export const Fluxo_de_caixaScalarFieldEnum: {
    id: 'id',
    Descricao: 'Descricao',
    Valor: 'Valor',
    Tipo: 'Tipo',
    Data: 'Data',
    Especialista: 'Especialista'
  };

  export type Fluxo_de_caixaScalarFieldEnum = (typeof Fluxo_de_caixaScalarFieldEnum)[keyof typeof Fluxo_de_caixaScalarFieldEnum]


  export const EsperaScalarFieldEnum: {
    id: 'id',
    Nome: 'Nome',
    Telefone: 'Telefone',
    Convenio: 'Convenio',
    Especialista: 'Especialista',
    Observacao: 'Observacao'
  };

  export type EsperaScalarFieldEnum = (typeof EsperaScalarFieldEnum)[keyof typeof EsperaScalarFieldEnum]


  export const Cadastro_profScalarFieldEnum: {
    id: 'id',
    Nome: 'Nome',
    Faixa_Etaria_de_Atendimento: 'Faixa_Etaria_de_Atendimento',
    Dias_de_Atendimento: 'Dias_de_Atendimento',
    Horarios_de_Atendimento: 'Horarios_de_Atendimento',
    Especialidade: 'Especialidade',
    Registro_do_Profissional: 'Registro_do_Profissional',
    Especialista: 'Especialista'
  };

  export type Cadastro_profScalarFieldEnum = (typeof Cadastro_profScalarFieldEnum)[keyof typeof Cadastro_profScalarFieldEnum]


  export const AtendimentoScalarFieldEnum: {
    id: 'id',
    id_agendamento: 'id_agendamento',
    id_paciente: 'id_paciente',
    conteudoAtestado: 'conteudoAtestado',
    conteudoComparecimento: 'conteudoComparecimento',
    conteudoEncaminhamento: 'conteudoEncaminhamento',
    conteudoProntuario: 'conteudoProntuario',
    conteudoAnamineseI: 'conteudoAnamineseI',
    conteudoAnamineseA: 'conteudoAnamineseA',
    conteudoNeuroI: 'conteudoNeuroI',
    conteudoNeuroA: 'conteudoNeuroA',
    dataHora: 'dataHora',
    tempo: 'tempo'
  };

  export type AtendimentoScalarFieldEnum = (typeof AtendimentoScalarFieldEnum)[keyof typeof AtendimentoScalarFieldEnum]


  export const AjudaScalarFieldEnum: {
    id: 'id',
    tela: 'tela',
    descricao: 'descricao',
    status: 'status',
    criadoEm: 'criadoEm',
    especialista: 'especialista'
  };

  export type AjudaScalarFieldEnum = (typeof AjudaScalarFieldEnum)[keyof typeof AjudaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type MessagesWhereInput = {
    AND?: MessagesWhereInput | MessagesWhereInput[]
    OR?: MessagesWhereInput[]
    NOT?: MessagesWhereInput | MessagesWhereInput[]
    id?: StringFilter<"Messages"> | string
    from?: StringFilter<"Messages"> | string
    to?: StringFilter<"Messages"> | string
    content?: StringFilter<"Messages"> | string
    createdAt?: DateTimeFilter<"Messages"> | Date | string
    visualizado?: BoolFilter<"Messages"> | boolean
  }

  export type MessagesOrderByWithRelationInput = {
    id?: SortOrder
    from?: SortOrder
    to?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    visualizado?: SortOrder
  }

  export type MessagesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessagesWhereInput | MessagesWhereInput[]
    OR?: MessagesWhereInput[]
    NOT?: MessagesWhereInput | MessagesWhereInput[]
    from?: StringFilter<"Messages"> | string
    to?: StringFilter<"Messages"> | string
    content?: StringFilter<"Messages"> | string
    createdAt?: DateTimeFilter<"Messages"> | Date | string
    visualizado?: BoolFilter<"Messages"> | boolean
  }, "id">

  export type MessagesOrderByWithAggregationInput = {
    id?: SortOrder
    from?: SortOrder
    to?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    visualizado?: SortOrder
    _count?: MessagesCountOrderByAggregateInput
    _max?: MessagesMaxOrderByAggregateInput
    _min?: MessagesMinOrderByAggregateInput
  }

  export type MessagesScalarWhereWithAggregatesInput = {
    AND?: MessagesScalarWhereWithAggregatesInput | MessagesScalarWhereWithAggregatesInput[]
    OR?: MessagesScalarWhereWithAggregatesInput[]
    NOT?: MessagesScalarWhereWithAggregatesInput | MessagesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Messages"> | string
    from?: StringWithAggregatesFilter<"Messages"> | string
    to?: StringWithAggregatesFilter<"Messages"> | string
    content?: StringWithAggregatesFilter<"Messages"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Messages"> | Date | string
    visualizado?: BoolWithAggregatesFilter<"Messages"> | boolean
  }

  export type Cadastro_pacientesWhereInput = {
    AND?: Cadastro_pacientesWhereInput | Cadastro_pacientesWhereInput[]
    OR?: Cadastro_pacientesWhereInput[]
    NOT?: Cadastro_pacientesWhereInput | Cadastro_pacientesWhereInput[]
    id?: StringFilter<"Cadastro_pacientes"> | string
    Nome?: StringFilter<"Cadastro_pacientes"> | string
    Telefone?: StringFilter<"Cadastro_pacientes"> | string
    Email?: StringFilter<"Cadastro_pacientes"> | string
    Data_de_Nascimento?: StringFilter<"Cadastro_pacientes"> | string
    Idade?: StringFilter<"Cadastro_pacientes"> | string
    Genero?: StringFilter<"Cadastro_pacientes"> | string
    CPF_CNPJ?: StringFilter<"Cadastro_pacientes"> | string
    Endereco?: StringFilter<"Cadastro_pacientes"> | string
    Numero?: StringFilter<"Cadastro_pacientes"> | string
    CEP?: StringFilter<"Cadastro_pacientes"> | string
    Cidade?: StringFilter<"Cadastro_pacientes"> | string
    Estado?: StringFilter<"Cadastro_pacientes"> | string
    Nome_do_Pai_ou_Responsavel?: StringFilter<"Cadastro_pacientes"> | string
    Telefone_Pai?: StringFilter<"Cadastro_pacientes"> | string
    Nome_da_Mae_ou_Responsavel?: StringFilter<"Cadastro_pacientes"> | string
    Telefone_Mae?: StringFilter<"Cadastro_pacientes"> | string
    Especialista?: StringFilter<"Cadastro_pacientes"> | string
    recoveryCode?: IntNullableFilter<"Cadastro_pacientes"> | number | null
    Eh_Crianca?: BoolFilter<"Cadastro_pacientes"> | boolean
  }

  export type Cadastro_pacientesOrderByWithRelationInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Email?: SortOrder
    Data_de_Nascimento?: SortOrder
    Idade?: SortOrder
    Genero?: SortOrder
    CPF_CNPJ?: SortOrder
    Endereco?: SortOrder
    Numero?: SortOrder
    CEP?: SortOrder
    Cidade?: SortOrder
    Estado?: SortOrder
    Nome_do_Pai_ou_Responsavel?: SortOrder
    Telefone_Pai?: SortOrder
    Nome_da_Mae_ou_Responsavel?: SortOrder
    Telefone_Mae?: SortOrder
    Especialista?: SortOrder
    recoveryCode?: SortOrderInput | SortOrder
    Eh_Crianca?: SortOrder
  }

  export type Cadastro_pacientesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Cadastro_pacientesWhereInput | Cadastro_pacientesWhereInput[]
    OR?: Cadastro_pacientesWhereInput[]
    NOT?: Cadastro_pacientesWhereInput | Cadastro_pacientesWhereInput[]
    Nome?: StringFilter<"Cadastro_pacientes"> | string
    Telefone?: StringFilter<"Cadastro_pacientes"> | string
    Email?: StringFilter<"Cadastro_pacientes"> | string
    Data_de_Nascimento?: StringFilter<"Cadastro_pacientes"> | string
    Idade?: StringFilter<"Cadastro_pacientes"> | string
    Genero?: StringFilter<"Cadastro_pacientes"> | string
    CPF_CNPJ?: StringFilter<"Cadastro_pacientes"> | string
    Endereco?: StringFilter<"Cadastro_pacientes"> | string
    Numero?: StringFilter<"Cadastro_pacientes"> | string
    CEP?: StringFilter<"Cadastro_pacientes"> | string
    Cidade?: StringFilter<"Cadastro_pacientes"> | string
    Estado?: StringFilter<"Cadastro_pacientes"> | string
    Nome_do_Pai_ou_Responsavel?: StringFilter<"Cadastro_pacientes"> | string
    Telefone_Pai?: StringFilter<"Cadastro_pacientes"> | string
    Nome_da_Mae_ou_Responsavel?: StringFilter<"Cadastro_pacientes"> | string
    Telefone_Mae?: StringFilter<"Cadastro_pacientes"> | string
    Especialista?: StringFilter<"Cadastro_pacientes"> | string
    recoveryCode?: IntNullableFilter<"Cadastro_pacientes"> | number | null
    Eh_Crianca?: BoolFilter<"Cadastro_pacientes"> | boolean
  }, "id">

  export type Cadastro_pacientesOrderByWithAggregationInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Email?: SortOrder
    Data_de_Nascimento?: SortOrder
    Idade?: SortOrder
    Genero?: SortOrder
    CPF_CNPJ?: SortOrder
    Endereco?: SortOrder
    Numero?: SortOrder
    CEP?: SortOrder
    Cidade?: SortOrder
    Estado?: SortOrder
    Nome_do_Pai_ou_Responsavel?: SortOrder
    Telefone_Pai?: SortOrder
    Nome_da_Mae_ou_Responsavel?: SortOrder
    Telefone_Mae?: SortOrder
    Especialista?: SortOrder
    recoveryCode?: SortOrderInput | SortOrder
    Eh_Crianca?: SortOrder
    _count?: Cadastro_pacientesCountOrderByAggregateInput
    _avg?: Cadastro_pacientesAvgOrderByAggregateInput
    _max?: Cadastro_pacientesMaxOrderByAggregateInput
    _min?: Cadastro_pacientesMinOrderByAggregateInput
    _sum?: Cadastro_pacientesSumOrderByAggregateInput
  }

  export type Cadastro_pacientesScalarWhereWithAggregatesInput = {
    AND?: Cadastro_pacientesScalarWhereWithAggregatesInput | Cadastro_pacientesScalarWhereWithAggregatesInput[]
    OR?: Cadastro_pacientesScalarWhereWithAggregatesInput[]
    NOT?: Cadastro_pacientesScalarWhereWithAggregatesInput | Cadastro_pacientesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Nome?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Telefone?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Email?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Data_de_Nascimento?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Idade?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Genero?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    CPF_CNPJ?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Endereco?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Numero?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    CEP?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Cidade?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Estado?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Nome_do_Pai_ou_Responsavel?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Telefone_Pai?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Nome_da_Mae_ou_Responsavel?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Telefone_Mae?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    Especialista?: StringWithAggregatesFilter<"Cadastro_pacientes"> | string
    recoveryCode?: IntNullableWithAggregatesFilter<"Cadastro_pacientes"> | number | null
    Eh_Crianca?: BoolWithAggregatesFilter<"Cadastro_pacientes"> | boolean
  }

  export type AgendamentoWhereInput = {
    AND?: AgendamentoWhereInput | AgendamentoWhereInput[]
    OR?: AgendamentoWhereInput[]
    NOT?: AgendamentoWhereInput | AgendamentoWhereInput[]
    id?: StringFilter<"Agendamento"> | string
    Nome?: StringFilter<"Agendamento"> | string
    Telefone?: StringFilter<"Agendamento"> | string
    Especialista?: StringFilter<"Agendamento"> | string
    Data_do_Atendimento?: StringFilter<"Agendamento"> | string
    Horario_da_consulta?: StringFilter<"Agendamento"> | string
    Horario_de_Termino_da_consulta?: StringFilter<"Agendamento"> | string
    Valor_da_Consulta?: FloatNullableFilter<"Agendamento"> | number | null
    Status_da_Consulta?: StringFilter<"Agendamento"> | string
    Status_do_pagamento?: StringFilter<"Agendamento"> | string
    observacao?: StringFilter<"Agendamento"> | string
    recoveryCode?: IntNullableFilter<"Agendamento"> | number | null
    Eh_Aluno?: BoolFilter<"Agendamento"> | boolean
  }

  export type AgendamentoOrderByWithRelationInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Especialista?: SortOrder
    Data_do_Atendimento?: SortOrder
    Horario_da_consulta?: SortOrder
    Horario_de_Termino_da_consulta?: SortOrder
    Valor_da_Consulta?: SortOrderInput | SortOrder
    Status_da_Consulta?: SortOrder
    Status_do_pagamento?: SortOrder
    observacao?: SortOrder
    recoveryCode?: SortOrderInput | SortOrder
    Eh_Aluno?: SortOrder
  }

  export type AgendamentoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AgendamentoWhereInput | AgendamentoWhereInput[]
    OR?: AgendamentoWhereInput[]
    NOT?: AgendamentoWhereInput | AgendamentoWhereInput[]
    Nome?: StringFilter<"Agendamento"> | string
    Telefone?: StringFilter<"Agendamento"> | string
    Especialista?: StringFilter<"Agendamento"> | string
    Data_do_Atendimento?: StringFilter<"Agendamento"> | string
    Horario_da_consulta?: StringFilter<"Agendamento"> | string
    Horario_de_Termino_da_consulta?: StringFilter<"Agendamento"> | string
    Valor_da_Consulta?: FloatNullableFilter<"Agendamento"> | number | null
    Status_da_Consulta?: StringFilter<"Agendamento"> | string
    Status_do_pagamento?: StringFilter<"Agendamento"> | string
    observacao?: StringFilter<"Agendamento"> | string
    recoveryCode?: IntNullableFilter<"Agendamento"> | number | null
    Eh_Aluno?: BoolFilter<"Agendamento"> | boolean
  }, "id">

  export type AgendamentoOrderByWithAggregationInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Especialista?: SortOrder
    Data_do_Atendimento?: SortOrder
    Horario_da_consulta?: SortOrder
    Horario_de_Termino_da_consulta?: SortOrder
    Valor_da_Consulta?: SortOrderInput | SortOrder
    Status_da_Consulta?: SortOrder
    Status_do_pagamento?: SortOrder
    observacao?: SortOrder
    recoveryCode?: SortOrderInput | SortOrder
    Eh_Aluno?: SortOrder
    _count?: AgendamentoCountOrderByAggregateInput
    _avg?: AgendamentoAvgOrderByAggregateInput
    _max?: AgendamentoMaxOrderByAggregateInput
    _min?: AgendamentoMinOrderByAggregateInput
    _sum?: AgendamentoSumOrderByAggregateInput
  }

  export type AgendamentoScalarWhereWithAggregatesInput = {
    AND?: AgendamentoScalarWhereWithAggregatesInput | AgendamentoScalarWhereWithAggregatesInput[]
    OR?: AgendamentoScalarWhereWithAggregatesInput[]
    NOT?: AgendamentoScalarWhereWithAggregatesInput | AgendamentoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Agendamento"> | string
    Nome?: StringWithAggregatesFilter<"Agendamento"> | string
    Telefone?: StringWithAggregatesFilter<"Agendamento"> | string
    Especialista?: StringWithAggregatesFilter<"Agendamento"> | string
    Data_do_Atendimento?: StringWithAggregatesFilter<"Agendamento"> | string
    Horario_da_consulta?: StringWithAggregatesFilter<"Agendamento"> | string
    Horario_de_Termino_da_consulta?: StringWithAggregatesFilter<"Agendamento"> | string
    Valor_da_Consulta?: FloatNullableWithAggregatesFilter<"Agendamento"> | number | null
    Status_da_Consulta?: StringWithAggregatesFilter<"Agendamento"> | string
    Status_do_pagamento?: StringWithAggregatesFilter<"Agendamento"> | string
    observacao?: StringWithAggregatesFilter<"Agendamento"> | string
    recoveryCode?: IntNullableWithAggregatesFilter<"Agendamento"> | number | null
    Eh_Aluno?: BoolWithAggregatesFilter<"Agendamento"> | boolean
  }

  export type cadastro_convenioWhereInput = {
    AND?: cadastro_convenioWhereInput | cadastro_convenioWhereInput[]
    OR?: cadastro_convenioWhereInput[]
    NOT?: cadastro_convenioWhereInput | cadastro_convenioWhereInput[]
    id?: StringFilter<"cadastro_convenio"> | string
    Nome_do_Convenio?: StringFilter<"cadastro_convenio"> | string
    CNPJ?: StringFilter<"cadastro_convenio"> | string
    Valores?: StringFilter<"cadastro_convenio"> | string
    Data_de_Contratacao?: StringFilter<"cadastro_convenio"> | string
  }

  export type cadastro_convenioOrderByWithRelationInput = {
    id?: SortOrder
    Nome_do_Convenio?: SortOrder
    CNPJ?: SortOrder
    Valores?: SortOrder
    Data_de_Contratacao?: SortOrder
  }

  export type cadastro_convenioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: cadastro_convenioWhereInput | cadastro_convenioWhereInput[]
    OR?: cadastro_convenioWhereInput[]
    NOT?: cadastro_convenioWhereInput | cadastro_convenioWhereInput[]
    Nome_do_Convenio?: StringFilter<"cadastro_convenio"> | string
    CNPJ?: StringFilter<"cadastro_convenio"> | string
    Valores?: StringFilter<"cadastro_convenio"> | string
    Data_de_Contratacao?: StringFilter<"cadastro_convenio"> | string
  }, "id">

  export type cadastro_convenioOrderByWithAggregationInput = {
    id?: SortOrder
    Nome_do_Convenio?: SortOrder
    CNPJ?: SortOrder
    Valores?: SortOrder
    Data_de_Contratacao?: SortOrder
    _count?: cadastro_convenioCountOrderByAggregateInput
    _max?: cadastro_convenioMaxOrderByAggregateInput
    _min?: cadastro_convenioMinOrderByAggregateInput
  }

  export type cadastro_convenioScalarWhereWithAggregatesInput = {
    AND?: cadastro_convenioScalarWhereWithAggregatesInput | cadastro_convenioScalarWhereWithAggregatesInput[]
    OR?: cadastro_convenioScalarWhereWithAggregatesInput[]
    NOT?: cadastro_convenioScalarWhereWithAggregatesInput | cadastro_convenioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"cadastro_convenio"> | string
    Nome_do_Convenio?: StringWithAggregatesFilter<"cadastro_convenio"> | string
    CNPJ?: StringWithAggregatesFilter<"cadastro_convenio"> | string
    Valores?: StringWithAggregatesFilter<"cadastro_convenio"> | string
    Data_de_Contratacao?: StringWithAggregatesFilter<"cadastro_convenio"> | string
  }

  export type cadastro_userWhereInput = {
    AND?: cadastro_userWhereInput | cadastro_userWhereInput[]
    OR?: cadastro_userWhereInput[]
    NOT?: cadastro_userWhereInput | cadastro_userWhereInput[]
    id?: StringFilter<"cadastro_user"> | string
    Nome?: StringFilter<"cadastro_user"> | string
    Email?: StringFilter<"cadastro_user"> | string
    Usuario?: StringFilter<"cadastro_user"> | string
    Senha?: StringFilter<"cadastro_user"> | string
    recoveryCode?: IntNullableFilter<"cadastro_user"> | number | null
    Profissional?: BoolFilter<"cadastro_user"> | boolean
    Secretaria?: BoolFilter<"cadastro_user"> | boolean
    foto?: StringNullableFilter<"cadastro_user"> | string | null
  }

  export type cadastro_userOrderByWithRelationInput = {
    id?: SortOrder
    Nome?: SortOrder
    Email?: SortOrder
    Usuario?: SortOrder
    Senha?: SortOrder
    recoveryCode?: SortOrderInput | SortOrder
    Profissional?: SortOrder
    Secretaria?: SortOrder
    foto?: SortOrderInput | SortOrder
  }

  export type cadastro_userWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    Usuario?: string
    AND?: cadastro_userWhereInput | cadastro_userWhereInput[]
    OR?: cadastro_userWhereInput[]
    NOT?: cadastro_userWhereInput | cadastro_userWhereInput[]
    Nome?: StringFilter<"cadastro_user"> | string
    Email?: StringFilter<"cadastro_user"> | string
    Senha?: StringFilter<"cadastro_user"> | string
    recoveryCode?: IntNullableFilter<"cadastro_user"> | number | null
    Profissional?: BoolFilter<"cadastro_user"> | boolean
    Secretaria?: BoolFilter<"cadastro_user"> | boolean
    foto?: StringNullableFilter<"cadastro_user"> | string | null
  }, "id" | "Usuario">

  export type cadastro_userOrderByWithAggregationInput = {
    id?: SortOrder
    Nome?: SortOrder
    Email?: SortOrder
    Usuario?: SortOrder
    Senha?: SortOrder
    recoveryCode?: SortOrderInput | SortOrder
    Profissional?: SortOrder
    Secretaria?: SortOrder
    foto?: SortOrderInput | SortOrder
    _count?: cadastro_userCountOrderByAggregateInput
    _avg?: cadastro_userAvgOrderByAggregateInput
    _max?: cadastro_userMaxOrderByAggregateInput
    _min?: cadastro_userMinOrderByAggregateInput
    _sum?: cadastro_userSumOrderByAggregateInput
  }

  export type cadastro_userScalarWhereWithAggregatesInput = {
    AND?: cadastro_userScalarWhereWithAggregatesInput | cadastro_userScalarWhereWithAggregatesInput[]
    OR?: cadastro_userScalarWhereWithAggregatesInput[]
    NOT?: cadastro_userScalarWhereWithAggregatesInput | cadastro_userScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"cadastro_user"> | string
    Nome?: StringWithAggregatesFilter<"cadastro_user"> | string
    Email?: StringWithAggregatesFilter<"cadastro_user"> | string
    Usuario?: StringWithAggregatesFilter<"cadastro_user"> | string
    Senha?: StringWithAggregatesFilter<"cadastro_user"> | string
    recoveryCode?: IntNullableWithAggregatesFilter<"cadastro_user"> | number | null
    Profissional?: BoolWithAggregatesFilter<"cadastro_user"> | boolean
    Secretaria?: BoolWithAggregatesFilter<"cadastro_user"> | boolean
    foto?: StringNullableWithAggregatesFilter<"cadastro_user"> | string | null
  }

  export type Fluxo_de_caixaWhereInput = {
    AND?: Fluxo_de_caixaWhereInput | Fluxo_de_caixaWhereInput[]
    OR?: Fluxo_de_caixaWhereInput[]
    NOT?: Fluxo_de_caixaWhereInput | Fluxo_de_caixaWhereInput[]
    id?: StringFilter<"Fluxo_de_caixa"> | string
    Descricao?: StringFilter<"Fluxo_de_caixa"> | string
    Valor?: FloatFilter<"Fluxo_de_caixa"> | number
    Tipo?: StringFilter<"Fluxo_de_caixa"> | string
    Data?: StringFilter<"Fluxo_de_caixa"> | string
    Especialista?: StringFilter<"Fluxo_de_caixa"> | string
  }

  export type Fluxo_de_caixaOrderByWithRelationInput = {
    id?: SortOrder
    Descricao?: SortOrder
    Valor?: SortOrder
    Tipo?: SortOrder
    Data?: SortOrder
    Especialista?: SortOrder
  }

  export type Fluxo_de_caixaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Fluxo_de_caixaWhereInput | Fluxo_de_caixaWhereInput[]
    OR?: Fluxo_de_caixaWhereInput[]
    NOT?: Fluxo_de_caixaWhereInput | Fluxo_de_caixaWhereInput[]
    Descricao?: StringFilter<"Fluxo_de_caixa"> | string
    Valor?: FloatFilter<"Fluxo_de_caixa"> | number
    Tipo?: StringFilter<"Fluxo_de_caixa"> | string
    Data?: StringFilter<"Fluxo_de_caixa"> | string
    Especialista?: StringFilter<"Fluxo_de_caixa"> | string
  }, "id">

  export type Fluxo_de_caixaOrderByWithAggregationInput = {
    id?: SortOrder
    Descricao?: SortOrder
    Valor?: SortOrder
    Tipo?: SortOrder
    Data?: SortOrder
    Especialista?: SortOrder
    _count?: Fluxo_de_caixaCountOrderByAggregateInput
    _avg?: Fluxo_de_caixaAvgOrderByAggregateInput
    _max?: Fluxo_de_caixaMaxOrderByAggregateInput
    _min?: Fluxo_de_caixaMinOrderByAggregateInput
    _sum?: Fluxo_de_caixaSumOrderByAggregateInput
  }

  export type Fluxo_de_caixaScalarWhereWithAggregatesInput = {
    AND?: Fluxo_de_caixaScalarWhereWithAggregatesInput | Fluxo_de_caixaScalarWhereWithAggregatesInput[]
    OR?: Fluxo_de_caixaScalarWhereWithAggregatesInput[]
    NOT?: Fluxo_de_caixaScalarWhereWithAggregatesInput | Fluxo_de_caixaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Fluxo_de_caixa"> | string
    Descricao?: StringWithAggregatesFilter<"Fluxo_de_caixa"> | string
    Valor?: FloatWithAggregatesFilter<"Fluxo_de_caixa"> | number
    Tipo?: StringWithAggregatesFilter<"Fluxo_de_caixa"> | string
    Data?: StringWithAggregatesFilter<"Fluxo_de_caixa"> | string
    Especialista?: StringWithAggregatesFilter<"Fluxo_de_caixa"> | string
  }

  export type EsperaWhereInput = {
    AND?: EsperaWhereInput | EsperaWhereInput[]
    OR?: EsperaWhereInput[]
    NOT?: EsperaWhereInput | EsperaWhereInput[]
    id?: StringFilter<"Espera"> | string
    Nome?: StringFilter<"Espera"> | string
    Telefone?: StringFilter<"Espera"> | string
    Convenio?: StringFilter<"Espera"> | string
    Especialista?: StringFilter<"Espera"> | string
    Observacao?: StringFilter<"Espera"> | string
  }

  export type EsperaOrderByWithRelationInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Convenio?: SortOrder
    Especialista?: SortOrder
    Observacao?: SortOrder
  }

  export type EsperaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EsperaWhereInput | EsperaWhereInput[]
    OR?: EsperaWhereInput[]
    NOT?: EsperaWhereInput | EsperaWhereInput[]
    Nome?: StringFilter<"Espera"> | string
    Telefone?: StringFilter<"Espera"> | string
    Convenio?: StringFilter<"Espera"> | string
    Especialista?: StringFilter<"Espera"> | string
    Observacao?: StringFilter<"Espera"> | string
  }, "id">

  export type EsperaOrderByWithAggregationInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Convenio?: SortOrder
    Especialista?: SortOrder
    Observacao?: SortOrder
    _count?: EsperaCountOrderByAggregateInput
    _max?: EsperaMaxOrderByAggregateInput
    _min?: EsperaMinOrderByAggregateInput
  }

  export type EsperaScalarWhereWithAggregatesInput = {
    AND?: EsperaScalarWhereWithAggregatesInput | EsperaScalarWhereWithAggregatesInput[]
    OR?: EsperaScalarWhereWithAggregatesInput[]
    NOT?: EsperaScalarWhereWithAggregatesInput | EsperaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Espera"> | string
    Nome?: StringWithAggregatesFilter<"Espera"> | string
    Telefone?: StringWithAggregatesFilter<"Espera"> | string
    Convenio?: StringWithAggregatesFilter<"Espera"> | string
    Especialista?: StringWithAggregatesFilter<"Espera"> | string
    Observacao?: StringWithAggregatesFilter<"Espera"> | string
  }

  export type cadastro_profWhereInput = {
    AND?: cadastro_profWhereInput | cadastro_profWhereInput[]
    OR?: cadastro_profWhereInput[]
    NOT?: cadastro_profWhereInput | cadastro_profWhereInput[]
    id?: StringFilter<"cadastro_prof"> | string
    Nome?: StringFilter<"cadastro_prof"> | string
    Faixa_Etaria_de_Atendimento?: StringFilter<"cadastro_prof"> | string
    Dias_de_Atendimento?: StringFilter<"cadastro_prof"> | string
    Horarios_de_Atendimento?: StringFilter<"cadastro_prof"> | string
    Especialidade?: StringFilter<"cadastro_prof"> | string
    Registro_do_Profissional?: StringFilter<"cadastro_prof"> | string
    Especialista?: StringFilter<"cadastro_prof"> | string
  }

  export type cadastro_profOrderByWithRelationInput = {
    id?: SortOrder
    Nome?: SortOrder
    Faixa_Etaria_de_Atendimento?: SortOrder
    Dias_de_Atendimento?: SortOrder
    Horarios_de_Atendimento?: SortOrder
    Especialidade?: SortOrder
    Registro_do_Profissional?: SortOrder
    Especialista?: SortOrder
  }

  export type cadastro_profWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    Especialista?: string
    AND?: cadastro_profWhereInput | cadastro_profWhereInput[]
    OR?: cadastro_profWhereInput[]
    NOT?: cadastro_profWhereInput | cadastro_profWhereInput[]
    Nome?: StringFilter<"cadastro_prof"> | string
    Faixa_Etaria_de_Atendimento?: StringFilter<"cadastro_prof"> | string
    Dias_de_Atendimento?: StringFilter<"cadastro_prof"> | string
    Horarios_de_Atendimento?: StringFilter<"cadastro_prof"> | string
    Especialidade?: StringFilter<"cadastro_prof"> | string
    Registro_do_Profissional?: StringFilter<"cadastro_prof"> | string
  }, "id" | "Especialista">

  export type cadastro_profOrderByWithAggregationInput = {
    id?: SortOrder
    Nome?: SortOrder
    Faixa_Etaria_de_Atendimento?: SortOrder
    Dias_de_Atendimento?: SortOrder
    Horarios_de_Atendimento?: SortOrder
    Especialidade?: SortOrder
    Registro_do_Profissional?: SortOrder
    Especialista?: SortOrder
    _count?: cadastro_profCountOrderByAggregateInput
    _max?: cadastro_profMaxOrderByAggregateInput
    _min?: cadastro_profMinOrderByAggregateInput
  }

  export type cadastro_profScalarWhereWithAggregatesInput = {
    AND?: cadastro_profScalarWhereWithAggregatesInput | cadastro_profScalarWhereWithAggregatesInput[]
    OR?: cadastro_profScalarWhereWithAggregatesInput[]
    NOT?: cadastro_profScalarWhereWithAggregatesInput | cadastro_profScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"cadastro_prof"> | string
    Nome?: StringWithAggregatesFilter<"cadastro_prof"> | string
    Faixa_Etaria_de_Atendimento?: StringWithAggregatesFilter<"cadastro_prof"> | string
    Dias_de_Atendimento?: StringWithAggregatesFilter<"cadastro_prof"> | string
    Horarios_de_Atendimento?: StringWithAggregatesFilter<"cadastro_prof"> | string
    Especialidade?: StringWithAggregatesFilter<"cadastro_prof"> | string
    Registro_do_Profissional?: StringWithAggregatesFilter<"cadastro_prof"> | string
    Especialista?: StringWithAggregatesFilter<"cadastro_prof"> | string
  }

  export type AtendimentoWhereInput = {
    AND?: AtendimentoWhereInput | AtendimentoWhereInput[]
    OR?: AtendimentoWhereInput[]
    NOT?: AtendimentoWhereInput | AtendimentoWhereInput[]
    id?: StringFilter<"Atendimento"> | string
    id_agendamento?: StringFilter<"Atendimento"> | string
    id_paciente?: StringFilter<"Atendimento"> | string
    conteudoAtestado?: StringFilter<"Atendimento"> | string
    conteudoComparecimento?: StringFilter<"Atendimento"> | string
    conteudoEncaminhamento?: StringFilter<"Atendimento"> | string
    conteudoProntuario?: StringFilter<"Atendimento"> | string
    conteudoAnamineseI?: StringFilter<"Atendimento"> | string
    conteudoAnamineseA?: StringFilter<"Atendimento"> | string
    conteudoNeuroI?: StringFilter<"Atendimento"> | string
    conteudoNeuroA?: StringFilter<"Atendimento"> | string
    dataHora?: StringFilter<"Atendimento"> | string
    tempo?: StringFilter<"Atendimento"> | string
  }

  export type AtendimentoOrderByWithRelationInput = {
    id?: SortOrder
    id_agendamento?: SortOrder
    id_paciente?: SortOrder
    conteudoAtestado?: SortOrder
    conteudoComparecimento?: SortOrder
    conteudoEncaminhamento?: SortOrder
    conteudoProntuario?: SortOrder
    conteudoAnamineseI?: SortOrder
    conteudoAnamineseA?: SortOrder
    conteudoNeuroI?: SortOrder
    conteudoNeuroA?: SortOrder
    dataHora?: SortOrder
    tempo?: SortOrder
  }

  export type AtendimentoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AtendimentoWhereInput | AtendimentoWhereInput[]
    OR?: AtendimentoWhereInput[]
    NOT?: AtendimentoWhereInput | AtendimentoWhereInput[]
    id_agendamento?: StringFilter<"Atendimento"> | string
    id_paciente?: StringFilter<"Atendimento"> | string
    conteudoAtestado?: StringFilter<"Atendimento"> | string
    conteudoComparecimento?: StringFilter<"Atendimento"> | string
    conteudoEncaminhamento?: StringFilter<"Atendimento"> | string
    conteudoProntuario?: StringFilter<"Atendimento"> | string
    conteudoAnamineseI?: StringFilter<"Atendimento"> | string
    conteudoAnamineseA?: StringFilter<"Atendimento"> | string
    conteudoNeuroI?: StringFilter<"Atendimento"> | string
    conteudoNeuroA?: StringFilter<"Atendimento"> | string
    dataHora?: StringFilter<"Atendimento"> | string
    tempo?: StringFilter<"Atendimento"> | string
  }, "id">

  export type AtendimentoOrderByWithAggregationInput = {
    id?: SortOrder
    id_agendamento?: SortOrder
    id_paciente?: SortOrder
    conteudoAtestado?: SortOrder
    conteudoComparecimento?: SortOrder
    conteudoEncaminhamento?: SortOrder
    conteudoProntuario?: SortOrder
    conteudoAnamineseI?: SortOrder
    conteudoAnamineseA?: SortOrder
    conteudoNeuroI?: SortOrder
    conteudoNeuroA?: SortOrder
    dataHora?: SortOrder
    tempo?: SortOrder
    _count?: AtendimentoCountOrderByAggregateInput
    _max?: AtendimentoMaxOrderByAggregateInput
    _min?: AtendimentoMinOrderByAggregateInput
  }

  export type AtendimentoScalarWhereWithAggregatesInput = {
    AND?: AtendimentoScalarWhereWithAggregatesInput | AtendimentoScalarWhereWithAggregatesInput[]
    OR?: AtendimentoScalarWhereWithAggregatesInput[]
    NOT?: AtendimentoScalarWhereWithAggregatesInput | AtendimentoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Atendimento"> | string
    id_agendamento?: StringWithAggregatesFilter<"Atendimento"> | string
    id_paciente?: StringWithAggregatesFilter<"Atendimento"> | string
    conteudoAtestado?: StringWithAggregatesFilter<"Atendimento"> | string
    conteudoComparecimento?: StringWithAggregatesFilter<"Atendimento"> | string
    conteudoEncaminhamento?: StringWithAggregatesFilter<"Atendimento"> | string
    conteudoProntuario?: StringWithAggregatesFilter<"Atendimento"> | string
    conteudoAnamineseI?: StringWithAggregatesFilter<"Atendimento"> | string
    conteudoAnamineseA?: StringWithAggregatesFilter<"Atendimento"> | string
    conteudoNeuroI?: StringWithAggregatesFilter<"Atendimento"> | string
    conteudoNeuroA?: StringWithAggregatesFilter<"Atendimento"> | string
    dataHora?: StringWithAggregatesFilter<"Atendimento"> | string
    tempo?: StringWithAggregatesFilter<"Atendimento"> | string
  }

  export type AjudaWhereInput = {
    AND?: AjudaWhereInput | AjudaWhereInput[]
    OR?: AjudaWhereInput[]
    NOT?: AjudaWhereInput | AjudaWhereInput[]
    id?: StringFilter<"Ajuda"> | string
    tela?: StringFilter<"Ajuda"> | string
    descricao?: StringFilter<"Ajuda"> | string
    status?: StringFilter<"Ajuda"> | string
    criadoEm?: DateTimeFilter<"Ajuda"> | Date | string
    especialista?: StringFilter<"Ajuda"> | string
  }

  export type AjudaOrderByWithRelationInput = {
    id?: SortOrder
    tela?: SortOrder
    descricao?: SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
    especialista?: SortOrder
  }

  export type AjudaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AjudaWhereInput | AjudaWhereInput[]
    OR?: AjudaWhereInput[]
    NOT?: AjudaWhereInput | AjudaWhereInput[]
    tela?: StringFilter<"Ajuda"> | string
    descricao?: StringFilter<"Ajuda"> | string
    status?: StringFilter<"Ajuda"> | string
    criadoEm?: DateTimeFilter<"Ajuda"> | Date | string
    especialista?: StringFilter<"Ajuda"> | string
  }, "id">

  export type AjudaOrderByWithAggregationInput = {
    id?: SortOrder
    tela?: SortOrder
    descricao?: SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
    especialista?: SortOrder
    _count?: AjudaCountOrderByAggregateInput
    _max?: AjudaMaxOrderByAggregateInput
    _min?: AjudaMinOrderByAggregateInput
  }

  export type AjudaScalarWhereWithAggregatesInput = {
    AND?: AjudaScalarWhereWithAggregatesInput | AjudaScalarWhereWithAggregatesInput[]
    OR?: AjudaScalarWhereWithAggregatesInput[]
    NOT?: AjudaScalarWhereWithAggregatesInput | AjudaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Ajuda"> | string
    tela?: StringWithAggregatesFilter<"Ajuda"> | string
    descricao?: StringWithAggregatesFilter<"Ajuda"> | string
    status?: StringWithAggregatesFilter<"Ajuda"> | string
    criadoEm?: DateTimeWithAggregatesFilter<"Ajuda"> | Date | string
    especialista?: StringWithAggregatesFilter<"Ajuda"> | string
  }

  export type MessagesCreateInput = {
    id?: string
    from: string
    to: string
    content: string
    createdAt?: Date | string
    visualizado?: boolean
  }

  export type MessagesUncheckedCreateInput = {
    id?: string
    from: string
    to: string
    content: string
    createdAt?: Date | string
    visualizado?: boolean
  }

  export type MessagesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visualizado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessagesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visualizado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessagesCreateManyInput = {
    id?: string
    from: string
    to: string
    content: string
    createdAt?: Date | string
    visualizado?: boolean
  }

  export type MessagesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visualizado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessagesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visualizado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type Cadastro_pacientesCreateInput = {
    id?: string
    Nome: string
    Telefone: string
    Email: string
    Data_de_Nascimento: string
    Idade: string
    Genero: string
    CPF_CNPJ: string
    Endereco: string
    Numero: string
    CEP: string
    Cidade: string
    Estado: string
    Nome_do_Pai_ou_Responsavel: string
    Telefone_Pai: string
    Nome_da_Mae_ou_Responsavel: string
    Telefone_Mae: string
    Especialista: string
    recoveryCode?: number | null
    Eh_Crianca: boolean
  }

  export type Cadastro_pacientesUncheckedCreateInput = {
    id?: string
    Nome: string
    Telefone: string
    Email: string
    Data_de_Nascimento: string
    Idade: string
    Genero: string
    CPF_CNPJ: string
    Endereco: string
    Numero: string
    CEP: string
    Cidade: string
    Estado: string
    Nome_do_Pai_ou_Responsavel: string
    Telefone_Pai: string
    Nome_da_Mae_ou_Responsavel: string
    Telefone_Mae: string
    Especialista: string
    recoveryCode?: number | null
    Eh_Crianca: boolean
  }

  export type Cadastro_pacientesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Data_de_Nascimento?: StringFieldUpdateOperationsInput | string
    Idade?: StringFieldUpdateOperationsInput | string
    Genero?: StringFieldUpdateOperationsInput | string
    CPF_CNPJ?: StringFieldUpdateOperationsInput | string
    Endereco?: StringFieldUpdateOperationsInput | string
    Numero?: StringFieldUpdateOperationsInput | string
    CEP?: StringFieldUpdateOperationsInput | string
    Cidade?: StringFieldUpdateOperationsInput | string
    Estado?: StringFieldUpdateOperationsInput | string
    Nome_do_Pai_ou_Responsavel?: StringFieldUpdateOperationsInput | string
    Telefone_Pai?: StringFieldUpdateOperationsInput | string
    Nome_da_Mae_ou_Responsavel?: StringFieldUpdateOperationsInput | string
    Telefone_Mae?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
    recoveryCode?: NullableIntFieldUpdateOperationsInput | number | null
    Eh_Crianca?: BoolFieldUpdateOperationsInput | boolean
  }

  export type Cadastro_pacientesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Data_de_Nascimento?: StringFieldUpdateOperationsInput | string
    Idade?: StringFieldUpdateOperationsInput | string
    Genero?: StringFieldUpdateOperationsInput | string
    CPF_CNPJ?: StringFieldUpdateOperationsInput | string
    Endereco?: StringFieldUpdateOperationsInput | string
    Numero?: StringFieldUpdateOperationsInput | string
    CEP?: StringFieldUpdateOperationsInput | string
    Cidade?: StringFieldUpdateOperationsInput | string
    Estado?: StringFieldUpdateOperationsInput | string
    Nome_do_Pai_ou_Responsavel?: StringFieldUpdateOperationsInput | string
    Telefone_Pai?: StringFieldUpdateOperationsInput | string
    Nome_da_Mae_ou_Responsavel?: StringFieldUpdateOperationsInput | string
    Telefone_Mae?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
    recoveryCode?: NullableIntFieldUpdateOperationsInput | number | null
    Eh_Crianca?: BoolFieldUpdateOperationsInput | boolean
  }

  export type Cadastro_pacientesCreateManyInput = {
    id?: string
    Nome: string
    Telefone: string
    Email: string
    Data_de_Nascimento: string
    Idade: string
    Genero: string
    CPF_CNPJ: string
    Endereco: string
    Numero: string
    CEP: string
    Cidade: string
    Estado: string
    Nome_do_Pai_ou_Responsavel: string
    Telefone_Pai: string
    Nome_da_Mae_ou_Responsavel: string
    Telefone_Mae: string
    Especialista: string
    recoveryCode?: number | null
    Eh_Crianca: boolean
  }

  export type Cadastro_pacientesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Data_de_Nascimento?: StringFieldUpdateOperationsInput | string
    Idade?: StringFieldUpdateOperationsInput | string
    Genero?: StringFieldUpdateOperationsInput | string
    CPF_CNPJ?: StringFieldUpdateOperationsInput | string
    Endereco?: StringFieldUpdateOperationsInput | string
    Numero?: StringFieldUpdateOperationsInput | string
    CEP?: StringFieldUpdateOperationsInput | string
    Cidade?: StringFieldUpdateOperationsInput | string
    Estado?: StringFieldUpdateOperationsInput | string
    Nome_do_Pai_ou_Responsavel?: StringFieldUpdateOperationsInput | string
    Telefone_Pai?: StringFieldUpdateOperationsInput | string
    Nome_da_Mae_ou_Responsavel?: StringFieldUpdateOperationsInput | string
    Telefone_Mae?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
    recoveryCode?: NullableIntFieldUpdateOperationsInput | number | null
    Eh_Crianca?: BoolFieldUpdateOperationsInput | boolean
  }

  export type Cadastro_pacientesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Data_de_Nascimento?: StringFieldUpdateOperationsInput | string
    Idade?: StringFieldUpdateOperationsInput | string
    Genero?: StringFieldUpdateOperationsInput | string
    CPF_CNPJ?: StringFieldUpdateOperationsInput | string
    Endereco?: StringFieldUpdateOperationsInput | string
    Numero?: StringFieldUpdateOperationsInput | string
    CEP?: StringFieldUpdateOperationsInput | string
    Cidade?: StringFieldUpdateOperationsInput | string
    Estado?: StringFieldUpdateOperationsInput | string
    Nome_do_Pai_ou_Responsavel?: StringFieldUpdateOperationsInput | string
    Telefone_Pai?: StringFieldUpdateOperationsInput | string
    Nome_da_Mae_ou_Responsavel?: StringFieldUpdateOperationsInput | string
    Telefone_Mae?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
    recoveryCode?: NullableIntFieldUpdateOperationsInput | number | null
    Eh_Crianca?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AgendamentoCreateInput = {
    id?: string
    Nome: string
    Telefone: string
    Especialista: string
    Data_do_Atendimento: string
    Horario_da_consulta: string
    Horario_de_Termino_da_consulta: string
    Valor_da_Consulta?: number | null
    Status_da_Consulta: string
    Status_do_pagamento: string
    observacao: string
    recoveryCode?: number | null
    Eh_Aluno: boolean
  }

  export type AgendamentoUncheckedCreateInput = {
    id?: string
    Nome: string
    Telefone: string
    Especialista: string
    Data_do_Atendimento: string
    Horario_da_consulta: string
    Horario_de_Termino_da_consulta: string
    Valor_da_Consulta?: number | null
    Status_da_Consulta: string
    Status_do_pagamento: string
    observacao: string
    recoveryCode?: number | null
    Eh_Aluno: boolean
  }

  export type AgendamentoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
    Data_do_Atendimento?: StringFieldUpdateOperationsInput | string
    Horario_da_consulta?: StringFieldUpdateOperationsInput | string
    Horario_de_Termino_da_consulta?: StringFieldUpdateOperationsInput | string
    Valor_da_Consulta?: NullableFloatFieldUpdateOperationsInput | number | null
    Status_da_Consulta?: StringFieldUpdateOperationsInput | string
    Status_do_pagamento?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    recoveryCode?: NullableIntFieldUpdateOperationsInput | number | null
    Eh_Aluno?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AgendamentoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
    Data_do_Atendimento?: StringFieldUpdateOperationsInput | string
    Horario_da_consulta?: StringFieldUpdateOperationsInput | string
    Horario_de_Termino_da_consulta?: StringFieldUpdateOperationsInput | string
    Valor_da_Consulta?: NullableFloatFieldUpdateOperationsInput | number | null
    Status_da_Consulta?: StringFieldUpdateOperationsInput | string
    Status_do_pagamento?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    recoveryCode?: NullableIntFieldUpdateOperationsInput | number | null
    Eh_Aluno?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AgendamentoCreateManyInput = {
    id?: string
    Nome: string
    Telefone: string
    Especialista: string
    Data_do_Atendimento: string
    Horario_da_consulta: string
    Horario_de_Termino_da_consulta: string
    Valor_da_Consulta?: number | null
    Status_da_Consulta: string
    Status_do_pagamento: string
    observacao: string
    recoveryCode?: number | null
    Eh_Aluno: boolean
  }

  export type AgendamentoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
    Data_do_Atendimento?: StringFieldUpdateOperationsInput | string
    Horario_da_consulta?: StringFieldUpdateOperationsInput | string
    Horario_de_Termino_da_consulta?: StringFieldUpdateOperationsInput | string
    Valor_da_Consulta?: NullableFloatFieldUpdateOperationsInput | number | null
    Status_da_Consulta?: StringFieldUpdateOperationsInput | string
    Status_do_pagamento?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    recoveryCode?: NullableIntFieldUpdateOperationsInput | number | null
    Eh_Aluno?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AgendamentoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
    Data_do_Atendimento?: StringFieldUpdateOperationsInput | string
    Horario_da_consulta?: StringFieldUpdateOperationsInput | string
    Horario_de_Termino_da_consulta?: StringFieldUpdateOperationsInput | string
    Valor_da_Consulta?: NullableFloatFieldUpdateOperationsInput | number | null
    Status_da_Consulta?: StringFieldUpdateOperationsInput | string
    Status_do_pagamento?: StringFieldUpdateOperationsInput | string
    observacao?: StringFieldUpdateOperationsInput | string
    recoveryCode?: NullableIntFieldUpdateOperationsInput | number | null
    Eh_Aluno?: BoolFieldUpdateOperationsInput | boolean
  }

  export type cadastro_convenioCreateInput = {
    id?: string
    Nome_do_Convenio: string
    CNPJ: string
    Valores: string
    Data_de_Contratacao: string
  }

  export type cadastro_convenioUncheckedCreateInput = {
    id?: string
    Nome_do_Convenio: string
    CNPJ: string
    Valores: string
    Data_de_Contratacao: string
  }

  export type cadastro_convenioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome_do_Convenio?: StringFieldUpdateOperationsInput | string
    CNPJ?: StringFieldUpdateOperationsInput | string
    Valores?: StringFieldUpdateOperationsInput | string
    Data_de_Contratacao?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_convenioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome_do_Convenio?: StringFieldUpdateOperationsInput | string
    CNPJ?: StringFieldUpdateOperationsInput | string
    Valores?: StringFieldUpdateOperationsInput | string
    Data_de_Contratacao?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_convenioCreateManyInput = {
    id?: string
    Nome_do_Convenio: string
    CNPJ: string
    Valores: string
    Data_de_Contratacao: string
  }

  export type cadastro_convenioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome_do_Convenio?: StringFieldUpdateOperationsInput | string
    CNPJ?: StringFieldUpdateOperationsInput | string
    Valores?: StringFieldUpdateOperationsInput | string
    Data_de_Contratacao?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_convenioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome_do_Convenio?: StringFieldUpdateOperationsInput | string
    CNPJ?: StringFieldUpdateOperationsInput | string
    Valores?: StringFieldUpdateOperationsInput | string
    Data_de_Contratacao?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_userCreateInput = {
    id?: string
    Nome: string
    Email: string
    Usuario: string
    Senha: string
    recoveryCode?: number | null
    Profissional: boolean
    Secretaria: boolean
    foto?: string | null
  }

  export type cadastro_userUncheckedCreateInput = {
    id?: string
    Nome: string
    Email: string
    Usuario: string
    Senha: string
    recoveryCode?: number | null
    Profissional: boolean
    Secretaria: boolean
    foto?: string | null
  }

  export type cadastro_userUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Usuario?: StringFieldUpdateOperationsInput | string
    Senha?: StringFieldUpdateOperationsInput | string
    recoveryCode?: NullableIntFieldUpdateOperationsInput | number | null
    Profissional?: BoolFieldUpdateOperationsInput | boolean
    Secretaria?: BoolFieldUpdateOperationsInput | boolean
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type cadastro_userUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Usuario?: StringFieldUpdateOperationsInput | string
    Senha?: StringFieldUpdateOperationsInput | string
    recoveryCode?: NullableIntFieldUpdateOperationsInput | number | null
    Profissional?: BoolFieldUpdateOperationsInput | boolean
    Secretaria?: BoolFieldUpdateOperationsInput | boolean
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type cadastro_userCreateManyInput = {
    id?: string
    Nome: string
    Email: string
    Usuario: string
    Senha: string
    recoveryCode?: number | null
    Profissional: boolean
    Secretaria: boolean
    foto?: string | null
  }

  export type cadastro_userUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Usuario?: StringFieldUpdateOperationsInput | string
    Senha?: StringFieldUpdateOperationsInput | string
    recoveryCode?: NullableIntFieldUpdateOperationsInput | number | null
    Profissional?: BoolFieldUpdateOperationsInput | boolean
    Secretaria?: BoolFieldUpdateOperationsInput | boolean
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type cadastro_userUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Usuario?: StringFieldUpdateOperationsInput | string
    Senha?: StringFieldUpdateOperationsInput | string
    recoveryCode?: NullableIntFieldUpdateOperationsInput | number | null
    Profissional?: BoolFieldUpdateOperationsInput | boolean
    Secretaria?: BoolFieldUpdateOperationsInput | boolean
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Fluxo_de_caixaCreateInput = {
    id?: string
    Descricao: string
    Valor: number
    Tipo: string
    Data: string
    Especialista: string
  }

  export type Fluxo_de_caixaUncheckedCreateInput = {
    id?: string
    Descricao: string
    Valor: number
    Tipo: string
    Data: string
    Especialista: string
  }

  export type Fluxo_de_caixaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Descricao?: StringFieldUpdateOperationsInput | string
    Valor?: FloatFieldUpdateOperationsInput | number
    Tipo?: StringFieldUpdateOperationsInput | string
    Data?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
  }

  export type Fluxo_de_caixaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Descricao?: StringFieldUpdateOperationsInput | string
    Valor?: FloatFieldUpdateOperationsInput | number
    Tipo?: StringFieldUpdateOperationsInput | string
    Data?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
  }

  export type Fluxo_de_caixaCreateManyInput = {
    id?: string
    Descricao: string
    Valor: number
    Tipo: string
    Data: string
    Especialista: string
  }

  export type Fluxo_de_caixaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    Descricao?: StringFieldUpdateOperationsInput | string
    Valor?: FloatFieldUpdateOperationsInput | number
    Tipo?: StringFieldUpdateOperationsInput | string
    Data?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
  }

  export type Fluxo_de_caixaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    Descricao?: StringFieldUpdateOperationsInput | string
    Valor?: FloatFieldUpdateOperationsInput | number
    Tipo?: StringFieldUpdateOperationsInput | string
    Data?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
  }

  export type EsperaCreateInput = {
    id?: string
    Nome: string
    Telefone: string
    Convenio: string
    Especialista: string
    Observacao: string
  }

  export type EsperaUncheckedCreateInput = {
    id?: string
    Nome: string
    Telefone: string
    Convenio: string
    Especialista: string
    Observacao: string
  }

  export type EsperaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Convenio?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
    Observacao?: StringFieldUpdateOperationsInput | string
  }

  export type EsperaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Convenio?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
    Observacao?: StringFieldUpdateOperationsInput | string
  }

  export type EsperaCreateManyInput = {
    id?: string
    Nome: string
    Telefone: string
    Convenio: string
    Especialista: string
    Observacao: string
  }

  export type EsperaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Convenio?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
    Observacao?: StringFieldUpdateOperationsInput | string
  }

  export type EsperaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Telefone?: StringFieldUpdateOperationsInput | string
    Convenio?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
    Observacao?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_profCreateInput = {
    id?: string
    Nome: string
    Faixa_Etaria_de_Atendimento: string
    Dias_de_Atendimento: string
    Horarios_de_Atendimento: string
    Especialidade: string
    Registro_do_Profissional: string
    Especialista: string
  }

  export type cadastro_profUncheckedCreateInput = {
    id?: string
    Nome: string
    Faixa_Etaria_de_Atendimento: string
    Dias_de_Atendimento: string
    Horarios_de_Atendimento: string
    Especialidade: string
    Registro_do_Profissional: string
    Especialista: string
  }

  export type cadastro_profUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Faixa_Etaria_de_Atendimento?: StringFieldUpdateOperationsInput | string
    Dias_de_Atendimento?: StringFieldUpdateOperationsInput | string
    Horarios_de_Atendimento?: StringFieldUpdateOperationsInput | string
    Especialidade?: StringFieldUpdateOperationsInput | string
    Registro_do_Profissional?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_profUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Faixa_Etaria_de_Atendimento?: StringFieldUpdateOperationsInput | string
    Dias_de_Atendimento?: StringFieldUpdateOperationsInput | string
    Horarios_de_Atendimento?: StringFieldUpdateOperationsInput | string
    Especialidade?: StringFieldUpdateOperationsInput | string
    Registro_do_Profissional?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_profCreateManyInput = {
    id?: string
    Nome: string
    Faixa_Etaria_de_Atendimento: string
    Dias_de_Atendimento: string
    Horarios_de_Atendimento: string
    Especialidade: string
    Registro_do_Profissional: string
    Especialista: string
  }

  export type cadastro_profUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Faixa_Etaria_de_Atendimento?: StringFieldUpdateOperationsInput | string
    Dias_de_Atendimento?: StringFieldUpdateOperationsInput | string
    Horarios_de_Atendimento?: StringFieldUpdateOperationsInput | string
    Especialidade?: StringFieldUpdateOperationsInput | string
    Registro_do_Profissional?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
  }

  export type cadastro_profUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Faixa_Etaria_de_Atendimento?: StringFieldUpdateOperationsInput | string
    Dias_de_Atendimento?: StringFieldUpdateOperationsInput | string
    Horarios_de_Atendimento?: StringFieldUpdateOperationsInput | string
    Especialidade?: StringFieldUpdateOperationsInput | string
    Registro_do_Profissional?: StringFieldUpdateOperationsInput | string
    Especialista?: StringFieldUpdateOperationsInput | string
  }

  export type AtendimentoCreateInput = {
    id?: string
    id_agendamento: string
    id_paciente: string
    conteudoAtestado: string
    conteudoComparecimento: string
    conteudoEncaminhamento: string
    conteudoProntuario: string
    conteudoAnamineseI: string
    conteudoAnamineseA: string
    conteudoNeuroI: string
    conteudoNeuroA: string
    dataHora: string
    tempo: string
  }

  export type AtendimentoUncheckedCreateInput = {
    id?: string
    id_agendamento: string
    id_paciente: string
    conteudoAtestado: string
    conteudoComparecimento: string
    conteudoEncaminhamento: string
    conteudoProntuario: string
    conteudoAnamineseI: string
    conteudoAnamineseA: string
    conteudoNeuroI: string
    conteudoNeuroA: string
    dataHora: string
    tempo: string
  }

  export type AtendimentoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_agendamento?: StringFieldUpdateOperationsInput | string
    id_paciente?: StringFieldUpdateOperationsInput | string
    conteudoAtestado?: StringFieldUpdateOperationsInput | string
    conteudoComparecimento?: StringFieldUpdateOperationsInput | string
    conteudoEncaminhamento?: StringFieldUpdateOperationsInput | string
    conteudoProntuario?: StringFieldUpdateOperationsInput | string
    conteudoAnamineseI?: StringFieldUpdateOperationsInput | string
    conteudoAnamineseA?: StringFieldUpdateOperationsInput | string
    conteudoNeuroI?: StringFieldUpdateOperationsInput | string
    conteudoNeuroA?: StringFieldUpdateOperationsInput | string
    dataHora?: StringFieldUpdateOperationsInput | string
    tempo?: StringFieldUpdateOperationsInput | string
  }

  export type AtendimentoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_agendamento?: StringFieldUpdateOperationsInput | string
    id_paciente?: StringFieldUpdateOperationsInput | string
    conteudoAtestado?: StringFieldUpdateOperationsInput | string
    conteudoComparecimento?: StringFieldUpdateOperationsInput | string
    conteudoEncaminhamento?: StringFieldUpdateOperationsInput | string
    conteudoProntuario?: StringFieldUpdateOperationsInput | string
    conteudoAnamineseI?: StringFieldUpdateOperationsInput | string
    conteudoAnamineseA?: StringFieldUpdateOperationsInput | string
    conteudoNeuroI?: StringFieldUpdateOperationsInput | string
    conteudoNeuroA?: StringFieldUpdateOperationsInput | string
    dataHora?: StringFieldUpdateOperationsInput | string
    tempo?: StringFieldUpdateOperationsInput | string
  }

  export type AtendimentoCreateManyInput = {
    id?: string
    id_agendamento: string
    id_paciente: string
    conteudoAtestado: string
    conteudoComparecimento: string
    conteudoEncaminhamento: string
    conteudoProntuario: string
    conteudoAnamineseI: string
    conteudoAnamineseA: string
    conteudoNeuroI: string
    conteudoNeuroA: string
    dataHora: string
    tempo: string
  }

  export type AtendimentoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_agendamento?: StringFieldUpdateOperationsInput | string
    id_paciente?: StringFieldUpdateOperationsInput | string
    conteudoAtestado?: StringFieldUpdateOperationsInput | string
    conteudoComparecimento?: StringFieldUpdateOperationsInput | string
    conteudoEncaminhamento?: StringFieldUpdateOperationsInput | string
    conteudoProntuario?: StringFieldUpdateOperationsInput | string
    conteudoAnamineseI?: StringFieldUpdateOperationsInput | string
    conteudoAnamineseA?: StringFieldUpdateOperationsInput | string
    conteudoNeuroI?: StringFieldUpdateOperationsInput | string
    conteudoNeuroA?: StringFieldUpdateOperationsInput | string
    dataHora?: StringFieldUpdateOperationsInput | string
    tempo?: StringFieldUpdateOperationsInput | string
  }

  export type AtendimentoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_agendamento?: StringFieldUpdateOperationsInput | string
    id_paciente?: StringFieldUpdateOperationsInput | string
    conteudoAtestado?: StringFieldUpdateOperationsInput | string
    conteudoComparecimento?: StringFieldUpdateOperationsInput | string
    conteudoEncaminhamento?: StringFieldUpdateOperationsInput | string
    conteudoProntuario?: StringFieldUpdateOperationsInput | string
    conteudoAnamineseI?: StringFieldUpdateOperationsInput | string
    conteudoAnamineseA?: StringFieldUpdateOperationsInput | string
    conteudoNeuroI?: StringFieldUpdateOperationsInput | string
    conteudoNeuroA?: StringFieldUpdateOperationsInput | string
    dataHora?: StringFieldUpdateOperationsInput | string
    tempo?: StringFieldUpdateOperationsInput | string
  }

  export type AjudaCreateInput = {
    id?: string
    tela: string
    descricao: string
    status?: string
    criadoEm?: Date | string
    especialista: string
  }

  export type AjudaUncheckedCreateInput = {
    id?: string
    tela: string
    descricao: string
    status?: string
    criadoEm?: Date | string
    especialista: string
  }

  export type AjudaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tela?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    especialista?: StringFieldUpdateOperationsInput | string
  }

  export type AjudaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tela?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    especialista?: StringFieldUpdateOperationsInput | string
  }

  export type AjudaCreateManyInput = {
    id?: string
    tela: string
    descricao: string
    status?: string
    criadoEm?: Date | string
    especialista: string
  }

  export type AjudaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tela?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    especialista?: StringFieldUpdateOperationsInput | string
  }

  export type AjudaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tela?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    especialista?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type MessagesCountOrderByAggregateInput = {
    id?: SortOrder
    from?: SortOrder
    to?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    visualizado?: SortOrder
  }

  export type MessagesMaxOrderByAggregateInput = {
    id?: SortOrder
    from?: SortOrder
    to?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    visualizado?: SortOrder
  }

  export type MessagesMinOrderByAggregateInput = {
    id?: SortOrder
    from?: SortOrder
    to?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    visualizado?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type Cadastro_pacientesCountOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Email?: SortOrder
    Data_de_Nascimento?: SortOrder
    Idade?: SortOrder
    Genero?: SortOrder
    CPF_CNPJ?: SortOrder
    Endereco?: SortOrder
    Numero?: SortOrder
    CEP?: SortOrder
    Cidade?: SortOrder
    Estado?: SortOrder
    Nome_do_Pai_ou_Responsavel?: SortOrder
    Telefone_Pai?: SortOrder
    Nome_da_Mae_ou_Responsavel?: SortOrder
    Telefone_Mae?: SortOrder
    Especialista?: SortOrder
    recoveryCode?: SortOrder
    Eh_Crianca?: SortOrder
  }

  export type Cadastro_pacientesAvgOrderByAggregateInput = {
    recoveryCode?: SortOrder
  }

  export type Cadastro_pacientesMaxOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Email?: SortOrder
    Data_de_Nascimento?: SortOrder
    Idade?: SortOrder
    Genero?: SortOrder
    CPF_CNPJ?: SortOrder
    Endereco?: SortOrder
    Numero?: SortOrder
    CEP?: SortOrder
    Cidade?: SortOrder
    Estado?: SortOrder
    Nome_do_Pai_ou_Responsavel?: SortOrder
    Telefone_Pai?: SortOrder
    Nome_da_Mae_ou_Responsavel?: SortOrder
    Telefone_Mae?: SortOrder
    Especialista?: SortOrder
    recoveryCode?: SortOrder
    Eh_Crianca?: SortOrder
  }

  export type Cadastro_pacientesMinOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Email?: SortOrder
    Data_de_Nascimento?: SortOrder
    Idade?: SortOrder
    Genero?: SortOrder
    CPF_CNPJ?: SortOrder
    Endereco?: SortOrder
    Numero?: SortOrder
    CEP?: SortOrder
    Cidade?: SortOrder
    Estado?: SortOrder
    Nome_do_Pai_ou_Responsavel?: SortOrder
    Telefone_Pai?: SortOrder
    Nome_da_Mae_ou_Responsavel?: SortOrder
    Telefone_Mae?: SortOrder
    Especialista?: SortOrder
    recoveryCode?: SortOrder
    Eh_Crianca?: SortOrder
  }

  export type Cadastro_pacientesSumOrderByAggregateInput = {
    recoveryCode?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type AgendamentoCountOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Especialista?: SortOrder
    Data_do_Atendimento?: SortOrder
    Horario_da_consulta?: SortOrder
    Horario_de_Termino_da_consulta?: SortOrder
    Valor_da_Consulta?: SortOrder
    Status_da_Consulta?: SortOrder
    Status_do_pagamento?: SortOrder
    observacao?: SortOrder
    recoveryCode?: SortOrder
    Eh_Aluno?: SortOrder
  }

  export type AgendamentoAvgOrderByAggregateInput = {
    Valor_da_Consulta?: SortOrder
    recoveryCode?: SortOrder
  }

  export type AgendamentoMaxOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Especialista?: SortOrder
    Data_do_Atendimento?: SortOrder
    Horario_da_consulta?: SortOrder
    Horario_de_Termino_da_consulta?: SortOrder
    Valor_da_Consulta?: SortOrder
    Status_da_Consulta?: SortOrder
    Status_do_pagamento?: SortOrder
    observacao?: SortOrder
    recoveryCode?: SortOrder
    Eh_Aluno?: SortOrder
  }

  export type AgendamentoMinOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Especialista?: SortOrder
    Data_do_Atendimento?: SortOrder
    Horario_da_consulta?: SortOrder
    Horario_de_Termino_da_consulta?: SortOrder
    Valor_da_Consulta?: SortOrder
    Status_da_Consulta?: SortOrder
    Status_do_pagamento?: SortOrder
    observacao?: SortOrder
    recoveryCode?: SortOrder
    Eh_Aluno?: SortOrder
  }

  export type AgendamentoSumOrderByAggregateInput = {
    Valor_da_Consulta?: SortOrder
    recoveryCode?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type cadastro_convenioCountOrderByAggregateInput = {
    id?: SortOrder
    Nome_do_Convenio?: SortOrder
    CNPJ?: SortOrder
    Valores?: SortOrder
    Data_de_Contratacao?: SortOrder
  }

  export type cadastro_convenioMaxOrderByAggregateInput = {
    id?: SortOrder
    Nome_do_Convenio?: SortOrder
    CNPJ?: SortOrder
    Valores?: SortOrder
    Data_de_Contratacao?: SortOrder
  }

  export type cadastro_convenioMinOrderByAggregateInput = {
    id?: SortOrder
    Nome_do_Convenio?: SortOrder
    CNPJ?: SortOrder
    Valores?: SortOrder
    Data_de_Contratacao?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type cadastro_userCountOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Email?: SortOrder
    Usuario?: SortOrder
    Senha?: SortOrder
    recoveryCode?: SortOrder
    Profissional?: SortOrder
    Secretaria?: SortOrder
    foto?: SortOrder
  }

  export type cadastro_userAvgOrderByAggregateInput = {
    recoveryCode?: SortOrder
  }

  export type cadastro_userMaxOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Email?: SortOrder
    Usuario?: SortOrder
    Senha?: SortOrder
    recoveryCode?: SortOrder
    Profissional?: SortOrder
    Secretaria?: SortOrder
    foto?: SortOrder
  }

  export type cadastro_userMinOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Email?: SortOrder
    Usuario?: SortOrder
    Senha?: SortOrder
    recoveryCode?: SortOrder
    Profissional?: SortOrder
    Secretaria?: SortOrder
    foto?: SortOrder
  }

  export type cadastro_userSumOrderByAggregateInput = {
    recoveryCode?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type Fluxo_de_caixaCountOrderByAggregateInput = {
    id?: SortOrder
    Descricao?: SortOrder
    Valor?: SortOrder
    Tipo?: SortOrder
    Data?: SortOrder
    Especialista?: SortOrder
  }

  export type Fluxo_de_caixaAvgOrderByAggregateInput = {
    Valor?: SortOrder
  }

  export type Fluxo_de_caixaMaxOrderByAggregateInput = {
    id?: SortOrder
    Descricao?: SortOrder
    Valor?: SortOrder
    Tipo?: SortOrder
    Data?: SortOrder
    Especialista?: SortOrder
  }

  export type Fluxo_de_caixaMinOrderByAggregateInput = {
    id?: SortOrder
    Descricao?: SortOrder
    Valor?: SortOrder
    Tipo?: SortOrder
    Data?: SortOrder
    Especialista?: SortOrder
  }

  export type Fluxo_de_caixaSumOrderByAggregateInput = {
    Valor?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EsperaCountOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Convenio?: SortOrder
    Especialista?: SortOrder
    Observacao?: SortOrder
  }

  export type EsperaMaxOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Convenio?: SortOrder
    Especialista?: SortOrder
    Observacao?: SortOrder
  }

  export type EsperaMinOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Telefone?: SortOrder
    Convenio?: SortOrder
    Especialista?: SortOrder
    Observacao?: SortOrder
  }

  export type cadastro_profCountOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Faixa_Etaria_de_Atendimento?: SortOrder
    Dias_de_Atendimento?: SortOrder
    Horarios_de_Atendimento?: SortOrder
    Especialidade?: SortOrder
    Registro_do_Profissional?: SortOrder
    Especialista?: SortOrder
  }

  export type cadastro_profMaxOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Faixa_Etaria_de_Atendimento?: SortOrder
    Dias_de_Atendimento?: SortOrder
    Horarios_de_Atendimento?: SortOrder
    Especialidade?: SortOrder
    Registro_do_Profissional?: SortOrder
    Especialista?: SortOrder
  }

  export type cadastro_profMinOrderByAggregateInput = {
    id?: SortOrder
    Nome?: SortOrder
    Faixa_Etaria_de_Atendimento?: SortOrder
    Dias_de_Atendimento?: SortOrder
    Horarios_de_Atendimento?: SortOrder
    Especialidade?: SortOrder
    Registro_do_Profissional?: SortOrder
    Especialista?: SortOrder
  }

  export type AtendimentoCountOrderByAggregateInput = {
    id?: SortOrder
    id_agendamento?: SortOrder
    id_paciente?: SortOrder
    conteudoAtestado?: SortOrder
    conteudoComparecimento?: SortOrder
    conteudoEncaminhamento?: SortOrder
    conteudoProntuario?: SortOrder
    conteudoAnamineseI?: SortOrder
    conteudoAnamineseA?: SortOrder
    conteudoNeuroI?: SortOrder
    conteudoNeuroA?: SortOrder
    dataHora?: SortOrder
    tempo?: SortOrder
  }

  export type AtendimentoMaxOrderByAggregateInput = {
    id?: SortOrder
    id_agendamento?: SortOrder
    id_paciente?: SortOrder
    conteudoAtestado?: SortOrder
    conteudoComparecimento?: SortOrder
    conteudoEncaminhamento?: SortOrder
    conteudoProntuario?: SortOrder
    conteudoAnamineseI?: SortOrder
    conteudoAnamineseA?: SortOrder
    conteudoNeuroI?: SortOrder
    conteudoNeuroA?: SortOrder
    dataHora?: SortOrder
    tempo?: SortOrder
  }

  export type AtendimentoMinOrderByAggregateInput = {
    id?: SortOrder
    id_agendamento?: SortOrder
    id_paciente?: SortOrder
    conteudoAtestado?: SortOrder
    conteudoComparecimento?: SortOrder
    conteudoEncaminhamento?: SortOrder
    conteudoProntuario?: SortOrder
    conteudoAnamineseI?: SortOrder
    conteudoAnamineseA?: SortOrder
    conteudoNeuroI?: SortOrder
    conteudoNeuroA?: SortOrder
    dataHora?: SortOrder
    tempo?: SortOrder
  }

  export type AjudaCountOrderByAggregateInput = {
    id?: SortOrder
    tela?: SortOrder
    descricao?: SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
    especialista?: SortOrder
  }

  export type AjudaMaxOrderByAggregateInput = {
    id?: SortOrder
    tela?: SortOrder
    descricao?: SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
    especialista?: SortOrder
  }

  export type AjudaMinOrderByAggregateInput = {
    id?: SortOrder
    tela?: SortOrder
    descricao?: SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
    especialista?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}